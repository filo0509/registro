{"version":3,"file":"index.umd.js","sources":["../src/tablemap.js","../src/schema.js","../src/util.js","../src/cellselection.js","../src/copypaste.js","../src/input.js","../src/fixtables.js","../src/commands.js","../src/tableview.js","../src/columnresizing.js","../src/index.js"],"sourcesContent":["// Because working with row and column-spanning cells is not quite\n// trivial, this code builds up a descriptive structure for a given\n// table node. The structures are cached with the (persistent) table\n// nodes as key, so that they only have to be recomputed when the\n// content of the table changes.\n//\n// This does mean that they have to store table-relative, not\n// document-relative positions. So code that uses them will typically\n// compute the start position of the table and offset positions passed\n// to or gotten from this structure by that amount.\n\nlet readFromCache, addToCache;\n// Prefer using a weak map to cache table maps. Fall back on a\n// fixed-size cache if that's not supported.\nif (typeof WeakMap != 'undefined') {\n  // eslint-disable-next-line\n  let cache = new WeakMap();\n  readFromCache = (key) => cache.get(key);\n  addToCache = (key, value) => {\n    cache.set(key, value);\n    return value;\n  };\n} else {\n  let cache = [],\n    cacheSize = 10,\n    cachePos = 0;\n  readFromCache = (key) => {\n    for (let i = 0; i < cache.length; i += 2)\n      if (cache[i] == key) return cache[i + 1];\n  };\n  addToCache = (key, value) => {\n    if (cachePos == cacheSize) cachePos = 0;\n    cache[cachePos++] = key;\n    return (cache[cachePos++] = value);\n  };\n}\n\nexport class Rect {\n  constructor(left, top, right, bottom) {\n    this.left = left;\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n  }\n}\n\n// ::- A table map describes the structore of a given table. To avoid\n// recomputing them all the time, they are cached per table node. To\n// be able to do that, positions saved in the map are relative to the\n// start of the table, rather than the start of the document.\nexport class TableMap {\n  constructor(width, height, map, problems) {\n    // :: number The width of the table\n    this.width = width;\n    // :: number The table's height\n    this.height = height;\n    // :: [number] A width * height array with the start position of\n    // the cell covering that part of the table in each slot\n    this.map = map;\n    // An optional array of problems (cell overlap or non-rectangular\n    // shape) for the table, used by the table normalizer.\n    this.problems = problems;\n  }\n\n  // :: (number) → Rect\n  // Find the dimensions of the cell at the given position.\n  findCell(pos) {\n    for (let i = 0; i < this.map.length; i++) {\n      let curPos = this.map[i];\n      if (curPos != pos) continue;\n      let left = i % this.width,\n        top = (i / this.width) | 0;\n      let right = left + 1,\n        bottom = top + 1;\n      for (let j = 1; right < this.width && this.map[i + j] == curPos; j++)\n        right++;\n      for (\n        let j = 1;\n        bottom < this.height && this.map[i + this.width * j] == curPos;\n        j++\n      )\n        bottom++;\n      return new Rect(left, top, right, bottom);\n    }\n    throw new RangeError('No cell with offset ' + pos + ' found');\n  }\n\n  // :: (number) → number\n  // Find the left side of the cell at the given position.\n  colCount(pos) {\n    for (let i = 0; i < this.map.length; i++)\n      if (this.map[i] == pos) return i % this.width;\n    throw new RangeError('No cell with offset ' + pos + ' found');\n  }\n\n  // :: (number, string, number) → ?number\n  // Find the next cell in the given direction, starting from the cell\n  // at `pos`, if any.\n  nextCell(pos, axis, dir) {\n    let { left, right, top, bottom } = this.findCell(pos);\n    if (axis == 'horiz') {\n      if (dir < 0 ? left == 0 : right == this.width) return null;\n      return this.map[top * this.width + (dir < 0 ? left - 1 : right)];\n    } else {\n      if (dir < 0 ? top == 0 : bottom == this.height) return null;\n      return this.map[left + this.width * (dir < 0 ? top - 1 : bottom)];\n    }\n  }\n\n  // :: (number, number) → Rect\n  // Get the rectangle spanning the two given cells.\n  rectBetween(a, b) {\n    let {\n      left: leftA,\n      right: rightA,\n      top: topA,\n      bottom: bottomA,\n    } = this.findCell(a);\n    let {\n      left: leftB,\n      right: rightB,\n      top: topB,\n      bottom: bottomB,\n    } = this.findCell(b);\n    return new Rect(\n      Math.min(leftA, leftB),\n      Math.min(topA, topB),\n      Math.max(rightA, rightB),\n      Math.max(bottomA, bottomB),\n    );\n  }\n\n  // :: (Rect) → [number]\n  // Return the position of all cells that have the top left corner in\n  // the given rectangle.\n  cellsInRect(rect) {\n    let result = [],\n      seen = {};\n    for (let row = rect.top; row < rect.bottom; row++) {\n      for (let col = rect.left; col < rect.right; col++) {\n        let index = row * this.width + col,\n          pos = this.map[index];\n        if (seen[pos]) continue;\n        seen[pos] = true;\n        if (\n          (col != rect.left || !col || this.map[index - 1] != pos) &&\n          (row != rect.top || !row || this.map[index - this.width] != pos)\n        )\n          result.push(pos);\n      }\n    }\n    return result;\n  }\n\n  // :: (number, number, Node) → number\n  // Return the position at which the cell at the given row and column\n  // starts, or would start, if a cell started there.\n  positionAt(row, col, table) {\n    for (let i = 0, rowStart = 0; ; i++) {\n      let rowEnd = rowStart + table.child(i).nodeSize;\n      if (i == row) {\n        let index = col + row * this.width,\n          rowEndIndex = (row + 1) * this.width;\n        // Skip past cells from previous rows (via rowspan)\n        while (index < rowEndIndex && this.map[index] < rowStart) index++;\n        return index == rowEndIndex ? rowEnd - 1 : this.map[index];\n      }\n      rowStart = rowEnd;\n    }\n  }\n\n  // :: (Node) → TableMap\n  // Find the table map for the given table node.\n  static get(table) {\n    return readFromCache(table) || addToCache(table, computeMap(table));\n  }\n}\n\n// Compute a table map.\nfunction computeMap(table) {\n  if (table.type.spec.tableRole != 'table')\n    throw new RangeError('Not a table node: ' + table.type.name);\n  let width = findWidth(table),\n    height = table.childCount;\n  let map = [],\n    mapPos = 0,\n    problems = null,\n    colWidths = [];\n  for (let i = 0, e = width * height; i < e; i++) map[i] = 0;\n\n  for (let row = 0, pos = 0; row < height; row++) {\n    let rowNode = table.child(row);\n    pos++;\n    for (let i = 0; ; i++) {\n      while (mapPos < map.length && map[mapPos] != 0) mapPos++;\n      if (i == rowNode.childCount) break;\n      let cellNode = rowNode.child(i),\n        { colspan, rowspan, colwidth } = cellNode.attrs;\n      for (let h = 0; h < rowspan; h++) {\n        if (h + row >= height) {\n          (problems || (problems = [])).push({\n            type: 'overlong_rowspan',\n            pos,\n            n: rowspan - h,\n          });\n          break;\n        }\n        let start = mapPos + h * width;\n        for (let w = 0; w < colspan; w++) {\n          if (map[start + w] == 0) map[start + w] = pos;\n          else\n            (problems || (problems = [])).push({\n              type: 'collision',\n              row,\n              pos,\n              n: colspan - w,\n            });\n          let colW = colwidth && colwidth[w];\n          if (colW) {\n            let widthIndex = ((start + w) % width) * 2,\n              prev = colWidths[widthIndex];\n            if (\n              prev == null ||\n              (prev != colW && colWidths[widthIndex + 1] == 1)\n            ) {\n              colWidths[widthIndex] = colW;\n              colWidths[widthIndex + 1] = 1;\n            } else if (prev == colW) {\n              colWidths[widthIndex + 1]++;\n            }\n          }\n        }\n      }\n      mapPos += colspan;\n      pos += cellNode.nodeSize;\n    }\n    let expectedPos = (row + 1) * width,\n      missing = 0;\n    while (mapPos < expectedPos) if (map[mapPos++] == 0) missing++;\n    if (missing)\n      (problems || (problems = [])).push({ type: 'missing', row, n: missing });\n    pos++;\n  }\n\n  let tableMap = new TableMap(width, height, map, problems),\n    badWidths = false;\n\n  // For columns that have defined widths, but whose widths disagree\n  // between rows, fix up the cells whose width doesn't match the\n  // computed one.\n  for (let i = 0; !badWidths && i < colWidths.length; i += 2)\n    if (colWidths[i] != null && colWidths[i + 1] < height) badWidths = true;\n  if (badWidths) findBadColWidths(tableMap, colWidths, table);\n\n  return tableMap;\n}\n\nfunction findWidth(table) {\n  let width = -1,\n    hasRowSpan = false;\n  for (let row = 0; row < table.childCount; row++) {\n    let rowNode = table.child(row),\n      rowWidth = 0;\n    if (hasRowSpan)\n      for (let j = 0; j < row; j++) {\n        let prevRow = table.child(j);\n        for (let i = 0; i < prevRow.childCount; i++) {\n          let cell = prevRow.child(i);\n          if (j + cell.attrs.rowspan > row) rowWidth += cell.attrs.colspan;\n        }\n      }\n    for (let i = 0; i < rowNode.childCount; i++) {\n      let cell = rowNode.child(i);\n      rowWidth += cell.attrs.colspan;\n      if (cell.attrs.rowspan > 1) hasRowSpan = true;\n    }\n    if (width == -1) width = rowWidth;\n    else if (width != rowWidth) width = Math.max(width, rowWidth);\n  }\n  return width;\n}\n\nfunction findBadColWidths(map, colWidths, table) {\n  if (!map.problems) map.problems = [];\n  for (let i = 0, seen = {}; i < map.map.length; i++) {\n    let pos = map.map[i];\n    if (seen[pos]) continue;\n    seen[pos] = true;\n    let node = table.nodeAt(pos),\n      updated = null;\n    for (let j = 0; j < node.attrs.colspan; j++) {\n      let col = (i + j) % map.width,\n        colWidth = colWidths[col * 2];\n      if (\n        colWidth != null &&\n        (!node.attrs.colwidth || node.attrs.colwidth[j] != colWidth)\n      )\n        (updated || (updated = freshColWidth(node.attrs)))[j] = colWidth;\n    }\n    if (updated)\n      map.problems.unshift({\n        type: 'colwidth mismatch',\n        pos,\n        colwidth: updated,\n      });\n  }\n}\n\nfunction freshColWidth(attrs) {\n  if (attrs.colwidth) return attrs.colwidth.slice();\n  let result = [];\n  for (let i = 0; i < attrs.colspan; i++) result.push(0);\n  return result;\n}\n","// Helper for creating a schema that supports tables.\n\nfunction getCellAttrs(dom, extraAttrs) {\n  let widthAttr = dom.getAttribute('data-colwidth');\n  let widths =\n    widthAttr && /^\\d+(,\\d+)*$/.test(widthAttr)\n      ? widthAttr.split(',').map((s) => Number(s))\n      : null;\n  let colspan = Number(dom.getAttribute('colspan') || 1);\n  let result = {\n    colspan,\n    rowspan: Number(dom.getAttribute('rowspan') || 1),\n    colwidth: widths && widths.length == colspan ? widths : null,\n  };\n  for (let prop in extraAttrs) {\n    let getter = extraAttrs[prop].getFromDOM;\n    let value = getter && getter(dom);\n    if (value != null) result[prop] = value;\n  }\n  return result;\n}\n\nfunction setCellAttrs(node, extraAttrs) {\n  let attrs = {};\n  if (node.attrs.colspan != 1) attrs.colspan = node.attrs.colspan;\n  if (node.attrs.rowspan != 1) attrs.rowspan = node.attrs.rowspan;\n  if (node.attrs.colwidth)\n    attrs['data-colwidth'] = node.attrs.colwidth.join(',');\n  for (let prop in extraAttrs) {\n    let setter = extraAttrs[prop].setDOMAttr;\n    if (setter) setter(node.attrs[prop], attrs);\n  }\n  return attrs;\n}\n\n// :: (Object) → Object\n//\n// This function creates a set of [node\n// specs](http://prosemirror.net/docs/ref/#model.SchemaSpec.nodes) for\n// `table`, `table_row`, and `table_cell` nodes types as used by this\n// module. The result can then be added to the set of nodes when\n// creating a a schema.\n//\n//   options::- The following options are understood:\n//\n//     tableGroup:: ?string\n//     A group name (something like `\"block\"`) to add to the table\n//     node type.\n//\n//     cellContent:: string\n//     The content expression for table cells.\n//\n//     cellAttributes:: ?Object\n//     Additional attributes to add to cells. Maps attribute names to\n//     objects with the following properties:\n//\n//       default:: any\n//       The attribute's default value.\n//\n//       getFromDOM:: ?(dom.Node) → any\n//       A function to read the attribute's value from a DOM node.\n//\n//       setDOMAttr:: ?(value: any, attrs: Object)\n//       A function to add the attribute's value to an attribute\n//       object that's used to render the cell's DOM.\nexport function tableNodes(options) {\n  let extraAttrs = options.cellAttributes || {};\n  let cellAttrs = {\n    colspan: { default: 1 },\n    rowspan: { default: 1 },\n    colwidth: { default: null },\n  };\n  for (let prop in extraAttrs)\n    cellAttrs[prop] = { default: extraAttrs[prop].default };\n\n  return {\n    table: {\n      content: 'table_row+',\n      tableRole: 'table',\n      isolating: true,\n      group: options.tableGroup,\n      parseDOM: [{ tag: 'table' }],\n      toDOM() {\n        return ['table', ['tbody', 0]];\n      },\n    },\n    table_row: {\n      content: '(table_cell | table_header)*',\n      tableRole: 'row',\n      parseDOM: [{ tag: 'tr' }],\n      toDOM() {\n        return ['tr', 0];\n      },\n    },\n    table_cell: {\n      content: options.cellContent,\n      attrs: cellAttrs,\n      tableRole: 'cell',\n      isolating: true,\n      parseDOM: [\n        { tag: 'td', getAttrs: (dom) => getCellAttrs(dom, extraAttrs) },\n      ],\n      toDOM(node) {\n        return ['td', setCellAttrs(node, extraAttrs), 0];\n      },\n    },\n    table_header: {\n      content: options.cellContent,\n      attrs: cellAttrs,\n      tableRole: 'header_cell',\n      isolating: true,\n      parseDOM: [\n        { tag: 'th', getAttrs: (dom) => getCellAttrs(dom, extraAttrs) },\n      ],\n      toDOM(node) {\n        return ['th', setCellAttrs(node, extraAttrs), 0];\n      },\n    },\n  };\n}\n\nexport function tableNodeTypes(schema) {\n  let result = schema.cached.tableNodeTypes;\n  if (!result) {\n    result = schema.cached.tableNodeTypes = {};\n    for (let name in schema.nodes) {\n      let type = schema.nodes[name],\n        role = type.spec.tableRole;\n      if (role) result[role] = type;\n    }\n  }\n  return result;\n}\n","// Various helper function for working with tables\n\nimport { PluginKey } from 'prosemirror-state';\n\nimport { TableMap } from './tablemap';\nimport { tableNodeTypes } from './schema';\n\nexport const key = new PluginKey('selectingCells');\n\nexport function cellAround($pos) {\n  for (let d = $pos.depth - 1; d > 0; d--)\n    if ($pos.node(d).type.spec.tableRole == 'row')\n      return $pos.node(0).resolve($pos.before(d + 1));\n  return null;\n}\n\nexport function cellWrapping($pos) {\n  for (let d = $pos.depth; d > 0; d--) {\n    // Sometimes the cell can be in the same depth.\n    const role = $pos.node(d).type.spec.tableRole;\n    if (role === 'cell' || role === 'header_cell') return $pos.node(d);\n  }\n  return null;\n}\n\nexport function isInTable(state) {\n  let $head = state.selection.$head;\n  for (let d = $head.depth; d > 0; d--)\n    if ($head.node(d).type.spec.tableRole == 'row') return true;\n  return false;\n}\n\nexport function selectionCell(state) {\n  let sel = state.selection;\n  if (sel.$anchorCell) {\n    return sel.$anchorCell.pos > sel.$headCell.pos\n      ? sel.$anchorCell\n      : sel.$headCell;\n  } else if (sel.node && sel.node.type.spec.tableRole == 'cell') {\n    return sel.$anchor;\n  }\n  return cellAround(sel.$head) || cellNear(sel.$head);\n}\n\nfunction cellNear($pos) {\n  for (\n    let after = $pos.nodeAfter, pos = $pos.pos;\n    after;\n    after = after.firstChild, pos++\n  ) {\n    let role = after.type.spec.tableRole;\n    if (role == 'cell' || role == 'header_cell') return $pos.doc.resolve(pos);\n  }\n  for (\n    let before = $pos.nodeBefore, pos = $pos.pos;\n    before;\n    before = before.lastChild, pos--\n  ) {\n    let role = before.type.spec.tableRole;\n    if (role == 'cell' || role == 'header_cell')\n      return $pos.doc.resolve(pos - before.nodeSize);\n  }\n}\n\nexport function pointsAtCell($pos) {\n  return $pos.parent.type.spec.tableRole == 'row' && $pos.nodeAfter;\n}\n\nexport function moveCellForward($pos) {\n  return $pos.node(0).resolve($pos.pos + $pos.nodeAfter.nodeSize);\n}\n\nexport function inSameTable($a, $b) {\n  return $a.depth == $b.depth && $a.pos >= $b.start(-1) && $a.pos <= $b.end(-1);\n}\n\nexport function findCell($pos) {\n  return TableMap.get($pos.node(-1)).findCell($pos.pos - $pos.start(-1));\n}\n\nexport function colCount($pos) {\n  return TableMap.get($pos.node(-1)).colCount($pos.pos - $pos.start(-1));\n}\n\nexport function nextCell($pos, axis, dir) {\n  let start = $pos.start(-1),\n    map = TableMap.get($pos.node(-1));\n  let moved = map.nextCell($pos.pos - start, axis, dir);\n  return moved == null ? null : $pos.node(0).resolve(start + moved);\n}\n\nexport function setAttr(attrs, name, value) {\n  let result = {};\n  for (let prop in attrs) result[prop] = attrs[prop];\n  result[name] = value;\n  return result;\n}\n\nexport function removeColSpan(attrs, pos, n = 1) {\n  let result = setAttr(attrs, 'colspan', attrs.colspan - n);\n  if (result.colwidth) {\n    result.colwidth = result.colwidth.slice();\n    result.colwidth.splice(pos, n);\n    if (!result.colwidth.some((w) => w > 0)) result.colwidth = null;\n  }\n  return result;\n}\n\nexport function addColSpan(attrs, pos, n = 1) {\n  let result = setAttr(attrs, 'colspan', attrs.colspan + n);\n  if (result.colwidth) {\n    result.colwidth = result.colwidth.slice();\n    for (let i = 0; i < n; i++) result.colwidth.splice(pos, 0, 0);\n  }\n  return result;\n}\n\nexport function columnIsHeader(map, table, col) {\n  let headerCell = tableNodeTypes(table.type.schema).header_cell;\n  for (let row = 0; row < map.height; row++)\n    if (table.nodeAt(map.map[col + row * map.width]).type != headerCell)\n      return false;\n  return true;\n}\n","// This file defines a ProseMirror selection subclass that models\n// table cell selections. The table plugin needs to be active to wire\n// in the user interaction part of table selections (so that you\n// actually get such selections when you select across cells).\n\nimport {\n  Selection,\n  TextSelection,\n  NodeSelection,\n  SelectionRange,\n} from 'prosemirror-state';\nimport { Decoration, DecorationSet } from 'prosemirror-view';\nimport { Fragment, Slice } from 'prosemirror-model';\n\nimport { inSameTable, pointsAtCell, setAttr, removeColSpan } from './util';\nimport { TableMap } from './tablemap';\n\n// ::- A [`Selection`](http://prosemirror.net/docs/ref/#state.Selection)\n// subclass that represents a cell selection spanning part of a table.\n// With the plugin enabled, these will be created when the user\n// selects across cells, and will be drawn by giving selected cells a\n// `selectedCell` CSS class.\nexport class CellSelection extends Selection {\n  // :: (ResolvedPos, ?ResolvedPos)\n  // A table selection is identified by its anchor and head cells. The\n  // positions given to this constructor should point _before_ two\n  // cells in the same table. They may be the same, to select a single\n  // cell.\n  constructor($anchorCell, $headCell = $anchorCell) {\n    let table = $anchorCell.node(-1),\n      map = TableMap.get(table),\n      start = $anchorCell.start(-1);\n    let rect = map.rectBetween($anchorCell.pos - start, $headCell.pos - start);\n    let doc = $anchorCell.node(0);\n    let cells = map.cellsInRect(rect).filter((p) => p != $headCell.pos - start);\n    // Make the head cell the first range, so that it counts as the\n    // primary part of the selection\n    cells.unshift($headCell.pos - start);\n    let ranges = cells.map((pos) => {\n      let cell = table.nodeAt(pos),\n        from = pos + start + 1;\n      return new SelectionRange(\n        doc.resolve(from),\n        doc.resolve(from + cell.content.size),\n      );\n    });\n    super(ranges[0].$from, ranges[0].$to, ranges);\n    // :: ResolvedPos\n    // A resolved position pointing _in front of_ the anchor cell (the one\n    // that doesn't move when extending the selection).\n    this.$anchorCell = $anchorCell;\n    // :: ResolvedPos\n    // A resolved position pointing in front of the head cell (the one\n    // moves when extending the selection).\n    this.$headCell = $headCell;\n  }\n\n  map(doc, mapping) {\n    let $anchorCell = doc.resolve(mapping.map(this.$anchorCell.pos));\n    let $headCell = doc.resolve(mapping.map(this.$headCell.pos));\n    if (\n      pointsAtCell($anchorCell) &&\n      pointsAtCell($headCell) &&\n      inSameTable($anchorCell, $headCell)\n    ) {\n      let tableChanged = this.$anchorCell.node(-1) != $anchorCell.node(-1);\n      if (tableChanged && this.isRowSelection())\n        return CellSelection.rowSelection($anchorCell, $headCell);\n      else if (tableChanged && this.isColSelection())\n        return CellSelection.colSelection($anchorCell, $headCell);\n      else return new CellSelection($anchorCell, $headCell);\n    }\n    return TextSelection.between($anchorCell, $headCell);\n  }\n\n  // :: () → Slice\n  // Returns a rectangular slice of table rows containing the selected\n  // cells.\n  content() {\n    let table = this.$anchorCell.node(-1),\n      map = TableMap.get(table),\n      start = this.$anchorCell.start(-1);\n    let rect = map.rectBetween(\n      this.$anchorCell.pos - start,\n      this.$headCell.pos - start,\n    );\n    let seen = {},\n      rows = [];\n    for (let row = rect.top; row < rect.bottom; row++) {\n      let rowContent = [];\n      for (\n        let index = row * map.width + rect.left, col = rect.left;\n        col < rect.right;\n        col++, index++\n      ) {\n        let pos = map.map[index];\n        if (!seen[pos]) {\n          seen[pos] = true;\n          let cellRect = map.findCell(pos),\n            cell = table.nodeAt(pos);\n          let extraLeft = rect.left - cellRect.left,\n            extraRight = cellRect.right - rect.right;\n          if (extraLeft > 0 || extraRight > 0) {\n            let attrs = cell.attrs;\n            if (extraLeft > 0) attrs = removeColSpan(attrs, 0, extraLeft);\n            if (extraRight > 0)\n              attrs = removeColSpan(\n                attrs,\n                attrs.colspan - extraRight,\n                extraRight,\n              );\n            if (cellRect.left < rect.left)\n              cell = cell.type.createAndFill(attrs);\n            else cell = cell.type.create(attrs, cell.content);\n          }\n          if (cellRect.top < rect.top || cellRect.bottom > rect.bottom) {\n            let attrs = setAttr(\n              cell.attrs,\n              'rowspan',\n              Math.min(cellRect.bottom, rect.bottom) -\n                Math.max(cellRect.top, rect.top),\n            );\n            if (cellRect.top < rect.top) cell = cell.type.createAndFill(attrs);\n            else cell = cell.type.create(attrs, cell.content);\n          }\n          rowContent.push(cell);\n        }\n      }\n      rows.push(table.child(row).copy(Fragment.from(rowContent)));\n    }\n\n    const fragment =\n      this.isColSelection() && this.isRowSelection() ? table : rows;\n    return new Slice(Fragment.from(fragment), 1, 1);\n  }\n\n  replace(tr, content = Slice.empty) {\n    let mapFrom = tr.steps.length,\n      ranges = this.ranges;\n    for (let i = 0; i < ranges.length; i++) {\n      let { $from, $to } = ranges[i],\n        mapping = tr.mapping.slice(mapFrom);\n      tr.replace(\n        mapping.map($from.pos),\n        mapping.map($to.pos),\n        i ? Slice.empty : content,\n      );\n    }\n    let sel = Selection.findFrom(\n      tr.doc.resolve(tr.mapping.slice(mapFrom).map(this.to)),\n      -1,\n    );\n    if (sel) tr.setSelection(sel);\n  }\n\n  replaceWith(tr, node) {\n    this.replace(tr, new Slice(Fragment.from(node), 0, 0));\n  }\n\n  forEachCell(f) {\n    let table = this.$anchorCell.node(-1),\n      map = TableMap.get(table),\n      start = this.$anchorCell.start(-1);\n    let cells = map.cellsInRect(\n      map.rectBetween(this.$anchorCell.pos - start, this.$headCell.pos - start),\n    );\n    for (let i = 0; i < cells.length; i++)\n      f(table.nodeAt(cells[i]), start + cells[i]);\n  }\n\n  // :: () → bool\n  // True if this selection goes all the way from the top to the\n  // bottom of the table.\n  isColSelection() {\n    let anchorTop = this.$anchorCell.index(-1),\n      headTop = this.$headCell.index(-1);\n    if (Math.min(anchorTop, headTop) > 0) return false;\n    let anchorBot = anchorTop + this.$anchorCell.nodeAfter.attrs.rowspan,\n      headBot = headTop + this.$headCell.nodeAfter.attrs.rowspan;\n    return Math.max(anchorBot, headBot) == this.$headCell.node(-1).childCount;\n  }\n\n  // :: (ResolvedPos, ?ResolvedPos) → CellSelection\n  // Returns the smallest column selection that covers the given anchor\n  // and head cell.\n  static colSelection($anchorCell, $headCell = $anchorCell) {\n    let map = TableMap.get($anchorCell.node(-1)),\n      start = $anchorCell.start(-1);\n    let anchorRect = map.findCell($anchorCell.pos - start),\n      headRect = map.findCell($headCell.pos - start);\n    let doc = $anchorCell.node(0);\n    if (anchorRect.top <= headRect.top) {\n      if (anchorRect.top > 0)\n        $anchorCell = doc.resolve(start + map.map[anchorRect.left]);\n      if (headRect.bottom < map.height)\n        $headCell = doc.resolve(\n          start + map.map[map.width * (map.height - 1) + headRect.right - 1],\n        );\n    } else {\n      if (headRect.top > 0)\n        $headCell = doc.resolve(start + map.map[headRect.left]);\n      if (anchorRect.bottom < map.height)\n        $anchorCell = doc.resolve(\n          start + map.map[map.width * (map.height - 1) + anchorRect.right - 1],\n        );\n    }\n    return new CellSelection($anchorCell, $headCell);\n  }\n\n  // :: () → bool\n  // True if this selection goes all the way from the left to the\n  // right of the table.\n  isRowSelection() {\n    let map = TableMap.get(this.$anchorCell.node(-1)),\n      start = this.$anchorCell.start(-1);\n    let anchorLeft = map.colCount(this.$anchorCell.pos - start),\n      headLeft = map.colCount(this.$headCell.pos - start);\n    if (Math.min(anchorLeft, headLeft) > 0) return false;\n    let anchorRight = anchorLeft + this.$anchorCell.nodeAfter.attrs.colspan,\n      headRight = headLeft + this.$headCell.nodeAfter.attrs.colspan;\n    return Math.max(anchorRight, headRight) == map.width;\n  }\n\n  eq(other) {\n    return (\n      other instanceof CellSelection &&\n      other.$anchorCell.pos == this.$anchorCell.pos &&\n      other.$headCell.pos == this.$headCell.pos\n    );\n  }\n\n  // :: (ResolvedPos, ?ResolvedPos) → CellSelection\n  // Returns the smallest row selection that covers the given anchor\n  // and head cell.\n  static rowSelection($anchorCell, $headCell = $anchorCell) {\n    let map = TableMap.get($anchorCell.node(-1)),\n      start = $anchorCell.start(-1);\n    let anchorRect = map.findCell($anchorCell.pos - start),\n      headRect = map.findCell($headCell.pos - start);\n    let doc = $anchorCell.node(0);\n    if (anchorRect.left <= headRect.left) {\n      if (anchorRect.left > 0)\n        $anchorCell = doc.resolve(start + map.map[anchorRect.top * map.width]);\n      if (headRect.right < map.width)\n        $headCell = doc.resolve(\n          start + map.map[map.width * (headRect.top + 1) - 1],\n        );\n    } else {\n      if (headRect.left > 0)\n        $headCell = doc.resolve(start + map.map[headRect.top * map.width]);\n      if (anchorRect.right < map.width)\n        $anchorCell = doc.resolve(\n          start + map.map[map.width * (anchorRect.top + 1) - 1],\n        );\n    }\n    return new CellSelection($anchorCell, $headCell);\n  }\n\n  toJSON() {\n    return {\n      type: 'cell',\n      anchor: this.$anchorCell.pos,\n      head: this.$headCell.pos,\n    };\n  }\n\n  static fromJSON(doc, json) {\n    return new CellSelection(doc.resolve(json.anchor), doc.resolve(json.head));\n  }\n\n  // :: (Node, number, ?number) → CellSelection\n  static create(doc, anchorCell, headCell = anchorCell) {\n    return new CellSelection(doc.resolve(anchorCell), doc.resolve(headCell));\n  }\n\n  getBookmark() {\n    return new CellBookmark(this.$anchorCell.pos, this.$headCell.pos);\n  }\n}\n\nCellSelection.prototype.visible = false;\n\nSelection.jsonID('cell', CellSelection);\n\nclass CellBookmark {\n  constructor(anchor, head) {\n    this.anchor = anchor;\n    this.head = head;\n  }\n  map(mapping) {\n    return new CellBookmark(mapping.map(this.anchor), mapping.map(this.head));\n  }\n  resolve(doc) {\n    let $anchorCell = doc.resolve(this.anchor),\n      $headCell = doc.resolve(this.head);\n    if (\n      $anchorCell.parent.type.spec.tableRole == 'row' &&\n      $headCell.parent.type.spec.tableRole == 'row' &&\n      $anchorCell.index() < $anchorCell.parent.childCount &&\n      $headCell.index() < $headCell.parent.childCount &&\n      inSameTable($anchorCell, $headCell)\n    )\n      return new CellSelection($anchorCell, $headCell);\n    else return Selection.near($headCell, 1);\n  }\n}\n\nexport function drawCellSelection(state) {\n  if (!(state.selection instanceof CellSelection)) return null;\n  let cells = [];\n  state.selection.forEachCell((node, pos) => {\n    cells.push(\n      Decoration.node(pos, pos + node.nodeSize, { class: 'selectedCell' }),\n    );\n  });\n  return DecorationSet.create(state.doc, cells);\n}\n\nfunction isCellBoundarySelection({ $from, $to }) {\n  if ($from.pos == $to.pos || $from.pos < $from.pos - 6) return false; // Cheap elimination\n  let afterFrom = $from.pos,\n    beforeTo = $to.pos,\n    depth = $from.depth;\n  for (; depth >= 0; depth--, afterFrom++)\n    if ($from.after(depth + 1) < $from.end(depth)) break;\n  for (let d = $to.depth; d >= 0; d--, beforeTo--)\n    if ($to.before(d + 1) > $to.start(d)) break;\n  return (\n    afterFrom == beforeTo &&\n    /row|table/.test($from.node(depth).type.spec.tableRole)\n  );\n}\n\nfunction isTextSelectionAcrossCells({ $from, $to }) {\n  let fromCellBoundaryNode;\n  let toCellBoundaryNode;\n\n  for (let i = $from.depth; i > 0; i--) {\n    let node = $from.node(i);\n    if (\n      node.type.spec.tableRole === 'cell' ||\n      node.type.spec.tableRole === 'header_cell'\n    ) {\n      fromCellBoundaryNode = node;\n      break;\n    }\n  }\n\n  for (let i = $to.depth; i > 0; i--) {\n    let node = $to.node(i);\n    if (\n      node.type.spec.tableRole === 'cell' ||\n      node.type.spec.tableRole === 'header_cell'\n    ) {\n      toCellBoundaryNode = node;\n      break;\n    }\n  }\n\n  return fromCellBoundaryNode !== toCellBoundaryNode && $to.parentOffset === 0;\n}\n\nexport function normalizeSelection(state, tr, allowTableNodeSelection) {\n  let sel = (tr || state).selection,\n    doc = (tr || state).doc,\n    normalize,\n    role;\n  if (sel instanceof NodeSelection && (role = sel.node.type.spec.tableRole)) {\n    if (role == 'cell' || role == 'header_cell') {\n      normalize = CellSelection.create(doc, sel.from);\n    } else if (role == 'row') {\n      let $cell = doc.resolve(sel.from + 1);\n      normalize = CellSelection.rowSelection($cell, $cell);\n    } else if (!allowTableNodeSelection) {\n      let map = TableMap.get(sel.node),\n        start = sel.from + 1;\n      let lastCell = start + map.map[map.width * map.height - 1];\n      normalize = CellSelection.create(doc, start + 1, lastCell);\n    }\n  } else if (sel instanceof TextSelection && isCellBoundarySelection(sel)) {\n    normalize = TextSelection.create(doc, sel.from);\n  } else if (sel instanceof TextSelection && isTextSelectionAcrossCells(sel)) {\n    normalize = TextSelection.create(doc, sel.$from.start(), sel.$from.end());\n  }\n  if (normalize) (tr || (tr = state.tr)).setSelection(normalize);\n  return tr;\n}\n","// Utilities used for copy/paste handling.\n//\n// This module handles pasting cell content into tables, or pasting\n// anything into a cell selection, as replacing a block of cells with\n// the content of the selection. When pasting cells into a cell, that\n// involves placing the block of pasted content so that its top left\n// aligns with the selection cell, optionally extending the table to\n// the right or bottom to make sure it is large enough. Pasting into a\n// cell selection is different, here the cells in the selection are\n// clipped to the selection's rectangle, optionally repeating the\n// pasted cells when they are smaller than the selection.\n\nimport { Slice, Fragment } from 'prosemirror-model';\nimport { Transform } from 'prosemirror-transform';\n\nimport { setAttr, removeColSpan } from './util';\nimport { TableMap } from './tablemap';\nimport { CellSelection } from './cellselection';\nimport { tableNodeTypes } from './schema';\n\n// Utilities to help with copying and pasting table cells\n\n// : (Slice) → ?{width: number, height: number, rows: [Fragment]}\n// Get a rectangular area of cells from a slice, or null if the outer\n// nodes of the slice aren't table cells or rows.\nexport function pastedCells(slice) {\n  if (!slice.size) return null;\n  let { content, openStart, openEnd } = slice;\n  while (\n    content.childCount == 1 &&\n    ((openStart > 0 && openEnd > 0) ||\n      content.firstChild.type.spec.tableRole == 'table')\n  ) {\n    openStart--;\n    openEnd--;\n    content = content.firstChild.content;\n  }\n  let first = content.firstChild,\n    role = first.type.spec.tableRole;\n  let schema = first.type.schema,\n    rows = [];\n  if (role == 'row') {\n    for (let i = 0; i < content.childCount; i++) {\n      let cells = content.child(i).content;\n      let left = i ? 0 : Math.max(0, openStart - 1);\n      let right = i < content.childCount - 1 ? 0 : Math.max(0, openEnd - 1);\n      if (left || right)\n        cells = fitSlice(\n          tableNodeTypes(schema).row,\n          new Slice(cells, left, right),\n        ).content;\n      rows.push(cells);\n    }\n  } else if (role == 'cell' || role == 'header_cell') {\n    rows.push(\n      openStart || openEnd\n        ? fitSlice(\n            tableNodeTypes(schema).row,\n            new Slice(content, openStart, openEnd),\n          ).content\n        : content,\n    );\n  } else {\n    return null;\n  }\n  return ensureRectangular(schema, rows);\n}\n\n// : (Schema, [Fragment]) → {width: number, height: number, rows: [Fragment]}\n// Compute the width and height of a set of cells, and make sure each\n// row has the same number of cells.\nfunction ensureRectangular(schema, rows) {\n  let widths = [];\n  for (let i = 0; i < rows.length; i++) {\n    let row = rows[i];\n    for (let j = row.childCount - 1; j >= 0; j--) {\n      let { rowspan, colspan } = row.child(j).attrs;\n      for (let r = i; r < i + rowspan; r++)\n        widths[r] = (widths[r] || 0) + colspan;\n    }\n  }\n  let width = 0;\n  for (let r = 0; r < widths.length; r++) width = Math.max(width, widths[r]);\n  for (let r = 0; r < widths.length; r++) {\n    if (r >= rows.length) rows.push(Fragment.empty);\n    if (widths[r] < width) {\n      let empty = tableNodeTypes(schema).cell.createAndFill(),\n        cells = [];\n      for (let i = widths[r]; i < width; i++) cells.push(empty);\n      rows[r] = rows[r].append(Fragment.from(cells));\n    }\n  }\n  return { height: rows.length, width, rows };\n}\n\nexport function fitSlice(nodeType, slice) {\n  let node = nodeType.createAndFill();\n  let tr = new Transform(node).replace(0, node.content.size, slice);\n  return tr.doc;\n}\n\n// : ({width: number, height: number, rows: [Fragment]}, number, number) → {width: number, height: number, rows: [Fragment]}\n// Clip or extend (repeat) the given set of cells to cover the given\n// width and height. Will clip rowspan/colspan cells at the edges when\n// they stick out.\nexport function clipCells({ width, height, rows }, newWidth, newHeight) {\n  if (width != newWidth) {\n    let added = [],\n      newRows = [];\n    for (let row = 0; row < rows.length; row++) {\n      let frag = rows[row],\n        cells = [];\n      for (let col = added[row] || 0, i = 0; col < newWidth; i++) {\n        let cell = frag.child(i % frag.childCount);\n        if (col + cell.attrs.colspan > newWidth)\n          cell = cell.type.create(\n            removeColSpan(\n              cell.attrs,\n              cell.attrs.colspan,\n              col + cell.attrs.colspan - newWidth,\n            ),\n            cell.content,\n          );\n        cells.push(cell);\n        col += cell.attrs.colspan;\n        for (let j = 1; j < cell.attrs.rowspan; j++)\n          added[row + j] = (added[row + j] || 0) + cell.attrs.colspan;\n      }\n      newRows.push(Fragment.from(cells));\n    }\n    rows = newRows;\n    width = newWidth;\n  }\n\n  if (height != newHeight) {\n    let newRows = [];\n    for (let row = 0, i = 0; row < newHeight; row++, i++) {\n      let cells = [],\n        source = rows[i % height];\n      for (let j = 0; j < source.childCount; j++) {\n        let cell = source.child(j);\n        if (row + cell.attrs.rowspan > newHeight)\n          cell = cell.type.create(\n            setAttr(\n              cell.attrs,\n              'rowspan',\n              Math.max(1, newHeight - cell.attrs.rowspan),\n            ),\n            cell.content,\n          );\n        cells.push(cell);\n      }\n      newRows.push(Fragment.from(cells));\n    }\n    rows = newRows;\n    height = newHeight;\n  }\n\n  return { width, height, rows };\n}\n\n// Make sure a table has at least the given width and height. Return\n// true if something was changed.\nfunction growTable(tr, map, table, start, width, height, mapFrom) {\n  let schema = tr.doc.type.schema,\n    types = tableNodeTypes(schema),\n    empty,\n    emptyHead;\n  if (width > map.width) {\n    for (let row = 0, rowEnd = 0; row < map.height; row++) {\n      let rowNode = table.child(row);\n      rowEnd += rowNode.nodeSize;\n      let cells = [],\n        add;\n      if (rowNode.lastChild == null || rowNode.lastChild.type == types.cell)\n        add = empty || (empty = types.cell.createAndFill());\n      else add = emptyHead || (emptyHead = types.header_cell.createAndFill());\n      for (let i = map.width; i < width; i++) cells.push(add);\n      tr.insert(tr.mapping.slice(mapFrom).map(rowEnd - 1 + start), cells);\n    }\n  }\n  if (height > map.height) {\n    let cells = [];\n    for (\n      let i = 0, start = (map.height - 1) * map.width;\n      i < Math.max(map.width, width);\n      i++\n    ) {\n      let header =\n        i >= map.width\n          ? false\n          : table.nodeAt(map.map[start + i]).type == types.header_cell;\n      cells.push(\n        header\n          ? emptyHead || (emptyHead = types.header_cell.createAndFill())\n          : empty || (empty = types.cell.createAndFill()),\n      );\n    }\n\n    let emptyRow = types.row.create(null, Fragment.from(cells)),\n      rows = [];\n    for (let i = map.height; i < height; i++) rows.push(emptyRow);\n    tr.insert(tr.mapping.slice(mapFrom).map(start + table.nodeSize - 2), rows);\n  }\n  return !!(empty || emptyHead);\n}\n\n// Make sure the given line (left, top) to (right, top) doesn't cross\n// any rowspan cells by splitting cells that cross it. Return true if\n// something changed.\nfunction isolateHorizontal(tr, map, table, start, left, right, top, mapFrom) {\n  if (top == 0 || top == map.height) return false;\n  let found = false;\n  for (let col = left; col < right; col++) {\n    let index = top * map.width + col,\n      pos = map.map[index];\n    if (map.map[index - map.width] == pos) {\n      found = true;\n      let cell = table.nodeAt(pos);\n      let { top: cellTop, left: cellLeft } = map.findCell(pos);\n      tr.setNodeMarkup(\n        tr.mapping.slice(mapFrom).map(pos + start),\n        null,\n        setAttr(cell.attrs, 'rowspan', top - cellTop),\n      );\n      tr.insert(\n        tr.mapping.slice(mapFrom).map(map.positionAt(top, cellLeft, table)),\n        cell.type.createAndFill(\n          setAttr(cell.attrs, 'rowspan', cellTop + cell.attrs.rowspan - top),\n        ),\n      );\n      col += cell.attrs.colspan - 1;\n    }\n  }\n  return found;\n}\n\n// Make sure the given line (left, top) to (left, bottom) doesn't\n// cross any colspan cells by splitting cells that cross it. Return\n// true if something changed.\nfunction isolateVertical(tr, map, table, start, top, bottom, left, mapFrom) {\n  if (left == 0 || left == map.width) return false;\n  let found = false;\n  for (let row = top; row < bottom; row++) {\n    let index = row * map.width + left,\n      pos = map.map[index];\n    if (map.map[index - 1] == pos) {\n      found = true;\n      let cell = table.nodeAt(pos),\n        cellLeft = map.colCount(pos);\n      let updatePos = tr.mapping.slice(mapFrom).map(pos + start);\n      tr.setNodeMarkup(\n        updatePos,\n        null,\n        removeColSpan(\n          cell.attrs,\n          left - cellLeft,\n          cell.attrs.colspan - (left - cellLeft),\n        ),\n      );\n      tr.insert(\n        updatePos + cell.nodeSize,\n        cell.type.createAndFill(removeColSpan(cell.attrs, 0, left - cellLeft)),\n      );\n      row += cell.attrs.rowspan - 1;\n    }\n  }\n  return found;\n}\n\n// Insert the given set of cells (as returned by `pastedCells`) into a\n// table, at the position pointed at by rect.\nexport function insertCells(state, dispatch, tableStart, rect, cells) {\n  let table = tableStart ? state.doc.nodeAt(tableStart - 1) : state.doc,\n    map = TableMap.get(table);\n  let { top, left } = rect;\n  let right = left + cells.width,\n    bottom = top + cells.height;\n  let tr = state.tr,\n    mapFrom = 0;\n  function recomp() {\n    table = tableStart ? tr.doc.nodeAt(tableStart - 1) : tr.doc;\n    map = TableMap.get(table);\n    mapFrom = tr.mapping.maps.length;\n  }\n  // Prepare the table to be large enough and not have any cells\n  // crossing the boundaries of the rectangle that we want to\n  // insert into. If anything about it changes, recompute the table\n  // map so that subsequent operations can see the current shape.\n  if (growTable(tr, map, table, tableStart, right, bottom, mapFrom)) recomp();\n  if (isolateHorizontal(tr, map, table, tableStart, left, right, top, mapFrom))\n    recomp();\n  if (\n    isolateHorizontal(tr, map, table, tableStart, left, right, bottom, mapFrom)\n  )\n    recomp();\n  if (isolateVertical(tr, map, table, tableStart, top, bottom, left, mapFrom))\n    recomp();\n  if (isolateVertical(tr, map, table, tableStart, top, bottom, right, mapFrom))\n    recomp();\n\n  for (let row = top; row < bottom; row++) {\n    let from = map.positionAt(row, left, table),\n      to = map.positionAt(row, right, table);\n    tr.replace(\n      tr.mapping.slice(mapFrom).map(from + tableStart),\n      tr.mapping.slice(mapFrom).map(to + tableStart),\n      new Slice(cells.rows[row - top], 0, 0),\n    );\n  }\n  recomp();\n  tr.setSelection(\n    new CellSelection(\n      tr.doc.resolve(tableStart + map.positionAt(top, left, table)),\n      tr.doc.resolve(tableStart + map.positionAt(bottom - 1, right - 1, table)),\n    ),\n  );\n  dispatch(tr);\n}\n","// This file defines a number of helpers for wiring up user input to\n// table-related functionality.\n\nimport { Slice, Fragment } from 'prosemirror-model';\nimport { Selection, TextSelection } from 'prosemirror-state';\nimport { keydownHandler } from 'prosemirror-keymap';\n\nimport {\n  key,\n  nextCell,\n  cellAround,\n  inSameTable,\n  isInTable,\n  selectionCell,\n} from './util';\nimport { CellSelection } from './cellselection';\nimport { TableMap } from './tablemap';\nimport { pastedCells, fitSlice, clipCells, insertCells } from './copypaste';\nimport { tableNodeTypes } from './schema';\n\nexport const handleKeyDown = keydownHandler({\n  ArrowLeft: arrow('horiz', -1),\n  ArrowRight: arrow('horiz', 1),\n  ArrowUp: arrow('vert', -1),\n  ArrowDown: arrow('vert', 1),\n\n  'Shift-ArrowLeft': shiftArrow('horiz', -1),\n  'Shift-ArrowRight': shiftArrow('horiz', 1),\n  'Shift-ArrowUp': shiftArrow('vert', -1),\n  'Shift-ArrowDown': shiftArrow('vert', 1),\n\n  Backspace: deleteCellSelection,\n  'Mod-Backspace': deleteCellSelection,\n  Delete: deleteCellSelection,\n  'Mod-Delete': deleteCellSelection,\n});\n\nfunction maybeSetSelection(state, dispatch, selection) {\n  if (selection.eq(state.selection)) return false;\n  if (dispatch) dispatch(state.tr.setSelection(selection).scrollIntoView());\n  return true;\n}\n\nfunction arrow(axis, dir) {\n  return (state, dispatch, view) => {\n    let sel = state.selection;\n    if (sel instanceof CellSelection) {\n      return maybeSetSelection(\n        state,\n        dispatch,\n        Selection.near(sel.$headCell, dir),\n      );\n    }\n    if (axis != 'horiz' && !sel.empty) return false;\n    let end = atEndOfCell(view, axis, dir);\n    if (end == null) return false;\n    if (axis == 'horiz') {\n      return maybeSetSelection(\n        state,\n        dispatch,\n        Selection.near(state.doc.resolve(sel.head + dir), dir),\n      );\n    } else {\n      let $cell = state.doc.resolve(end),\n        $next = nextCell($cell, axis, dir),\n        newSel;\n      if ($next) newSel = Selection.near($next, 1);\n      else if (dir < 0)\n        newSel = Selection.near(state.doc.resolve($cell.before(-1)), -1);\n      else newSel = Selection.near(state.doc.resolve($cell.after(-1)), 1);\n      return maybeSetSelection(state, dispatch, newSel);\n    }\n  };\n}\n\nfunction shiftArrow(axis, dir) {\n  return (state, dispatch, view) => {\n    let sel = state.selection;\n    if (!(sel instanceof CellSelection)) {\n      let end = atEndOfCell(view, axis, dir);\n      if (end == null) return false;\n      sel = new CellSelection(state.doc.resolve(end));\n    }\n    let $head = nextCell(sel.$headCell, axis, dir);\n    if (!$head) return false;\n    return maybeSetSelection(\n      state,\n      dispatch,\n      new CellSelection(sel.$anchorCell, $head),\n    );\n  };\n}\n\nfunction deleteCellSelection(state, dispatch) {\n  let sel = state.selection;\n  if (!(sel instanceof CellSelection)) return false;\n  if (dispatch) {\n    let tr = state.tr,\n      baseContent = tableNodeTypes(state.schema).cell.createAndFill().content;\n    sel.forEachCell((cell, pos) => {\n      if (!cell.content.eq(baseContent))\n        tr.replace(\n          tr.mapping.map(pos + 1),\n          tr.mapping.map(pos + cell.nodeSize - 1),\n          new Slice(baseContent, 0, 0),\n        );\n    });\n    if (tr.docChanged) dispatch(tr);\n  }\n  return true;\n}\n\nexport function handleTripleClick(view, pos) {\n  let doc = view.state.doc,\n    $cell = cellAround(doc.resolve(pos));\n  if (!$cell) return false;\n  view.dispatch(view.state.tr.setSelection(new CellSelection($cell)));\n  return true;\n}\n\nexport function handlePaste(view, _, slice) {\n  if (!isInTable(view.state)) return false;\n  let cells = pastedCells(slice),\n    sel = view.state.selection;\n  if (sel instanceof CellSelection) {\n    if (!cells)\n      cells = {\n        width: 1,\n        height: 1,\n        rows: [\n          Fragment.from(\n            fitSlice(tableNodeTypes(view.state.schema).cell, slice),\n          ),\n        ],\n      };\n    let table = sel.$anchorCell.node(-1),\n      start = sel.$anchorCell.start(-1);\n    let rect = TableMap.get(table).rectBetween(\n      sel.$anchorCell.pos - start,\n      sel.$headCell.pos - start,\n    );\n    cells = clipCells(cells, rect.right - rect.left, rect.bottom - rect.top);\n    insertCells(view.state, view.dispatch, start, rect, cells);\n    return true;\n  } else if (cells) {\n    let $cell = selectionCell(view.state),\n      start = $cell.start(-1);\n    insertCells(\n      view.state,\n      view.dispatch,\n      start,\n      TableMap.get($cell.node(-1)).findCell($cell.pos - start),\n      cells,\n    );\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function handleMouseDown(view, startEvent) {\n  if (startEvent.ctrlKey || startEvent.metaKey) return;\n\n  let startDOMCell = domInCell(view, startEvent.target),\n    $anchor;\n  if (startEvent.shiftKey && view.state.selection instanceof CellSelection) {\n    // Adding to an existing cell selection\n    setCellSelection(view.state.selection.$anchorCell, startEvent);\n    startEvent.preventDefault();\n  } else if (\n    startEvent.shiftKey &&\n    startDOMCell &&\n    ($anchor = cellAround(view.state.selection.$anchor)) != null &&\n    cellUnderMouse(view, startEvent).pos != $anchor.pos\n  ) {\n    // Adding to a selection that starts in another cell (causing a\n    // cell selection to be created).\n    setCellSelection($anchor, startEvent);\n    startEvent.preventDefault();\n  } else if (!startDOMCell) {\n    // Not in a cell, let the default behavior happen.\n    return;\n  }\n\n  // Create and dispatch a cell selection between the given anchor and\n  // the position under the mouse.\n  function setCellSelection($anchor, event) {\n    let $head = cellUnderMouse(view, event);\n    let starting = key.getState(view.state) == null;\n    if (!$head || !inSameTable($anchor, $head)) {\n      if (starting) $head = $anchor;\n      else return;\n    }\n    let selection = new CellSelection($anchor, $head);\n    if (starting || !view.state.selection.eq(selection)) {\n      let tr = view.state.tr.setSelection(selection);\n      if (starting) tr.setMeta(key, $anchor.pos);\n      view.dispatch(tr);\n    }\n  }\n\n  // Stop listening to mouse motion events.\n  function stop() {\n    view.root.removeEventListener('mouseup', stop);\n    view.root.removeEventListener('dragstart', stop);\n    view.root.removeEventListener('mousemove', move);\n    if (key.getState(view.state) != null)\n      view.dispatch(view.state.tr.setMeta(key, -1));\n  }\n\n  function move(event) {\n    let anchor = key.getState(view.state),\n      $anchor;\n    if (anchor != null) {\n      // Continuing an existing cross-cell selection\n      $anchor = view.state.doc.resolve(anchor);\n    } else if (domInCell(view, event.target) != startDOMCell) {\n      // Moving out of the initial cell -- start a new cell selection\n      $anchor = cellUnderMouse(view, startEvent);\n      if (!$anchor) return stop();\n    }\n    if ($anchor) setCellSelection($anchor, event);\n  }\n  view.root.addEventListener('mouseup', stop);\n  view.root.addEventListener('dragstart', stop);\n  view.root.addEventListener('mousemove', move);\n}\n\n// Check whether the cursor is at the end of a cell (so that further\n// motion would move out of the cell)\nfunction atEndOfCell(view, axis, dir) {\n  if (!(view.state.selection instanceof TextSelection)) return null;\n  let { $head } = view.state.selection;\n  for (let d = $head.depth - 1; d >= 0; d--) {\n    let parent = $head.node(d),\n      index = dir < 0 ? $head.index(d) : $head.indexAfter(d);\n    if (index != (dir < 0 ? 0 : parent.childCount)) return null;\n    if (\n      parent.type.spec.tableRole == 'cell' ||\n      parent.type.spec.tableRole == 'header_cell'\n    ) {\n      let cellPos = $head.before(d);\n      let dirStr =\n        axis == 'vert' ? (dir > 0 ? 'down' : 'up') : dir > 0 ? 'right' : 'left';\n      return view.endOfTextblock(dirStr) ? cellPos : null;\n    }\n  }\n  return null;\n}\n\nfunction domInCell(view, dom) {\n  for (; dom && dom != view.dom; dom = dom.parentNode)\n    if (dom.nodeName == 'TD' || dom.nodeName == 'TH') return dom;\n}\n\nfunction cellUnderMouse(view, event) {\n  let mousePos = view.posAtCoords({ left: event.clientX, top: event.clientY });\n  if (!mousePos) return null;\n  return mousePos ? cellAround(view.state.doc.resolve(mousePos.pos)) : null;\n}\n","// This file defines helpers for normalizing tables, making sure no\n// cells overlap (which can happen, if you have the wrong col- and\n// rowspans) and that each row has the same width. Uses the problems\n// reported by `TableMap`.\n\nimport { PluginKey } from 'prosemirror-state';\nimport { TableMap } from './tablemap';\nimport { setAttr, removeColSpan } from './util';\nimport { tableNodeTypes } from './schema';\n\nexport const fixTablesKey = new PluginKey('fix-tables');\n\n// Helper for iterating through the nodes in a document that changed\n// compared to the given previous document. Useful for avoiding\n// duplicate work on each transaction.\nfunction changedDescendants(old, cur, offset, f) {\n  let oldSize = old.childCount,\n    curSize = cur.childCount;\n  outer: for (let i = 0, j = 0; i < curSize; i++) {\n    let child = cur.child(i);\n    for (let scan = j, e = Math.min(oldSize, i + 3); scan < e; scan++) {\n      if (old.child(scan) == child) {\n        j = scan + 1;\n        offset += child.nodeSize;\n        continue outer;\n      }\n    }\n    f(child, offset);\n    if (j < oldSize && old.child(j).sameMarkup(child))\n      changedDescendants(old.child(j), child, offset + 1, f);\n    else child.nodesBetween(0, child.content.size, f, offset + 1);\n    offset += child.nodeSize;\n  }\n}\n\n// :: (EditorState, ?EditorState) → ?Transaction\n// Inspect all tables in the given state's document and return a\n// transaction that fixes them, if necessary. If `oldState` was\n// provided, that is assumed to hold a previous, known-good state,\n// which will be used to avoid re-scanning unchanged parts of the\n// document.\nexport function fixTables(state, oldState) {\n  let tr,\n    check = (node, pos) => {\n      if (node.type.spec.tableRole == 'table')\n        tr = fixTable(state, node, pos, tr);\n    };\n  if (!oldState) state.doc.descendants(check);\n  else if (oldState.doc != state.doc)\n    changedDescendants(oldState.doc, state.doc, 0, check);\n  return tr;\n}\n\n// : (EditorState, Node, number, ?Transaction) → ?Transaction\n// Fix the given table, if necessary. Will append to the transaction\n// it was given, if non-null, or create a new one if necessary.\nexport function fixTable(state, table, tablePos, tr) {\n  let map = TableMap.get(table);\n  if (!map.problems) return tr;\n  if (!tr) tr = state.tr;\n\n  // Track which rows we must add cells to, so that we can adjust that\n  // when fixing collisions.\n  let mustAdd = [];\n  for (let i = 0; i < map.height; i++) mustAdd.push(0);\n  for (let i = 0; i < map.problems.length; i++) {\n    let prob = map.problems[i];\n    if (prob.type == 'collision') {\n      let cell = table.nodeAt(prob.pos);\n      for (let j = 0; j < cell.attrs.rowspan; j++)\n        mustAdd[prob.row + j] += prob.n;\n      tr.setNodeMarkup(\n        tr.mapping.map(tablePos + 1 + prob.pos),\n        null,\n        removeColSpan(cell.attrs, cell.attrs.colspan - prob.n, prob.n),\n      );\n    } else if (prob.type == 'missing') {\n      mustAdd[prob.row] += prob.n;\n    } else if (prob.type == 'overlong_rowspan') {\n      let cell = table.nodeAt(prob.pos);\n      tr.setNodeMarkup(\n        tr.mapping.map(tablePos + 1 + prob.pos),\n        null,\n        setAttr(cell.attrs, 'rowspan', cell.attrs.rowspan - prob.n),\n      );\n    } else if (prob.type == 'colwidth mismatch') {\n      let cell = table.nodeAt(prob.pos);\n      tr.setNodeMarkup(\n        tr.mapping.map(tablePos + 1 + prob.pos),\n        null,\n        setAttr(cell.attrs, 'colwidth', prob.colwidth),\n      );\n    }\n  }\n  let first, last;\n  for (let i = 0; i < mustAdd.length; i++)\n    if (mustAdd[i]) {\n      if (first == null) first = i;\n      last = i;\n    }\n  // Add the necessary cells, using a heuristic for whether to add the\n  // cells at the start or end of the rows (if it looks like a 'bite'\n  // was taken out of the table, add cells at the start of the row\n  // after the bite. Otherwise add them at the end).\n  for (let i = 0, pos = tablePos + 1; i < map.height; i++) {\n    let row = table.child(i);\n    let end = pos + row.nodeSize;\n    let add = mustAdd[i];\n    if (add > 0) {\n      let tableNodeType = 'cell';\n      if (row.firstChild) {\n        tableNodeType = row.firstChild.type.spec.tableRole;\n      }\n      let nodes = [];\n      for (let j = 0; j < add; j++)\n        nodes.push(tableNodeTypes(state.schema)[tableNodeType].createAndFill());\n      let side = (i == 0 || first == i - 1) && last == i ? pos + 1 : end - 1;\n      tr.insert(tr.mapping.map(side), nodes);\n    }\n    pos = end;\n  }\n  return tr.setMeta(fixTablesKey, { fixTables: true });\n}\n","// This file defines a number of table-related commands.\n\nimport { TextSelection } from 'prosemirror-state';\nimport { Fragment } from 'prosemirror-model';\n\nimport { Rect, TableMap } from './tablemap';\nimport { CellSelection } from './cellselection';\nimport {\n  addColSpan,\n  cellAround,\n  cellWrapping,\n  columnIsHeader,\n  isInTable,\n  moveCellForward,\n  removeColSpan,\n  selectionCell,\n  setAttr,\n} from './util';\nimport { tableNodeTypes } from './schema';\n\n// Helper to get the selected rectangle in a table, if any. Adds table\n// map, table node, and table start offset to the object for\n// convenience.\nexport function selectedRect(state) {\n  let sel = state.selection,\n    $pos = selectionCell(state);\n  let table = $pos.node(-1),\n    tableStart = $pos.start(-1),\n    map = TableMap.get(table);\n  let rect;\n  if (sel instanceof CellSelection)\n    rect = map.rectBetween(\n      sel.$anchorCell.pos - tableStart,\n      sel.$headCell.pos - tableStart,\n    );\n  else rect = map.findCell($pos.pos - tableStart);\n  rect.tableStart = tableStart;\n  rect.map = map;\n  rect.table = table;\n  return rect;\n}\n\n// Add a column at the given position in a table.\nexport function addColumn(tr, { map, tableStart, table }, col) {\n  let refColumn = col > 0 ? -1 : 0;\n  if (columnIsHeader(map, table, col + refColumn))\n    refColumn = col == 0 || col == map.width ? null : 0;\n\n  for (let row = 0; row < map.height; row++) {\n    let index = row * map.width + col;\n    // If this position falls inside a col-spanning cell\n    if (col > 0 && col < map.width && map.map[index - 1] == map.map[index]) {\n      let pos = map.map[index],\n        cell = table.nodeAt(pos);\n      tr.setNodeMarkup(\n        tr.mapping.map(tableStart + pos),\n        null,\n        addColSpan(cell.attrs, col - map.colCount(pos)),\n      );\n      // Skip ahead if rowspan > 1\n      row += cell.attrs.rowspan - 1;\n    } else {\n      let type =\n        refColumn == null\n          ? tableNodeTypes(table.type.schema).cell\n          : table.nodeAt(map.map[index + refColumn]).type;\n      let pos = map.positionAt(row, col, table);\n      tr.insert(tr.mapping.map(tableStart + pos), type.createAndFill());\n    }\n  }\n  return tr;\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Command to add a column before the column with the selection.\nexport function addColumnBefore(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    let rect = selectedRect(state);\n    dispatch(addColumn(state.tr, rect, rect.left));\n  }\n  return true;\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Command to add a column after the column with the selection.\nexport function addColumnAfter(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    let rect = selectedRect(state);\n    dispatch(addColumn(state.tr, rect, rect.right));\n  }\n  return true;\n}\n\nexport function removeColumn(tr, { map, table, tableStart }, col) {\n  let mapStart = tr.mapping.maps.length;\n  for (let row = 0; row < map.height; ) {\n    let index = row * map.width + col,\n      pos = map.map[index],\n      cell = table.nodeAt(pos);\n    // If this is part of a col-spanning cell\n    if (\n      (col > 0 && map.map[index - 1] == pos) ||\n      (col < map.width - 1 && map.map[index + 1] == pos)\n    ) {\n      tr.setNodeMarkup(\n        tr.mapping.slice(mapStart).map(tableStart + pos),\n        null,\n        removeColSpan(cell.attrs, col - map.colCount(pos)),\n      );\n    } else {\n      let start = tr.mapping.slice(mapStart).map(tableStart + pos);\n      tr.delete(start, start + cell.nodeSize);\n    }\n    row += cell.attrs.rowspan;\n  }\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Command function that removes the selected columns from a table.\nexport function deleteColumn(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    let rect = selectedRect(state),\n      tr = state.tr;\n    if (rect.left == 0 && rect.right == rect.map.width) return false;\n    for (let i = rect.right - 1; ; i--) {\n      removeColumn(tr, rect, i);\n      if (i == rect.left) break;\n      rect.table = rect.tableStart\n        ? tr.doc.nodeAt(rect.tableStart - 1)\n        : tr.doc;\n      rect.map = TableMap.get(rect.table);\n    }\n    dispatch(tr);\n  }\n  return true;\n}\n\nexport function rowIsHeader(map, table, row) {\n  let headerCell = tableNodeTypes(table.type.schema).header_cell;\n  for (let col = 0; col < map.width; col++)\n    if (table.nodeAt(map.map[col + row * map.width]).type != headerCell)\n      return false;\n  return true;\n}\n\nexport function addRow(tr, { map, tableStart, table }, row) {\n  let rowPos = tableStart;\n  for (let i = 0; i < row; i++) rowPos += table.child(i).nodeSize;\n  let cells = [],\n    refRow = row > 0 ? -1 : 0;\n  if (rowIsHeader(map, table, row + refRow))\n    refRow = row == 0 || row == map.height ? null : 0;\n  for (let col = 0, index = map.width * row; col < map.width; col++, index++) {\n    // Covered by a rowspan cell\n    if (\n      row > 0 &&\n      row < map.height &&\n      map.map[index] == map.map[index - map.width]\n    ) {\n      let pos = map.map[index],\n        attrs = table.nodeAt(pos).attrs;\n      tr.setNodeMarkup(\n        tableStart + pos,\n        null,\n        setAttr(attrs, 'rowspan', attrs.rowspan + 1),\n      );\n      col += attrs.colspan - 1;\n    } else {\n      let type =\n        refRow == null\n          ? tableNodeTypes(table.type.schema).cell\n          : table.nodeAt(map.map[index + refRow * map.width]).type;\n      cells.push(type.createAndFill());\n    }\n  }\n  tr.insert(rowPos, tableNodeTypes(table.type.schema).row.create(null, cells));\n  return tr;\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Add a table row before the selection.\nexport function addRowBefore(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    let rect = selectedRect(state);\n    dispatch(addRow(state.tr, rect, rect.top));\n  }\n  return true;\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Add a table row after the selection.\nexport function addRowAfter(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    let rect = selectedRect(state);\n    dispatch(addRow(state.tr, rect, rect.bottom));\n  }\n  return true;\n}\n\nexport function removeRow(tr, { map, table, tableStart }, row) {\n  let rowPos = 0;\n  for (let i = 0; i < row; i++) rowPos += table.child(i).nodeSize;\n  let nextRow = rowPos + table.child(row).nodeSize;\n\n  let mapFrom = tr.mapping.maps.length;\n  tr.delete(rowPos + tableStart, nextRow + tableStart);\n\n  for (let col = 0, index = row * map.width; col < map.width; col++, index++) {\n    let pos = map.map[index];\n    if (row > 0 && pos == map.map[index - map.width]) {\n      // If this cell starts in the row above, simply reduce its rowspan\n      let attrs = table.nodeAt(pos).attrs;\n      tr.setNodeMarkup(\n        tr.mapping.slice(mapFrom).map(pos + tableStart),\n        null,\n        setAttr(attrs, 'rowspan', attrs.rowspan - 1),\n      );\n      col += attrs.colspan - 1;\n    } else if (row < map.width && pos == map.map[index + map.width]) {\n      // Else, if it continues in the row below, it has to be moved down\n      let cell = table.nodeAt(pos);\n      let copy = cell.type.create(\n        setAttr(cell.attrs, 'rowspan', cell.attrs.rowspan - 1),\n        cell.content,\n      );\n      let newPos = map.positionAt(row + 1, col, table);\n      tr.insert(tr.mapping.slice(mapFrom).map(tableStart + newPos), copy);\n      col += cell.attrs.colspan - 1;\n    }\n  }\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Remove the selected rows from a table.\nexport function deleteRow(state, dispatch) {\n  if (!isInTable(state)) return false;\n  if (dispatch) {\n    let rect = selectedRect(state),\n      tr = state.tr;\n    if (rect.top == 0 && rect.bottom == rect.map.height) return false;\n    for (let i = rect.bottom - 1; ; i--) {\n      removeRow(tr, rect, i);\n      if (i == rect.top) break;\n      rect.table = rect.tableStart\n        ? tr.doc.nodeAt(rect.tableStart - 1)\n        : tr.doc;\n      rect.map = TableMap.get(rect.table);\n    }\n    dispatch(tr);\n  }\n  return true;\n}\n\nfunction isEmpty(cell) {\n  let c = cell.content;\n  return (\n    c.childCount == 1 &&\n    c.firstChild.isTextblock &&\n    c.firstChild.childCount == 0\n  );\n}\n\nfunction cellsOverlapRectangle({ width, height, map }, rect) {\n  let indexTop = rect.top * width + rect.left,\n    indexLeft = indexTop;\n  let indexBottom = (rect.bottom - 1) * width + rect.left,\n    indexRight = indexTop + (rect.right - rect.left - 1);\n  for (let i = rect.top; i < rect.bottom; i++) {\n    if (\n      (rect.left > 0 && map[indexLeft] == map[indexLeft - 1]) ||\n      (rect.right < width && map[indexRight] == map[indexRight + 1])\n    )\n      return true;\n    indexLeft += width;\n    indexRight += width;\n  }\n  for (let i = rect.left; i < rect.right; i++) {\n    if (\n      (rect.top > 0 && map[indexTop] == map[indexTop - width]) ||\n      (rect.bottom < height && map[indexBottom] == map[indexBottom + width])\n    )\n      return true;\n    indexTop++;\n    indexBottom++;\n  }\n  return false;\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Merge the selected cells into a single cell. Only available when\n// the selected cells' outline forms a rectangle.\nexport function mergeCells(state, dispatch) {\n  let sel = state.selection;\n  if (\n    !(sel instanceof CellSelection) ||\n    sel.$anchorCell.pos == sel.$headCell.pos\n  )\n    return false;\n  let rect = selectedRect(state),\n    { map } = rect;\n  if (cellsOverlapRectangle(map, rect)) return false;\n  if (dispatch) {\n    let tr = state.tr,\n      seen = {},\n      content = Fragment.empty,\n      mergedPos,\n      mergedCell;\n    for (let row = rect.top; row < rect.bottom; row++) {\n      for (let col = rect.left; col < rect.right; col++) {\n        let cellPos = map.map[row * map.width + col],\n          cell = rect.table.nodeAt(cellPos);\n        if (seen[cellPos]) continue;\n        seen[cellPos] = true;\n        if (mergedPos == null) {\n          mergedPos = cellPos;\n          mergedCell = cell;\n        } else {\n          if (!isEmpty(cell)) content = content.append(cell.content);\n          let mapped = tr.mapping.map(cellPos + rect.tableStart);\n          tr.delete(mapped, mapped + cell.nodeSize);\n        }\n      }\n    }\n    tr.setNodeMarkup(\n      mergedPos + rect.tableStart,\n      null,\n      setAttr(\n        addColSpan(\n          mergedCell.attrs,\n          mergedCell.attrs.colspan,\n          rect.right - rect.left - mergedCell.attrs.colspan,\n        ),\n        'rowspan',\n        rect.bottom - rect.top,\n      ),\n    );\n    if (content.size) {\n      let end = mergedPos + 1 + mergedCell.content.size;\n      let start = isEmpty(mergedCell) ? mergedPos + 1 : end;\n      tr.replaceWith(start + rect.tableStart, end + rect.tableStart, content);\n    }\n    tr.setSelection(\n      new CellSelection(tr.doc.resolve(mergedPos + rect.tableStart)),\n    );\n    dispatch(tr);\n  }\n  return true;\n}\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Split a selected cell, whose rowpan or colspan is greater than one,\n// into smaller cells. Use the first cell type for the new cells.\nexport function splitCell(state, dispatch) {\n  const nodeTypes = tableNodeTypes(state.schema);\n  return splitCellWithType(({ node }) => {\n    return nodeTypes[node.type.spec.tableRole];\n  })(state, dispatch);\n}\n\n// :: (getCellType: ({ row: number, col: number, node: Node}) → NodeType) → (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Split a selected cell, whose rowpan or colspan is greater than one,\n// into smaller cells with the cell type (th, td) returned by getType function.\nexport function splitCellWithType(getCellType) {\n  return (state, dispatch) => {\n    let sel = state.selection;\n    let cellNode, cellPos;\n    if (!(sel instanceof CellSelection)) {\n      cellNode = cellWrapping(sel.$from);\n      if (!cellNode) return false;\n      cellPos = cellAround(sel.$from).pos;\n    } else {\n      if (sel.$anchorCell.pos != sel.$headCell.pos) return false;\n      cellNode = sel.$anchorCell.nodeAfter;\n      cellPos = sel.$anchorCell.pos;\n    }\n    if (cellNode.attrs.colspan == 1 && cellNode.attrs.rowspan == 1) {\n      return false;\n    }\n    if (dispatch) {\n      let baseAttrs = cellNode.attrs,\n        attrs = [],\n        colwidth = baseAttrs.colwidth;\n      if (baseAttrs.rowspan > 1) baseAttrs = setAttr(baseAttrs, 'rowspan', 1);\n      if (baseAttrs.colspan > 1) baseAttrs = setAttr(baseAttrs, 'colspan', 1);\n      let rect = selectedRect(state),\n        tr = state.tr;\n      for (let i = 0; i < rect.right - rect.left; i++)\n        attrs.push(\n          colwidth\n            ? setAttr(\n                baseAttrs,\n                'colwidth',\n                colwidth && colwidth[i] ? [colwidth[i]] : null,\n              )\n            : baseAttrs,\n        );\n      let lastCell;\n      for (let row = rect.top; row < rect.bottom; row++) {\n        let pos = rect.map.positionAt(row, rect.left, rect.table);\n        if (row == rect.top) pos += cellNode.nodeSize;\n        for (let col = rect.left, i = 0; col < rect.right; col++, i++) {\n          if (col == rect.left && row == rect.top) continue;\n          tr.insert(\n            (lastCell = tr.mapping.map(pos + rect.tableStart, 1)),\n            getCellType({ node: cellNode, row, col }).createAndFill(attrs[i]),\n          );\n        }\n      }\n      tr.setNodeMarkup(\n        cellPos,\n        getCellType({ node: cellNode, row: rect.top, col: rect.left }),\n        attrs[0],\n      );\n      if (sel instanceof CellSelection)\n        tr.setSelection(\n          new CellSelection(\n            tr.doc.resolve(sel.$anchorCell.pos),\n            lastCell && tr.doc.resolve(lastCell),\n          ),\n        );\n      dispatch(tr);\n    }\n    return true;\n  };\n}\n\n// :: (string, any) → (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Returns a command that sets the given attribute to the given value,\n// and is only available when the currently selected cell doesn't\n// already have that attribute set to that value.\nexport function setCellAttr(name, value) {\n  return function (state, dispatch) {\n    if (!isInTable(state)) return false;\n    let $cell = selectionCell(state);\n    if ($cell.nodeAfter.attrs[name] === value) return false;\n    if (dispatch) {\n      let tr = state.tr;\n      if (state.selection instanceof CellSelection)\n        state.selection.forEachCell((node, pos) => {\n          if (node.attrs[name] !== value)\n            tr.setNodeMarkup(pos, null, setAttr(node.attrs, name, value));\n        });\n      else\n        tr.setNodeMarkup(\n          $cell.pos,\n          null,\n          setAttr($cell.nodeAfter.attrs, name, value),\n        );\n      dispatch(tr);\n    }\n    return true;\n  };\n}\n\nfunction deprecated_toggleHeader(type) {\n  return function (state, dispatch) {\n    if (!isInTable(state)) return false;\n    if (dispatch) {\n      let types = tableNodeTypes(state.schema);\n      let rect = selectedRect(state),\n        tr = state.tr;\n      let cells = rect.map.cellsInRect(\n        type == 'column'\n          ? new Rect(rect.left, 0, rect.right, rect.map.height)\n          : type == 'row'\n          ? new Rect(0, rect.top, rect.map.width, rect.bottom)\n          : rect,\n      );\n      let nodes = cells.map((pos) => rect.table.nodeAt(pos));\n      for (\n        let i = 0;\n        i < cells.length;\n        i++ // Remove headers, if any\n      )\n        if (nodes[i].type == types.header_cell)\n          tr.setNodeMarkup(\n            rect.tableStart + cells[i],\n            types.cell,\n            nodes[i].attrs,\n          );\n      if (tr.steps.length == 0)\n        for (\n          let i = 0;\n          i < cells.length;\n          i++ // No headers removed, add instead\n        )\n          tr.setNodeMarkup(\n            rect.tableStart + cells[i],\n            types.header_cell,\n            nodes[i].attrs,\n          );\n      dispatch(tr);\n    }\n    return true;\n  };\n}\n\nfunction isHeaderEnabledByType(type, rect, types) {\n  // Get cell positions for first row or first column\n  const cellPositions = rect.map.cellsInRect({\n    left: 0,\n    top: 0,\n    right: type == 'row' ? rect.map.width : 1,\n    bottom: type == 'column' ? rect.map.height : 1,\n  });\n\n  for (let i = 0; i < cellPositions.length; i++) {\n    const cell = rect.table.nodeAt(cellPositions[i]);\n    if (cell && cell.type !== types.header_cell) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// :: (string, ?{ useDeprecatedLogic: bool }) → (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Toggles between row/column header and normal cells (Only applies to first row/column).\n// For deprecated behavior pass `useDeprecatedLogic` in options with true.\nexport function toggleHeader(type, options) {\n  options = options || { useDeprecatedLogic: false };\n\n  if (options.useDeprecatedLogic) return deprecated_toggleHeader(type);\n\n  return function (state, dispatch) {\n    if (!isInTable(state)) return false;\n    if (dispatch) {\n      let types = tableNodeTypes(state.schema);\n      let rect = selectedRect(state),\n        tr = state.tr;\n\n      let isHeaderRowEnabled = isHeaderEnabledByType('row', rect, types);\n      let isHeaderColumnEnabled = isHeaderEnabledByType('column', rect, types);\n\n      let isHeaderEnabled =\n        type === 'column'\n          ? isHeaderRowEnabled\n          : type === 'row'\n          ? isHeaderColumnEnabled\n          : false;\n\n      let selectionStartsAt = isHeaderEnabled ? 1 : 0;\n\n      let cellsRect =\n        type == 'column'\n          ? new Rect(0, selectionStartsAt, 1, rect.map.height)\n          : type == 'row'\n          ? new Rect(selectionStartsAt, 0, rect.map.width, 1)\n          : rect;\n\n      let newType =\n        type == 'column'\n          ? isHeaderColumnEnabled\n            ? types.cell\n            : types.header_cell\n          : type == 'row'\n          ? isHeaderRowEnabled\n            ? types.cell\n            : types.header_cell\n          : types.cell;\n\n      rect.map.cellsInRect(cellsRect).forEach((relativeCellPos) => {\n        const cellPos = relativeCellPos + rect.tableStart;\n        const cell = tr.doc.nodeAt(cellPos);\n\n        if (cell) {\n          tr.setNodeMarkup(cellPos, newType, cell.attrs);\n        }\n      });\n\n      dispatch(tr);\n    }\n    return true;\n  };\n}\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Toggles whether the selected row contains header cells.\nexport let toggleHeaderRow = toggleHeader('row', { useDeprecatedLogic: true });\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Toggles whether the selected column contains header cells.\nexport let toggleHeaderColumn = toggleHeader('column', {\n  useDeprecatedLogic: true,\n});\n\n// :: (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Toggles whether the selected cells are header cells.\nexport let toggleHeaderCell = toggleHeader('cell', {\n  useDeprecatedLogic: true,\n});\n\nfunction findNextCell($cell, dir) {\n  if (dir < 0) {\n    let before = $cell.nodeBefore;\n    if (before) return $cell.pos - before.nodeSize;\n    for (\n      let row = $cell.index(-1) - 1, rowEnd = $cell.before();\n      row >= 0;\n      row--\n    ) {\n      let rowNode = $cell.node(-1).child(row);\n      if (rowNode.childCount) return rowEnd - 1 - rowNode.lastChild.nodeSize;\n      rowEnd -= rowNode.nodeSize;\n    }\n  } else {\n    if ($cell.index() < $cell.parent.childCount - 1)\n      return $cell.pos + $cell.nodeAfter.nodeSize;\n    let table = $cell.node(-1);\n    for (\n      let row = $cell.indexAfter(-1), rowStart = $cell.after();\n      row < table.childCount;\n      row++\n    ) {\n      let rowNode = table.child(row);\n      if (rowNode.childCount) return rowStart + 1;\n      rowStart += rowNode.nodeSize;\n    }\n  }\n}\n\n// :: (number) → (EditorState, dispatch: ?(tr: Transaction)) → bool\n// Returns a command for selecting the next (direction=1) or previous\n// (direction=-1) cell in a table.\nexport function goToNextCell(direction) {\n  return function (state, dispatch) {\n    if (!isInTable(state)) return false;\n    let cell = findNextCell(selectionCell(state), direction);\n    if (cell == null) return;\n    if (dispatch) {\n      let $cell = state.doc.resolve(cell);\n      dispatch(\n        state.tr\n          .setSelection(TextSelection.between($cell, moveCellForward($cell)))\n          .scrollIntoView(),\n      );\n    }\n    return true;\n  };\n}\n\n// :: (EditorState, ?(tr: Transaction)) → bool\n// Deletes the table around the selection, if any.\nexport function deleteTable(state, dispatch) {\n  let $pos = state.selection.$anchor;\n  for (let d = $pos.depth; d > 0; d--) {\n    let node = $pos.node(d);\n    if (node.type.spec.tableRole == 'table') {\n      if (dispatch)\n        dispatch(\n          state.tr.delete($pos.before(d), $pos.after(d)).scrollIntoView(),\n        );\n      return true;\n    }\n  }\n  return false;\n}\n","export class TableView {\n  constructor(node, cellMinWidth) {\n    this.node = node;\n    this.cellMinWidth = cellMinWidth;\n    this.dom = document.createElement('div');\n    this.dom.className = 'tableWrapper';\n    this.table = this.dom.appendChild(document.createElement('table'));\n    this.colgroup = this.table.appendChild(document.createElement('colgroup'));\n    updateColumns(node, this.colgroup, this.table, cellMinWidth);\n    this.contentDOM = this.table.appendChild(document.createElement('tbody'));\n  }\n\n  update(node) {\n    if (node.type != this.node.type) return false;\n    this.node = node;\n    updateColumns(node, this.colgroup, this.table, this.cellMinWidth);\n    return true;\n  }\n\n  ignoreMutation(record) {\n    return (\n      record.type == 'attributes' &&\n      (record.target == this.table || this.colgroup.contains(record.target))\n    );\n  }\n}\n\nexport function updateColumns(\n  node,\n  colgroup,\n  table,\n  cellMinWidth,\n  overrideCol,\n  overrideValue,\n) {\n  let totalWidth = 0,\n    fixedWidth = true;\n  let nextDOM = colgroup.firstChild,\n    row = node.firstChild;\n  for (let i = 0, col = 0; i < row.childCount; i++) {\n    let { colspan, colwidth } = row.child(i).attrs;\n    for (let j = 0; j < colspan; j++, col++) {\n      let hasWidth =\n        overrideCol == col ? overrideValue : colwidth && colwidth[j];\n      let cssWidth = hasWidth ? hasWidth + 'px' : '';\n      totalWidth += hasWidth || cellMinWidth;\n      if (!hasWidth) fixedWidth = false;\n      if (!nextDOM) {\n        colgroup.appendChild(document.createElement('col')).style.width =\n          cssWidth;\n      } else {\n        if (nextDOM.style.width != cssWidth) nextDOM.style.width = cssWidth;\n        nextDOM = nextDOM.nextSibling;\n      }\n    }\n  }\n\n  while (nextDOM) {\n    let after = nextDOM.nextSibling;\n    nextDOM.parentNode.removeChild(nextDOM);\n    nextDOM = after;\n  }\n\n  if (fixedWidth) {\n    table.style.width = totalWidth + 'px';\n    table.style.minWidth = '';\n  } else {\n    table.style.width = '';\n    table.style.minWidth = totalWidth + 'px';\n  }\n}\n","import { Plugin, PluginKey } from 'prosemirror-state';\nimport { Decoration, DecorationSet } from 'prosemirror-view';\nimport { cellAround, pointsAtCell, setAttr } from './util';\nimport { TableMap } from './tablemap';\nimport { TableView, updateColumns } from './tableview';\nimport { tableNodeTypes } from './schema';\n\nexport const key = new PluginKey('tableColumnResizing');\n\nexport function columnResizing({\n  handleWidth = 5,\n  cellMinWidth = 25,\n  View = TableView,\n  lastColumnResizable = true,\n} = {}) {\n  let plugin = new Plugin({\n    key,\n    state: {\n      init(_, state) {\n        this.spec.props.nodeViews[tableNodeTypes(state.schema).table.name] = (\n          node,\n          view,\n        ) => new View(node, cellMinWidth, view);\n        return new ResizeState(-1, false);\n      },\n      apply(tr, prev) {\n        return prev.apply(tr);\n      },\n    },\n    props: {\n      attributes(state) {\n        let pluginState = key.getState(state);\n        return pluginState.activeHandle > -1\n          ? { class: 'resize-cursor' }\n          : null;\n      },\n\n      handleDOMEvents: {\n        mousemove(view, event) {\n          handleMouseMove(\n            view,\n            event,\n            handleWidth,\n            cellMinWidth,\n            lastColumnResizable,\n          );\n        },\n        mouseleave(view) {\n          handleMouseLeave(view);\n        },\n        mousedown(view, event) {\n          handleMouseDown(view, event, cellMinWidth);\n        },\n      },\n\n      decorations(state) {\n        let pluginState = key.getState(state);\n        if (pluginState.activeHandle > -1)\n          return handleDecorations(state, pluginState.activeHandle);\n      },\n\n      nodeViews: {},\n    },\n  });\n  return plugin;\n}\n\nclass ResizeState {\n  constructor(activeHandle, dragging) {\n    this.activeHandle = activeHandle;\n    this.dragging = dragging;\n  }\n\n  apply(tr) {\n    let state = this,\n      action = tr.getMeta(key);\n    if (action && action.setHandle != null)\n      return new ResizeState(action.setHandle, null);\n    if (action && action.setDragging !== undefined)\n      return new ResizeState(state.activeHandle, action.setDragging);\n    if (state.activeHandle > -1 && tr.docChanged) {\n      let handle = tr.mapping.map(state.activeHandle, -1);\n      if (!pointsAtCell(tr.doc.resolve(handle))) handle = null;\n      state = new ResizeState(handle, state.dragging);\n    }\n    return state;\n  }\n}\n\nfunction handleMouseMove(\n  view,\n  event,\n  handleWidth,\n  cellMinWidth,\n  lastColumnResizable,\n) {\n  let pluginState = key.getState(view.state);\n\n  if (!pluginState.dragging) {\n    let target = domCellAround(event.target),\n      cell = -1;\n    if (target) {\n      let { left, right } = target.getBoundingClientRect();\n      if (event.clientX - left <= handleWidth)\n        cell = edgeCell(view, event, 'left');\n      else if (right - event.clientX <= handleWidth)\n        cell = edgeCell(view, event, 'right');\n    }\n\n    if (cell != pluginState.activeHandle) {\n      if (!lastColumnResizable && cell !== -1) {\n        let $cell = view.state.doc.resolve(cell);\n        let table = $cell.node(-1),\n          map = TableMap.get(table),\n          start = $cell.start(-1);\n        let col =\n          map.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;\n\n        if (col == map.width - 1) {\n          return;\n        }\n      }\n\n      updateHandle(view, cell);\n    }\n  }\n}\n\nfunction handleMouseLeave(view) {\n  let pluginState = key.getState(view.state);\n  if (pluginState.activeHandle > -1 && !pluginState.dragging)\n    updateHandle(view, -1);\n}\n\nfunction handleMouseDown(view, event, cellMinWidth) {\n  let pluginState = key.getState(view.state);\n  if (pluginState.activeHandle == -1 || pluginState.dragging) return false;\n\n  let cell = view.state.doc.nodeAt(pluginState.activeHandle);\n  let width = currentColWidth(view, pluginState.activeHandle, cell.attrs);\n  view.dispatch(\n    view.state.tr.setMeta(key, {\n      setDragging: { startX: event.clientX, startWidth: width },\n    }),\n  );\n\n  function finish(event) {\n    window.removeEventListener('mouseup', finish);\n    window.removeEventListener('mousemove', move);\n    let pluginState = key.getState(view.state);\n    if (pluginState.dragging) {\n      updateColumnWidth(\n        view,\n        pluginState.activeHandle,\n        draggedWidth(pluginState.dragging, event, cellMinWidth),\n      );\n      view.dispatch(view.state.tr.setMeta(key, { setDragging: null }));\n    }\n  }\n  function move(event) {\n    if (!event.which) return finish(event);\n    let pluginState = key.getState(view.state);\n    let dragged = draggedWidth(pluginState.dragging, event, cellMinWidth);\n    displayColumnWidth(view, pluginState.activeHandle, dragged, cellMinWidth);\n  }\n\n  window.addEventListener('mouseup', finish);\n  window.addEventListener('mousemove', move);\n  event.preventDefault();\n  return true;\n}\n\nfunction currentColWidth(view, cellPos, { colspan, colwidth }) {\n  let width = colwidth && colwidth[colwidth.length - 1];\n  if (width) return width;\n  let dom = view.domAtPos(cellPos);\n  let node = dom.node.childNodes[dom.offset];\n  let domWidth = node.offsetWidth,\n    parts = colspan;\n  if (colwidth)\n    for (let i = 0; i < colspan; i++)\n      if (colwidth[i]) {\n        domWidth -= colwidth[i];\n        parts--;\n      }\n  return domWidth / parts;\n}\n\nfunction domCellAround(target) {\n  while (target && target.nodeName != 'TD' && target.nodeName != 'TH')\n    target = target.classList.contains('ProseMirror')\n      ? null\n      : target.parentNode;\n  return target;\n}\n\nfunction edgeCell(view, event, side) {\n  let found = view.posAtCoords({ left: event.clientX, top: event.clientY });\n  if (!found) return -1;\n  let { pos } = found;\n  let $cell = cellAround(view.state.doc.resolve(pos));\n  if (!$cell) return -1;\n  if (side == 'right') return $cell.pos;\n  let map = TableMap.get($cell.node(-1)),\n    start = $cell.start(-1);\n  let index = map.map.indexOf($cell.pos - start);\n  return index % map.width == 0 ? -1 : start + map.map[index - 1];\n}\n\nfunction draggedWidth(dragging, event, cellMinWidth) {\n  let offset = event.clientX - dragging.startX;\n  return Math.max(cellMinWidth, dragging.startWidth + offset);\n}\n\nfunction updateHandle(view, value) {\n  view.dispatch(view.state.tr.setMeta(key, { setHandle: value }));\n}\n\nfunction updateColumnWidth(view, cell, width) {\n  let $cell = view.state.doc.resolve(cell);\n  let table = $cell.node(-1),\n    map = TableMap.get(table),\n    start = $cell.start(-1);\n  let col = map.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;\n  let tr = view.state.tr;\n  for (let row = 0; row < map.height; row++) {\n    let mapIndex = row * map.width + col;\n    // Rowspanning cell that has already been handled\n    if (row && map.map[mapIndex] == map.map[mapIndex - map.width]) continue;\n    let pos = map.map[mapIndex],\n      { attrs } = table.nodeAt(pos);\n    let index = attrs.colspan == 1 ? 0 : col - map.colCount(pos);\n    if (attrs.colwidth && attrs.colwidth[index] == width) continue;\n    let colwidth = attrs.colwidth\n      ? attrs.colwidth.slice()\n      : zeroes(attrs.colspan);\n    colwidth[index] = width;\n    tr.setNodeMarkup(start + pos, null, setAttr(attrs, 'colwidth', colwidth));\n  }\n  if (tr.docChanged) view.dispatch(tr);\n}\n\nfunction displayColumnWidth(view, cell, width, cellMinWidth) {\n  let $cell = view.state.doc.resolve(cell);\n  let table = $cell.node(-1),\n    start = $cell.start(-1);\n  let col =\n    TableMap.get(table).colCount($cell.pos - start) +\n    $cell.nodeAfter.attrs.colspan -\n    1;\n  let dom = view.domAtPos($cell.start(-1)).node;\n  while (dom.nodeName != 'TABLE') dom = dom.parentNode;\n  updateColumns(table, dom.firstChild, dom, cellMinWidth, col, width);\n}\n\nfunction zeroes(n) {\n  let result = [];\n  for (let i = 0; i < n; i++) result.push(0);\n  return result;\n}\n\nfunction handleDecorations(state, cell) {\n  let decorations = [];\n  let $cell = state.doc.resolve(cell);\n  let table = $cell.node(-1),\n    map = TableMap.get(table),\n    start = $cell.start(-1);\n  let col = map.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan;\n  for (let row = 0; row < map.height; row++) {\n    let index = col + row * map.width - 1;\n    // For positions that are have either a different cell or the end\n    // of the table to their right, and either the top of the table or\n    // a different cell above them, add a decoration\n    if (\n      (col == map.width || map.map[index] != map.map[index + 1]) &&\n      (row == 0 || map.map[index - 1] != map.map[index - 1 - map.width])\n    ) {\n      let cellPos = map.map[index];\n      let pos = start + cellPos + table.nodeAt(cellPos).nodeSize - 1;\n      let dom = document.createElement('div');\n      dom.className = 'column-resize-handle';\n      decorations.push(Decoration.widget(pos, dom));\n    }\n  }\n  return DecorationSet.create(state.doc, decorations);\n}\n","// This file defines a plugin that handles the drawing of cell\n// selections and the basic user interactions for creating and working\n// with such selections. It also makes sure that, after each\n// transaction, the shapes of tables are normalized to be rectangular\n// and not contain overlapping cells.\n\nimport { Plugin } from 'prosemirror-state';\n\nimport {\n  handleTripleClick,\n  handleKeyDown,\n  handlePaste,\n  handleMouseDown,\n} from './input';\nimport { key as tableEditingKey } from './util';\nimport { drawCellSelection, normalizeSelection } from './cellselection';\nimport { fixTables, fixTablesKey } from './fixtables';\n\n// :: () → Plugin\n//\n// Creates a [plugin](http://prosemirror.net/docs/ref/#state.Plugin)\n// that, when added to an editor, enables cell-selection, handles\n// cell-based copy/paste, and makes sure tables stay well-formed (each\n// row has the same width, and cells don't overlap).\n//\n// You should probably put this plugin near the end of your array of\n// plugins, since it handles mouse and arrow key events in tables\n// rather broadly, and other plugins, like the gap cursor or the\n// column-width dragging plugin, might want to get a turn first to\n// perform more specific behavior.\nexport function tableEditing({ allowTableNodeSelection = false } = {}) {\n  return new Plugin({\n    key: tableEditingKey,\n\n    // This piece of state is used to remember when a mouse-drag\n    // cell-selection is happening, so that it can continue even as\n    // transactions (which might move its anchor cell) come in.\n    state: {\n      init() {\n        return null;\n      },\n      apply(tr, cur) {\n        let set = tr.getMeta(tableEditingKey);\n        if (set != null) return set == -1 ? null : set;\n        if (cur == null || !tr.docChanged) return cur;\n        let { deleted, pos } = tr.mapping.mapResult(cur);\n        return deleted ? null : pos;\n      },\n    },\n\n    props: {\n      decorations: drawCellSelection,\n\n      handleDOMEvents: {\n        mousedown: handleMouseDown,\n      },\n\n      createSelectionBetween(view) {\n        if (tableEditingKey.getState(view.state) != null)\n          return view.state.selection;\n      },\n\n      handleTripleClick,\n\n      handleKeyDown,\n\n      handlePaste,\n    },\n\n    appendTransaction(_, oldState, state) {\n      return normalizeSelection(\n        state,\n        fixTables(state, oldState),\n        allowTableNodeSelection,\n      );\n    },\n  });\n}\n\nexport { fixTables, handlePaste, fixTablesKey };\nexport {\n  cellAround,\n  isInTable,\n  selectionCell,\n  moveCellForward,\n  inSameTable,\n  findCell,\n  colCount,\n  nextCell,\n  setAttr,\n  pointsAtCell,\n  removeColSpan,\n  addColSpan,\n  columnIsHeader,\n} from './util';\nexport { tableNodes, tableNodeTypes } from './schema';\nexport { CellSelection } from './cellselection';\nexport { TableMap } from './tablemap';\nexport { tableEditingKey };\nexport * from './commands';\nexport {\n  columnResizing,\n  key as columnResizingPluginKey,\n} from './columnresizing';\nexport { updateColumns as updateColumnsOnResize, TableView } from './tableview';\nexport {\n  pastedCells as __pastedCells,\n  insertCells as __insertCells,\n  clipCells as __clipCells,\n} from './copypaste';\n"],"names":["readFromCache","addToCache","WeakMap","cache","key","get","value","set","cacheSize","cachePos","i","length","Rect","constructor","left","top","right","bottom","TableMap","width","height","map","problems","findCell","pos","curPos","j","RangeError","colCount","nextCell","axis","dir","rectBetween","a","b","leftA","rightA","topA","bottomA","leftB","rightB","topB","bottomB","Math","min","max","cellsInRect","rect","result","seen","row","col","index","push","positionAt","table","rowStart","rowEnd","child","nodeSize","rowEndIndex","computeMap","type","spec","tableRole","name","findWidth","childCount","mapPos","colWidths","e","rowNode","cellNode","colspan","rowspan","colwidth","attrs","h","n","start","w","colW","widthIndex","prev","expectedPos","missing","tableMap","badWidths","findBadColWidths","hasRowSpan","rowWidth","prevRow","cell","node","nodeAt","updated","colWidth","freshColWidth","unshift","slice","getCellAttrs","dom","extraAttrs","widthAttr","getAttribute","widths","test","split","s","Number","prop","getter","getFromDOM","setCellAttrs","join","setter","setDOMAttr","tableNodes","options","cellAttributes","cellAttrs","default","content","isolating","group","tableGroup","parseDOM","tag","toDOM","table_row","table_cell","cellContent","getAttrs","table_header","tableNodeTypes","schema","cached","nodes","role","PluginKey","cellAround","$pos","d","depth","resolve","before","cellWrapping","isInTable","state","$head","selection","selectionCell","sel","$anchorCell","$headCell","$anchor","cellNear","after","nodeAfter","firstChild","doc","nodeBefore","lastChild","pointsAtCell","parent","moveCellForward","inSameTable","$a","$b","end","moved","setAttr","removeColSpan","splice","some","addColSpan","columnIsHeader","headerCell","header_cell","CellSelection","Selection","cells","filter","p","ranges","from","SelectionRange","size","$from","$to","mapping","tableChanged","isRowSelection","rowSelection","isColSelection","colSelection","TextSelection","between","rows","rowContent","cellRect","extraLeft","extraRight","createAndFill","create","copy","Fragment","fragment","Slice","replace","tr","empty","mapFrom","steps","findFrom","to","setSelection","replaceWith","forEachCell","f","anchorTop","headTop","anchorBot","headBot","anchorRect","headRect","anchorLeft","headLeft","anchorRight","headRight","eq","other","toJSON","anchor","head","fromJSON","json","anchorCell","headCell","getBookmark","CellBookmark","prototype","visible","jsonID","near","drawCellSelection","Decoration","class","DecorationSet","isCellBoundarySelection","afterFrom","beforeTo","isTextSelectionAcrossCells","fromCellBoundaryNode","toCellBoundaryNode","parentOffset","normalizeSelection","allowTableNodeSelection","normalize","NodeSelection","$cell","lastCell","pastedCells","openStart","openEnd","first","fitSlice","ensureRectangular","r","append","nodeType","Transform","clipCells","newWidth","newHeight","added","newRows","frag","source","growTable","types","emptyHead","add","insert","header","emptyRow","isolateHorizontal","found","cellTop","cellLeft","setNodeMarkup","isolateVertical","updatePos","insertCells","dispatch","tableStart","recomp","maps","handleKeyDown","keydownHandler","ArrowLeft","arrow","ArrowRight","ArrowUp","ArrowDown","shiftArrow","Backspace","deleteCellSelection","Delete","maybeSetSelection","scrollIntoView","view","atEndOfCell","$next","newSel","baseContent","docChanged","handleTripleClick","handlePaste","_","handleMouseDown","startEvent","ctrlKey","metaKey","startDOMCell","domInCell","target","shiftKey","setCellSelection","preventDefault","cellUnderMouse","event","starting","getState","setMeta","stop","root","removeEventListener","move","addEventListener","indexAfter","cellPos","dirStr","endOfTextblock","parentNode","nodeName","mousePos","posAtCoords","clientX","clientY","fixTablesKey","changedDescendants","old","cur","offset","oldSize","curSize","outer","scan","sameMarkup","nodesBetween","fixTables","oldState","check","fixTable","descendants","tablePos","mustAdd","prob","last","tableNodeType","side","selectedRect","addColumn","refColumn","addColumnBefore","addColumnAfter","removeColumn","mapStart","delete","deleteColumn","rowIsHeader","addRow","rowPos","refRow","addRowBefore","addRowAfter","removeRow","nextRow","newPos","deleteRow","isEmpty","c","isTextblock","cellsOverlapRectangle","indexTop","indexLeft","indexBottom","indexRight","mergeCells","mergedPos","mergedCell","mapped","splitCell","nodeTypes","splitCellWithType","getCellType","baseAttrs","setCellAttr","deprecated_toggleHeader","isHeaderEnabledByType","cellPositions","toggleHeader","useDeprecatedLogic","isHeaderRowEnabled","isHeaderColumnEnabled","isHeaderEnabled","selectionStartsAt","cellsRect","newType","forEach","relativeCellPos","toggleHeaderRow","toggleHeaderColumn","toggleHeaderCell","findNextCell","goToNextCell","direction","deleteTable","TableView","cellMinWidth","document","createElement","className","appendChild","colgroup","updateColumns","contentDOM","update","ignoreMutation","record","contains","overrideCol","overrideValue","totalWidth","fixedWidth","nextDOM","hasWidth","cssWidth","style","nextSibling","removeChild","minWidth","columnResizing","handleWidth","View","lastColumnResizable","plugin","Plugin","init","props","nodeViews","ResizeState","apply","attributes","pluginState","activeHandle","handleDOMEvents","mousemove","handleMouseMove","mouseleave","handleMouseLeave","mousedown","decorations","handleDecorations","dragging","action","getMeta","setHandle","setDragging","undefined","handle","domCellAround","getBoundingClientRect","edgeCell","updateHandle","currentColWidth","startX","startWidth","finish","window","updateColumnWidth","draggedWidth","which","dragged","displayColumnWidth","domAtPos","childNodes","domWidth","offsetWidth","parts","classList","indexOf","mapIndex","zeroes","widget","tableEditing","tableEditingKey","deleted","mapResult","createSelectionBetween","appendTransaction"],"mappings":";;;;;;EAAA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA,IAAIA,aAAJ,EAAmBC,UAAnB;EAEA;;EACA,IAAI,OAAOC,OAAP,IAAkB,WAAtB,EAAmC;EACjC;EACA,EAAA,IAAIC,KAAK,GAAG,IAAID,OAAJ,EAAZ,CAAA;;IACAF,aAAa,GAAII,GAAD,IAASD,KAAK,CAACE,GAAN,CAAUD,GAAV,CAAzB,CAAA;;EACAH,EAAAA,UAAU,GAAG,CAACG,GAAD,EAAME,KAAN,KAAgB;EAC3BH,IAAAA,KAAK,CAACI,GAAN,CAAUH,GAAV,EAAeE,KAAf,CAAA,CAAA;EACA,IAAA,OAAOA,KAAP,CAAA;KAFF,CAAA;EAID,CARD,MAQO;IACL,IAAIH,KAAK,GAAG,EAAZ;QACEK,SAAS,GAAG,EADd;QAEEC,QAAQ,GAAG,CAFb,CAAA;;IAGAT,aAAa,GAAII,GAAD,IAAS;EACvB,IAAA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACQ,MAA1B,EAAkCD,CAAC,IAAI,CAAvC,EACE,IAAIP,KAAK,CAACO,CAAD,CAAL,IAAYN,GAAhB,EAAqB,OAAOD,KAAK,CAACO,CAAC,GAAG,CAAL,CAAZ,CAAA;KAFzB,CAAA;;EAIAT,EAAAA,UAAU,GAAG,CAACG,GAAD,EAAME,KAAN,KAAgB;EAC3B,IAAA,IAAIG,QAAQ,IAAID,SAAhB,EAA2BC,QAAQ,GAAG,CAAX,CAAA;EAC3BN,IAAAA,KAAK,CAACM,QAAQ,EAAT,CAAL,GAAoBL,GAApB,CAAA;EACA,IAAA,OAAQD,KAAK,CAACM,QAAQ,EAAT,CAAL,GAAoBH,KAA5B,CAAA;KAHF,CAAA;EAKD,CAAA;;EAEM,MAAMM,IAAN,CAAW;IAChBC,WAAW,CAACC,IAAD,EAAOC,GAAP,EAAYC,KAAZ,EAAmBC,MAAnB,EAA2B;MACpC,IAAKH,CAAAA,IAAL,GAAYA,IAAZ,CAAA;MACA,IAAKC,CAAAA,GAAL,GAAWA,GAAX,CAAA;MACA,IAAKC,CAAAA,KAAL,GAAaA,KAAb,CAAA;MACA,IAAKC,CAAAA,MAAL,GAAcA,MAAd,CAAA;EACD,GAAA;;EANe;EAUlB;EACA;EACA;;EACO,MAAMC,QAAN,CAAe;IACpBL,WAAW,CAACM,KAAD,EAAQC,MAAR,EAAgBC,GAAhB,EAAqBC,QAArB,EAA+B;EACxC;EACA,IAAA,IAAA,CAAKH,KAAL,GAAaA,KAAb,CAFwC;;EAIxC,IAAA,IAAA,CAAKC,MAAL,GAAcA,MAAd,CAJwC;EAMxC;;EACA,IAAA,IAAA,CAAKC,GAAL,GAAWA,GAAX,CAPwC;EASxC;;MACA,IAAKC,CAAAA,QAAL,GAAgBA,QAAhB,CAAA;EACD,GAZmB;EAepB;;;IACAC,QAAQ,CAACC,GAAD,EAAM;EACZ,IAAA,KAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAAKW,CAAAA,GAAL,CAASV,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;EACxC,MAAA,IAAIe,MAAM,GAAG,IAAA,CAAKJ,GAAL,CAASX,CAAT,CAAb,CAAA;QACA,IAAIe,MAAM,IAAID,GAAd,EAAmB,SAAA;EACnB,MAAA,IAAIV,IAAI,GAAGJ,CAAC,GAAG,KAAKS,KAApB;EAAA,UACEJ,GAAG,GAAIL,CAAC,GAAG,IAAKS,CAAAA,KAAV,GAAmB,CAD3B,CAAA;EAEA,MAAA,IAAIH,KAAK,GAAGF,IAAI,GAAG,CAAnB;EAAA,UACEG,MAAM,GAAGF,GAAG,GAAG,CADjB,CAAA;;QAEA,KAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBV,KAAK,GAAG,IAAKG,CAAAA,KAAb,IAAsB,IAAA,CAAKE,GAAL,CAASX,CAAC,GAAGgB,CAAb,CAAA,IAAmBD,MAAzD,EAAiEC,CAAC,EAAlE,EACEV,KAAK,EAAA,CAAA;;QACP,KACE,IAAIU,CAAC,GAAG,CADV,EAEET,MAAM,GAAG,IAAA,CAAKG,MAAd,IAAwB,IAAKC,CAAAA,GAAL,CAASX,CAAC,GAAG,IAAKS,CAAAA,KAAL,GAAaO,CAA1B,CAAgCD,IAAAA,MAF1D,EAGEC,CAAC,EAHH,EAKET,MAAM,EAAA,CAAA;;QACR,OAAO,IAAIL,IAAJ,CAASE,IAAT,EAAeC,GAAf,EAAoBC,KAApB,EAA2BC,MAA3B,CAAP,CAAA;EACD,KAAA;;EACD,IAAA,MAAM,IAAIU,UAAJ,CAAe,yBAAyBH,GAAzB,GAA+B,QAA9C,CAAN,CAAA;EACD,GAnCmB;EAsCpB;;;IACAI,QAAQ,CAACJ,GAAD,EAAM;MACZ,KAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAAKW,CAAAA,GAAL,CAASV,MAA7B,EAAqCD,CAAC,EAAtC,EACE,IAAI,IAAA,CAAKW,GAAL,CAASX,CAAT,CAAA,IAAec,GAAnB,EAAwB,OAAOd,CAAC,GAAG,IAAA,CAAKS,KAAhB,CAAA;;EAC1B,IAAA,MAAM,IAAIQ,UAAJ,CAAe,yBAAyBH,GAAzB,GAA+B,QAA9C,CAAN,CAAA;EACD,GA3CmB;EA8CpB;EACA;;;EACAK,EAAAA,QAAQ,CAACL,GAAD,EAAMM,IAAN,EAAYC,GAAZ,EAAiB;MACvB,IAAI;QAAEjB,IAAF;QAAQE,KAAR;QAAeD,GAAf;EAAoBE,MAAAA,MAAAA;EAApB,KAAA,GAA+B,IAAKM,CAAAA,QAAL,CAAcC,GAAd,CAAnC,CAAA;;MACA,IAAIM,IAAI,IAAI,OAAZ,EAAqB;EACnB,MAAA,IAAIC,GAAG,GAAG,CAAN,GAAUjB,IAAI,IAAI,CAAlB,GAAsBE,KAAK,IAAI,IAAA,CAAKG,KAAxC,EAA+C,OAAO,IAAP,CAAA;EAC/C,MAAA,OAAO,KAAKE,GAAL,CAASN,GAAG,GAAG,IAAA,CAAKI,KAAX,IAAoBY,GAAG,GAAG,CAAN,GAAUjB,IAAI,GAAG,CAAjB,GAAqBE,KAAzC,CAAT,CAAP,CAAA;EACD,KAHD,MAGO;EACL,MAAA,IAAIe,GAAG,GAAG,CAAN,GAAUhB,GAAG,IAAI,CAAjB,GAAqBE,MAAM,IAAI,IAAA,CAAKG,MAAxC,EAAgD,OAAO,IAAP,CAAA;EAChD,MAAA,OAAO,KAAKC,GAAL,CAASP,IAAI,GAAG,IAAA,CAAKK,KAAL,IAAcY,GAAG,GAAG,CAAN,GAAUhB,GAAG,GAAG,CAAhB,GAAoBE,MAAlC,CAAhB,CAAP,CAAA;EACD,KAAA;EACF,GAzDmB;EA4DpB;;;EACAe,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAO;MAChB,IAAI;EACFpB,MAAAA,IAAI,EAAEqB,KADJ;EAEFnB,MAAAA,KAAK,EAAEoB,MAFL;EAGFrB,MAAAA,GAAG,EAAEsB,IAHH;EAIFpB,MAAAA,MAAM,EAAEqB,OAAAA;EAJN,KAAA,GAKA,IAAKf,CAAAA,QAAL,CAAcU,CAAd,CALJ,CAAA;MAMA,IAAI;EACFnB,MAAAA,IAAI,EAAEyB,KADJ;EAEFvB,MAAAA,KAAK,EAAEwB,MAFL;EAGFzB,MAAAA,GAAG,EAAE0B,IAHH;EAIFxB,MAAAA,MAAM,EAAEyB,OAAAA;EAJN,KAAA,GAKA,IAAKnB,CAAAA,QAAL,CAAcW,CAAd,CALJ,CAAA;EAMA,IAAA,OAAO,IAAItB,IAAJ,CACL+B,IAAI,CAACC,GAAL,CAAST,KAAT,EAAgBI,KAAhB,CADK,EAELI,IAAI,CAACC,GAAL,CAASP,IAAT,EAAeI,IAAf,CAFK,EAGLE,IAAI,CAACE,GAAL,CAAST,MAAT,EAAiBI,MAAjB,CAHK,EAILG,IAAI,CAACE,GAAL,CAASP,OAAT,EAAkBI,OAAlB,CAJK,CAAP,CAAA;EAMD,GAhFmB;EAmFpB;EACA;;;IACAI,WAAW,CAACC,IAAD,EAAO;MAChB,IAAIC,MAAM,GAAG,EAAb;UACEC,IAAI,GAAG,EADT,CAAA;;EAEA,IAAA,KAAK,IAAIC,GAAG,GAAGH,IAAI,CAAChC,GAApB,EAAyBmC,GAAG,GAAGH,IAAI,CAAC9B,MAApC,EAA4CiC,GAAG,EAA/C,EAAmD;EACjD,MAAA,KAAK,IAAIC,GAAG,GAAGJ,IAAI,CAACjC,IAApB,EAA0BqC,GAAG,GAAGJ,IAAI,CAAC/B,KAArC,EAA4CmC,GAAG,EAA/C,EAAmD;EACjD,QAAA,IAAIC,KAAK,GAAGF,GAAG,GAAG,IAAK/B,CAAAA,KAAX,GAAmBgC,GAA/B;EAAA,YACE3B,GAAG,GAAG,IAAA,CAAKH,GAAL,CAAS+B,KAAT,CADR,CAAA;EAEA,QAAA,IAAIH,IAAI,CAACzB,GAAD,CAAR,EAAe,SAAA;EACfyB,QAAAA,IAAI,CAACzB,GAAD,CAAJ,GAAY,IAAZ,CAAA;EACA,QAAA,IACE,CAAC2B,GAAG,IAAIJ,IAAI,CAACjC,IAAZ,IAAoB,CAACqC,GAArB,IAA4B,IAAK9B,CAAAA,GAAL,CAAS+B,KAAK,GAAG,CAAjB,CAAuB5B,IAAAA,GAApD,MACC0B,GAAG,IAAIH,IAAI,CAAChC,GAAZ,IAAmB,CAACmC,GAApB,IAA2B,IAAK7B,CAAAA,GAAL,CAAS+B,KAAK,GAAG,KAAKjC,KAAtB,CAAA,IAAgCK,GAD5D,CADF,EAIEwB,MAAM,CAACK,IAAP,CAAY7B,GAAZ,CAAA,CAAA;EACH,OAAA;EACF,KAAA;;EACD,IAAA,OAAOwB,MAAP,CAAA;EACD,GAtGmB;EAyGpB;EACA;;;EACAM,EAAAA,UAAU,CAACJ,GAAD,EAAMC,GAAN,EAAWI,KAAX,EAAkB;MAC1B,KAAK,IAAI7C,CAAC,GAAG,CAAR,EAAW8C,QAAQ,GAAG,CAA3B,GAAgC9C,CAAC,EAAjC,EAAqC;QACnC,IAAI+C,MAAM,GAAGD,QAAQ,GAAGD,KAAK,CAACG,KAAN,CAAYhD,CAAZ,CAAA,CAAeiD,QAAvC,CAAA;;QACA,IAAIjD,CAAC,IAAIwC,GAAT,EAAc;EACZ,QAAA,IAAIE,KAAK,GAAGD,GAAG,GAAGD,GAAG,GAAG,KAAK/B,KAA7B;cACEyC,WAAW,GAAG,CAACV,GAAG,GAAG,CAAP,IAAY,IAAA,CAAK/B,KADjC,CADY;;UAIZ,OAAOiC,KAAK,GAAGQ,WAAR,IAAuB,IAAA,CAAKvC,GAAL,CAAS+B,KAAT,CAAA,GAAkBI,QAAhD,EAA0DJ,KAAK,EAAA,CAAA;;EAC/D,QAAA,OAAOA,KAAK,IAAIQ,WAAT,GAAuBH,MAAM,GAAG,CAAhC,GAAoC,IAAKpC,CAAAA,GAAL,CAAS+B,KAAT,CAA3C,CAAA;EACD,OAAA;;EACDI,MAAAA,QAAQ,GAAGC,MAAX,CAAA;EACD,KAAA;EACF,GAvHmB;EA0HpB;;;IACU,OAAHpD,GAAG,CAACkD,KAAD,EAAQ;EAChB,IAAA,OAAOvD,aAAa,CAACuD,KAAD,CAAb,IAAwBtD,UAAU,CAACsD,KAAD,EAAQM,UAAU,CAACN,KAAD,CAAlB,CAAzC,CAAA;EACD,GAAA;;EA7HmB;;EAiItB,SAASM,UAAT,CAAoBN,KAApB,EAA2B;IACzB,IAAIA,KAAK,CAACO,IAAN,CAAWC,IAAX,CAAgBC,SAAhB,IAA6B,OAAjC,EACE,MAAM,IAAIrC,UAAJ,CAAe,oBAAuB4B,GAAAA,KAAK,CAACO,IAAN,CAAWG,IAAjD,CAAN,CAAA;EACF,EAAA,IAAI9C,KAAK,GAAG+C,SAAS,CAACX,KAAD,CAArB;EAAA,MACEnC,MAAM,GAAGmC,KAAK,CAACY,UADjB,CAAA;IAEA,IAAI9C,GAAG,GAAG,EAAV;QACE+C,MAAM,GAAG,CADX;QAEE9C,QAAQ,GAAG,IAFb;QAGE+C,SAAS,GAAG,EAHd,CAAA;;IAIA,KAAK,IAAI3D,CAAC,GAAG,CAAR,EAAW4D,CAAC,GAAGnD,KAAK,GAAGC,MAA5B,EAAoCV,CAAC,GAAG4D,CAAxC,EAA2C5D,CAAC,EAA5C,EAAgDW,GAAG,CAACX,CAAD,CAAH,GAAS,CAAT,CAAA;;EAEhD,EAAA,KAAK,IAAIwC,GAAG,GAAG,CAAV,EAAa1B,GAAG,GAAG,CAAxB,EAA2B0B,GAAG,GAAG9B,MAAjC,EAAyC8B,GAAG,EAA5C,EAAgD;EAC9C,IAAA,IAAIqB,OAAO,GAAGhB,KAAK,CAACG,KAAN,CAAYR,GAAZ,CAAd,CAAA;MACA1B,GAAG,EAAA,CAAA;;EACH,IAAA,KAAK,IAAId,CAAC,GAAG,CAAb,GAAkBA,CAAC,EAAnB,EAAuB;EACrB,MAAA,OAAO0D,MAAM,GAAG/C,GAAG,CAACV,MAAb,IAAuBU,GAAG,CAAC+C,MAAD,CAAH,IAAe,CAA7C,EAAgDA,MAAM,EAAA,CAAA;;EACtD,MAAA,IAAI1D,CAAC,IAAI6D,OAAO,CAACJ,UAAjB,EAA6B,MAAA;EAC7B,MAAA,IAAIK,QAAQ,GAAGD,OAAO,CAACb,KAAR,CAAchD,CAAd,CAAf;YACE;UAAE+D,OAAF;UAAWC,OAAX;EAAoBC,QAAAA,QAAAA;SAAaH,GAAAA,QAAQ,CAACI,KAD5C,CAAA;;QAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAApB,EAA6BG,CAAC,EAA9B,EAAkC;EAChC,QAAA,IAAIA,CAAC,GAAG3B,GAAJ,IAAW9B,MAAf,EAAuB;YACrB,CAACE,QAAQ,KAAKA,QAAQ,GAAG,EAAhB,CAAT,EAA8B+B,IAA9B,CAAmC;EACjCS,YAAAA,IAAI,EAAE,kBAD2B;cAEjCtC,GAFiC;cAGjCsD,CAAC,EAAEJ,OAAO,GAAGG,CAAAA;aAHf,CAAA,CAAA;EAKA,UAAA,MAAA;EACD,SAAA;;EACD,QAAA,IAAIE,KAAK,GAAGX,MAAM,GAAGS,CAAC,GAAG1D,KAAzB,CAAA;;UACA,KAAK,IAAI6D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,OAApB,EAA6BO,CAAC,EAA9B,EAAkC;EAChC,UAAA,IAAI3D,GAAG,CAAC0D,KAAK,GAAGC,CAAT,CAAH,IAAkB,CAAtB,EAAyB3D,GAAG,CAAC0D,KAAK,GAAGC,CAAT,CAAH,GAAiBxD,GAAjB,CAAzB,KAEE,CAACF,QAAQ,KAAKA,QAAQ,GAAG,EAAhB,CAAT,EAA8B+B,IAA9B,CAAmC;EACjCS,YAAAA,IAAI,EAAE,WAD2B;cAEjCZ,GAFiC;cAGjC1B,GAHiC;cAIjCsD,CAAC,EAAEL,OAAO,GAAGO,CAAAA;aAJf,CAAA,CAAA;EAMF,UAAA,IAAIC,IAAI,GAAGN,QAAQ,IAAIA,QAAQ,CAACK,CAAD,CAA/B,CAAA;;EACA,UAAA,IAAIC,IAAJ,EAAU;cACR,IAAIC,UAAU,GAAI,CAACH,KAAK,GAAGC,CAAT,IAAc7D,KAAf,GAAwB,CAAzC;EAAA,gBACEgE,IAAI,GAAGd,SAAS,CAACa,UAAD,CADlB,CAAA;;EAEA,YAAA,IACEC,IAAI,IAAI,IAAR,IACCA,IAAI,IAAIF,IAAR,IAAgBZ,SAAS,CAACa,UAAU,GAAG,CAAd,CAAT,IAA6B,CAFhD,EAGE;EACAb,cAAAA,SAAS,CAACa,UAAD,CAAT,GAAwBD,IAAxB,CAAA;EACAZ,cAAAA,SAAS,CAACa,UAAU,GAAG,CAAd,CAAT,GAA4B,CAA5B,CAAA;EACD,aAND,MAMO,IAAIC,IAAI,IAAIF,IAAZ,EAAkB;EACvBZ,cAAAA,SAAS,CAACa,UAAU,GAAG,CAAd,CAAT,EAAA,CAAA;EACD,aAAA;EACF,WAAA;EACF,SAAA;EACF,OAAA;;EACDd,MAAAA,MAAM,IAAIK,OAAV,CAAA;QACAjD,GAAG,IAAIgD,QAAQ,CAACb,QAAhB,CAAA;EACD,KAAA;;EACD,IAAA,IAAIyB,WAAW,GAAG,CAAClC,GAAG,GAAG,CAAP,IAAY/B,KAA9B;UACEkE,OAAO,GAAG,CADZ,CAAA;;EAEA,IAAA,OAAOjB,MAAM,GAAGgB,WAAhB,EAA6B,IAAI/D,GAAG,CAAC+C,MAAM,EAAP,CAAH,IAAiB,CAArB,EAAwBiB,OAAO,EAAA,CAAA;;MAC5D,IAAIA,OAAJ,EACE,CAAC/D,QAAQ,KAAKA,QAAQ,GAAG,EAAhB,CAAT,EAA8B+B,IAA9B,CAAmC;EAAES,MAAAA,IAAI,EAAE,SAAR;QAAmBZ,GAAnB;EAAwB4B,MAAAA,CAAC,EAAEO,OAAAA;OAA9D,CAAA,CAAA;MACF7D,GAAG,EAAA,CAAA;EACJ,GAAA;;EAED,EAAA,IAAI8D,QAAQ,GAAG,IAAIpE,QAAJ,CAAaC,KAAb,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,QAAjC,CAAf;EAAA,MACEiE,SAAS,GAAG,KADd,CAjEyB;EAqEzB;EACA;;EACA,EAAA,KAAK,IAAI7E,CAAC,GAAG,CAAb,EAAgB,CAAC6E,SAAD,IAAc7E,CAAC,GAAG2D,SAAS,CAAC1D,MAA5C,EAAoDD,CAAC,IAAI,CAAzD,EACE,IAAI2D,SAAS,CAAC3D,CAAD,CAAT,IAAgB,IAAhB,IAAwB2D,SAAS,CAAC3D,CAAC,GAAG,CAAL,CAAT,GAAmBU,MAA/C,EAAuDmE,SAAS,GAAG,IAAZ,CAAA;;IACzD,IAAIA,SAAJ,EAAeC,gBAAgB,CAACF,QAAD,EAAWjB,SAAX,EAAsBd,KAAtB,CAAhB,CAAA;EAEf,EAAA,OAAO+B,QAAP,CAAA;EACD,CAAA;;EAED,SAASpB,SAAT,CAAmBX,KAAnB,EAA0B;IACxB,IAAIpC,KAAK,GAAG,CAAC,CAAb;QACEsE,UAAU,GAAG,KADf,CAAA;;EAEA,EAAA,KAAK,IAAIvC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGK,KAAK,CAACY,UAA9B,EAA0CjB,GAAG,EAA7C,EAAiD;EAC/C,IAAA,IAAIqB,OAAO,GAAGhB,KAAK,CAACG,KAAN,CAAYR,GAAZ,CAAd;UACEwC,QAAQ,GAAG,CADb,CAAA;EAEA,IAAA,IAAID,UAAJ,EACE,KAAK,IAAI/D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwB,GAApB,EAAyBxB,CAAC,EAA1B,EAA8B;EAC5B,MAAA,IAAIiE,OAAO,GAAGpC,KAAK,CAACG,KAAN,CAAYhC,CAAZ,CAAd,CAAA;;EACA,MAAA,KAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiF,OAAO,CAACxB,UAA5B,EAAwCzD,CAAC,EAAzC,EAA6C;EAC3C,QAAA,IAAIkF,IAAI,GAAGD,OAAO,CAACjC,KAAR,CAAchD,CAAd,CAAX,CAAA;EACA,QAAA,IAAIgB,CAAC,GAAGkE,IAAI,CAAChB,KAAL,CAAWF,OAAf,GAAyBxB,GAA7B,EAAkCwC,QAAQ,IAAIE,IAAI,CAAChB,KAAL,CAAWH,OAAvB,CAAA;EACnC,OAAA;EACF,KAAA;;EACH,IAAA,KAAK,IAAI/D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6D,OAAO,CAACJ,UAA5B,EAAwCzD,CAAC,EAAzC,EAA6C;EAC3C,MAAA,IAAIkF,IAAI,GAAGrB,OAAO,CAACb,KAAR,CAAchD,CAAd,CAAX,CAAA;EACAgF,MAAAA,QAAQ,IAAIE,IAAI,CAAChB,KAAL,CAAWH,OAAvB,CAAA;QACA,IAAImB,IAAI,CAAChB,KAAL,CAAWF,OAAX,GAAqB,CAAzB,EAA4Be,UAAU,GAAG,IAAb,CAAA;EAC7B,KAAA;;MACD,IAAItE,KAAK,IAAI,CAAC,CAAd,EAAiBA,KAAK,GAAGuE,QAAR,CAAjB,KACK,IAAIvE,KAAK,IAAIuE,QAAb,EAAuBvE,KAAK,GAAGwB,IAAI,CAACE,GAAL,CAAS1B,KAAT,EAAgBuE,QAAhB,CAAR,CAAA;EAC7B,GAAA;;EACD,EAAA,OAAOvE,KAAP,CAAA;EACD,CAAA;;EAED,SAASqE,gBAAT,CAA0BnE,GAA1B,EAA+BgD,SAA/B,EAA0Cd,KAA1C,EAAiD;IAC/C,IAAI,CAAClC,GAAG,CAACC,QAAT,EAAmBD,GAAG,CAACC,QAAJ,GAAe,EAAf,CAAA;;EACnB,EAAA,KAAK,IAAIZ,CAAC,GAAG,CAAR,EAAWuC,IAAI,GAAG,EAAvB,EAA2BvC,CAAC,GAAGW,GAAG,CAACA,GAAJ,CAAQV,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;EAClD,IAAA,IAAIc,GAAG,GAAGH,GAAG,CAACA,GAAJ,CAAQX,CAAR,CAAV,CAAA;EACA,IAAA,IAAIuC,IAAI,CAACzB,GAAD,CAAR,EAAe,SAAA;EACfyB,IAAAA,IAAI,CAACzB,GAAD,CAAJ,GAAY,IAAZ,CAAA;EACA,IAAA,IAAIqE,IAAI,GAAGtC,KAAK,CAACuC,MAAN,CAAatE,GAAb,CAAX;UACEuE,OAAO,GAAG,IADZ,CAAA;;EAEA,IAAA,KAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmE,IAAI,CAACjB,KAAL,CAAWH,OAA/B,EAAwC/C,CAAC,EAAzC,EAA6C;QAC3C,IAAIyB,GAAG,GAAG,CAACzC,CAAC,GAAGgB,CAAL,IAAUL,GAAG,CAACF,KAAxB;EAAA,UACE6E,QAAQ,GAAG3B,SAAS,CAAClB,GAAG,GAAG,CAAP,CADtB,CAAA;EAEA,MAAA,IACE6C,QAAQ,IAAI,IAAZ,KACC,CAACH,IAAI,CAACjB,KAAL,CAAWD,QAAZ,IAAwBkB,IAAI,CAACjB,KAAL,CAAWD,QAAX,CAAoBjD,CAApB,CAA0BsE,IAAAA,QADnD,CADF,EAIE,CAACD,OAAO,KAAKA,OAAO,GAAGE,aAAa,CAACJ,IAAI,CAACjB,KAAN,CAA5B,CAAR,EAAmDlD,CAAnD,IAAwDsE,QAAxD,CAAA;EACH,KAAA;;EACD,IAAA,IAAID,OAAJ,EACE1E,GAAG,CAACC,QAAJ,CAAa4E,OAAb,CAAqB;EACnBpC,MAAAA,IAAI,EAAE,mBADa;QAEnBtC,GAFmB;EAGnBmD,MAAAA,QAAQ,EAAEoB,OAAAA;OAHZ,CAAA,CAAA;EAKH,GAAA;EACF,CAAA;;EAED,SAASE,aAAT,CAAuBrB,KAAvB,EAA8B;IAC5B,IAAIA,KAAK,CAACD,QAAV,EAAoB,OAAOC,KAAK,CAACD,QAAN,CAAewB,KAAf,EAAP,CAAA;IACpB,IAAInD,MAAM,GAAG,EAAb,CAAA;;EACA,EAAA,KAAK,IAAItC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkE,KAAK,CAACH,OAA1B,EAAmC/D,CAAC,EAApC,EAAwCsC,MAAM,CAACK,IAAP,CAAY,CAAZ,CAAA,CAAA;;EACxC,EAAA,OAAOL,MAAP,CAAA;EACD;;ECzTD;EAEA,SAASoD,YAAT,CAAsBC,GAAtB,EAA2BC,UAA3B,EAAuC;EACrC,EAAA,IAAIC,SAAS,GAAGF,GAAG,CAACG,YAAJ,CAAiB,eAAjB,CAAhB,CAAA;IACA,IAAIC,MAAM,GACRF,SAAS,IAAI,cAAA,CAAeG,IAAf,CAAoBH,SAApB,CAAb,GACIA,SAAS,CAACI,KAAV,CAAgB,GAAhB,CAAA,CAAqBtF,GAArB,CAA0BuF,CAAD,IAAOC,MAAM,CAACD,CAAD,CAAtC,CADJ,GAEI,IAHN,CAAA;IAIA,IAAInC,OAAO,GAAGoC,MAAM,CAACR,GAAG,CAACG,YAAJ,CAAiB,SAAjB,CAA+B,IAAA,CAAhC,CAApB,CAAA;EACA,EAAA,IAAIxD,MAAM,GAAG;MACXyB,OADW;MAEXC,OAAO,EAAEmC,MAAM,CAACR,GAAG,CAACG,YAAJ,CAAiB,SAAjB,CAA+B,IAAA,CAAhC,CAFJ;MAGX7B,QAAQ,EAAE8B,MAAM,IAAIA,MAAM,CAAC9F,MAAP,IAAiB8D,OAA3B,GAAqCgC,MAArC,GAA8C,IAAA;KAH1D,CAAA;;EAKA,EAAA,KAAK,IAAIK,IAAT,IAAiBR,UAAjB,EAA6B;EAC3B,IAAA,IAAIS,MAAM,GAAGT,UAAU,CAACQ,IAAD,CAAV,CAAiBE,UAA9B,CAAA;EACA,IAAA,IAAI1G,KAAK,GAAGyG,MAAM,IAAIA,MAAM,CAACV,GAAD,CAA5B,CAAA;MACA,IAAI/F,KAAK,IAAI,IAAb,EAAmB0C,MAAM,CAAC8D,IAAD,CAAN,GAAexG,KAAf,CAAA;EACpB,GAAA;;EACD,EAAA,OAAO0C,MAAP,CAAA;EACD,CAAA;;EAED,SAASiE,YAAT,CAAsBpB,IAAtB,EAA4BS,UAA5B,EAAwC;IACtC,IAAI1B,KAAK,GAAG,EAAZ,CAAA;EACA,EAAA,IAAIiB,IAAI,CAACjB,KAAL,CAAWH,OAAX,IAAsB,CAA1B,EAA6BG,KAAK,CAACH,OAAN,GAAgBoB,IAAI,CAACjB,KAAL,CAAWH,OAA3B,CAAA;EAC7B,EAAA,IAAIoB,IAAI,CAACjB,KAAL,CAAWF,OAAX,IAAsB,CAA1B,EAA6BE,KAAK,CAACF,OAAN,GAAgBmB,IAAI,CAACjB,KAAL,CAAWF,OAA3B,CAAA;IAC7B,IAAImB,IAAI,CAACjB,KAAL,CAAWD,QAAf,EACEC,KAAK,CAAC,eAAD,CAAL,GAAyBiB,IAAI,CAACjB,KAAL,CAAWD,QAAX,CAAoBuC,IAApB,CAAyB,GAAzB,CAAzB,CAAA;;EACF,EAAA,KAAK,IAAIJ,IAAT,IAAiBR,UAAjB,EAA6B;EAC3B,IAAA,IAAIa,MAAM,GAAGb,UAAU,CAACQ,IAAD,CAAV,CAAiBM,UAA9B,CAAA;EACA,IAAA,IAAID,MAAJ,EAAYA,MAAM,CAACtB,IAAI,CAACjB,KAAL,CAAWkC,IAAX,CAAD,EAAmBlC,KAAnB,CAAN,CAAA;EACb,GAAA;;EACD,EAAA,OAAOA,KAAP,CAAA;EACD;EAGD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACO,SAASyC,UAAT,CAAoBC,OAApB,EAA6B;EAClC,EAAA,IAAIhB,UAAU,GAAGgB,OAAO,CAACC,cAAR,IAA0B,EAA3C,CAAA;EACA,EAAA,IAAIC,SAAS,GAAG;EACd/C,IAAAA,OAAO,EAAE;EAAEgD,MAAAA,OAAO,EAAE,CAAA;OADN;EAEd/C,IAAAA,OAAO,EAAE;EAAE+C,MAAAA,OAAO,EAAE,CAAA;OAFN;EAGd9C,IAAAA,QAAQ,EAAE;EAAE8C,MAAAA,OAAO,EAAE,IAAA;EAAX,KAAA;KAHZ,CAAA;;IAKA,KAAK,IAAIX,IAAT,IAAiBR,UAAjB,EACEkB,SAAS,CAACV,IAAD,CAAT,GAAkB;EAAEW,IAAAA,OAAO,EAAEnB,UAAU,CAACQ,IAAD,CAAV,CAAiBW,OAAAA;KAA9C,CAAA;;IAEF,OAAO;EACLlE,IAAAA,KAAK,EAAE;EACLmE,MAAAA,OAAO,EAAE,YADJ;EAEL1D,MAAAA,SAAS,EAAE,OAFN;EAGL2D,MAAAA,SAAS,EAAE,IAHN;QAILC,KAAK,EAAEN,OAAO,CAACO,UAJV;EAKLC,MAAAA,QAAQ,EAAE,CAAC;EAAEC,QAAAA,GAAG,EAAE,OAAA;EAAP,OAAD,CALL;;EAMLC,MAAAA,KAAK,GAAG;UACN,OAAO,CAAC,OAAD,EAAU,CAAC,OAAD,EAAU,CAAV,CAAV,CAAP,CAAA;EACD,OAAA;;OATE;EAWLC,IAAAA,SAAS,EAAE;EACTP,MAAAA,OAAO,EAAE,8BADA;EAET1D,MAAAA,SAAS,EAAE,KAFF;EAGT8D,MAAAA,QAAQ,EAAE,CAAC;EAAEC,QAAAA,GAAG,EAAE,IAAA;EAAP,OAAD,CAHD;;EAITC,MAAAA,KAAK,GAAG;EACN,QAAA,OAAO,CAAC,IAAD,EAAO,CAAP,CAAP,CAAA;EACD,OAAA;;OAjBE;EAmBLE,IAAAA,UAAU,EAAE;QACVR,OAAO,EAAEJ,OAAO,CAACa,WADP;EAEVvD,MAAAA,KAAK,EAAE4C,SAFG;EAGVxD,MAAAA,SAAS,EAAE,MAHD;EAIV2D,MAAAA,SAAS,EAAE,IAJD;EAKVG,MAAAA,QAAQ,EAAE,CACR;EAAEC,QAAAA,GAAG,EAAE,IAAP;EAAaK,QAAAA,QAAQ,EAAG/B,GAAD,IAASD,YAAY,CAACC,GAAD,EAAMC,UAAN,CAAA;EAA5C,OADQ,CALA;;QAQV0B,KAAK,CAACnC,IAAD,EAAO;UACV,OAAO,CAAC,IAAD,EAAOoB,YAAY,CAACpB,IAAD,EAAOS,UAAP,CAAnB,EAAuC,CAAvC,CAAP,CAAA;EACD,OAAA;;OA7BE;EA+BL+B,IAAAA,YAAY,EAAE;QACZX,OAAO,EAAEJ,OAAO,CAACa,WADL;EAEZvD,MAAAA,KAAK,EAAE4C,SAFK;EAGZxD,MAAAA,SAAS,EAAE,aAHC;EAIZ2D,MAAAA,SAAS,EAAE,IAJC;EAKZG,MAAAA,QAAQ,EAAE,CACR;EAAEC,QAAAA,GAAG,EAAE,IAAP;EAAaK,QAAAA,QAAQ,EAAG/B,GAAD,IAASD,YAAY,CAACC,GAAD,EAAMC,UAAN,CAAA;EAA5C,OADQ,CALE;;QAQZ0B,KAAK,CAACnC,IAAD,EAAO;UACV,OAAO,CAAC,IAAD,EAAOoB,YAAY,CAACpB,IAAD,EAAOS,UAAP,CAAnB,EAAuC,CAAvC,CAAP,CAAA;EACD,OAAA;;EAVW,KAAA;KA/BhB,CAAA;EA4CD,CAAA;EAEM,SAASgC,cAAT,CAAwBC,MAAxB,EAAgC;EACrC,EAAA,IAAIvF,MAAM,GAAGuF,MAAM,CAACC,MAAP,CAAcF,cAA3B,CAAA;;IACA,IAAI,CAACtF,MAAL,EAAa;EACXA,IAAAA,MAAM,GAAGuF,MAAM,CAACC,MAAP,CAAcF,cAAd,GAA+B,EAAxC,CAAA;;EACA,IAAA,KAAK,IAAIrE,IAAT,IAAiBsE,MAAM,CAACE,KAAxB,EAA+B;EAC7B,MAAA,IAAI3E,IAAI,GAAGyE,MAAM,CAACE,KAAP,CAAaxE,IAAb,CAAX;EAAA,UACEyE,IAAI,GAAG5E,IAAI,CAACC,IAAL,CAAUC,SADnB,CAAA;EAEA,MAAA,IAAI0E,IAAJ,EAAU1F,MAAM,CAAC0F,IAAD,CAAN,GAAe5E,IAAf,CAAA;EACX,KAAA;EACF,GAAA;;EACD,EAAA,OAAOd,MAAP,CAAA;EACD;;ECpID;QAOa5C,KAAG,GAAG,IAAIuI,0BAAJ,CAAc,gBAAd,EAAZ;EAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;IAC/B,KAAK,IAAIC,CAAC,GAAGD,IAAI,CAACE,KAAL,GAAa,CAA1B,EAA6BD,CAAC,GAAG,CAAjC,EAAoCA,CAAC,EAArC,EACE,IAAID,IAAI,CAAChD,IAAL,CAAUiD,CAAV,CAAahF,CAAAA,IAAb,CAAkBC,IAAlB,CAAuBC,SAAvB,IAAoC,KAAxC,EACE,OAAO6E,IAAI,CAAChD,IAAL,CAAU,CAAV,EAAamD,OAAb,CAAqBH,IAAI,CAACI,MAAL,CAAYH,CAAC,GAAG,CAAhB,CAArB,CAAP,CAAA;;EACJ,EAAA,OAAO,IAAP,CAAA;EACD,CAAA;EAEM,SAASI,YAAT,CAAsBL,IAAtB,EAA4B;EACjC,EAAA,KAAK,IAAIC,CAAC,GAAGD,IAAI,CAACE,KAAlB,EAAyBD,CAAC,GAAG,CAA7B,EAAgCA,CAAC,EAAjC,EAAqC;EACnC;EACA,IAAA,MAAMJ,IAAI,GAAGG,IAAI,CAAChD,IAAL,CAAUiD,CAAV,CAAA,CAAahF,IAAb,CAAkBC,IAAlB,CAAuBC,SAApC,CAAA;EACA,IAAA,IAAI0E,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,aAAhC,EAA+C,OAAOG,IAAI,CAAChD,IAAL,CAAUiD,CAAV,CAAP,CAAA;EAChD,GAAA;;EACD,EAAA,OAAO,IAAP,CAAA;EACD,CAAA;EAEM,SAASK,SAAT,CAAmBC,KAAnB,EAA0B;EAC/B,EAAA,IAAIC,KAAK,GAAGD,KAAK,CAACE,SAAN,CAAgBD,KAA5B,CAAA;;EACA,EAAA,KAAK,IAAIP,CAAC,GAAGO,KAAK,CAACN,KAAnB,EAA0BD,CAAC,GAAG,CAA9B,EAAiCA,CAAC,EAAlC,EACE,IAAIO,KAAK,CAACxD,IAAN,CAAWiD,CAAX,CAAA,CAAchF,IAAd,CAAmBC,IAAnB,CAAwBC,SAAxB,IAAqC,KAAzC,EAAgD,OAAO,IAAP,CAAA;;EAClD,EAAA,OAAO,KAAP,CAAA;EACD,CAAA;EAEM,SAASuF,aAAT,CAAuBH,KAAvB,EAA8B;EACnC,EAAA,IAAII,GAAG,GAAGJ,KAAK,CAACE,SAAhB,CAAA;;IACA,IAAIE,GAAG,CAACC,WAAR,EAAqB;EACnB,IAAA,OAAOD,GAAG,CAACC,WAAJ,CAAgBjI,GAAhB,GAAsBgI,GAAG,CAACE,SAAJ,CAAclI,GAApC,GACHgI,GAAG,CAACC,WADD,GAEHD,GAAG,CAACE,SAFR,CAAA;EAGD,GAJD,MAIO,IAAIF,GAAG,CAAC3D,IAAJ,IAAY2D,GAAG,CAAC3D,IAAJ,CAAS/B,IAAT,CAAcC,IAAd,CAAmBC,SAAnB,IAAgC,MAAhD,EAAwD;MAC7D,OAAOwF,GAAG,CAACG,OAAX,CAAA;EACD,GAAA;;EACD,EAAA,OAAOf,UAAU,CAACY,GAAG,CAACH,KAAL,CAAV,IAAyBO,QAAQ,CAACJ,GAAG,CAACH,KAAL,CAAxC,CAAA;EACD,CAAA;;EAED,SAASO,QAAT,CAAkBf,IAAlB,EAAwB;IACtB,KACE,IAAIgB,KAAK,GAAGhB,IAAI,CAACiB,SAAjB,EAA4BtI,GAAG,GAAGqH,IAAI,CAACrH,GADzC,EAEEqI,KAFF,EAGEA,KAAK,GAAGA,KAAK,CAACE,UAAd,EAA0BvI,GAAG,EAH/B,EAIE;MACA,IAAIkH,IAAI,GAAGmB,KAAK,CAAC/F,IAAN,CAAWC,IAAX,CAAgBC,SAA3B,CAAA;EACA,IAAA,IAAI0E,IAAI,IAAI,MAAR,IAAkBA,IAAI,IAAI,aAA9B,EAA6C,OAAOG,IAAI,CAACmB,GAAL,CAAShB,OAAT,CAAiBxH,GAAjB,CAAP,CAAA;EAC9C,GAAA;;IACD,KACE,IAAIyH,MAAM,GAAGJ,IAAI,CAACoB,UAAlB,EAA8BzI,GAAG,GAAGqH,IAAI,CAACrH,GAD3C,EAEEyH,MAFF,EAGEA,MAAM,GAAGA,MAAM,CAACiB,SAAhB,EAA2B1I,GAAG,EAHhC,EAIE;MACA,IAAIkH,IAAI,GAAGO,MAAM,CAACnF,IAAP,CAAYC,IAAZ,CAAiBC,SAA5B,CAAA;MACA,IAAI0E,IAAI,IAAI,MAAR,IAAkBA,IAAI,IAAI,aAA9B,EACE,OAAOG,IAAI,CAACmB,GAAL,CAAShB,OAAT,CAAiBxH,GAAG,GAAGyH,MAAM,CAACtF,QAA9B,CAAP,CAAA;EACH,GAAA;EACF,CAAA;;EAEM,SAASwG,YAAT,CAAsBtB,IAAtB,EAA4B;EACjC,EAAA,OAAOA,IAAI,CAACuB,MAAL,CAAYtG,IAAZ,CAAiBC,IAAjB,CAAsBC,SAAtB,IAAmC,KAAnC,IAA4C6E,IAAI,CAACiB,SAAxD,CAAA;EACD,CAAA;EAEM,SAASO,eAAT,CAAyBxB,IAAzB,EAA+B;EACpC,EAAA,OAAOA,IAAI,CAAChD,IAAL,CAAU,CAAV,EAAamD,OAAb,CAAqBH,IAAI,CAACrH,GAAL,GAAWqH,IAAI,CAACiB,SAAL,CAAenG,QAA/C,CAAP,CAAA;EACD,CAAA;EAEM,SAAS2G,WAAT,CAAqBC,EAArB,EAAyBC,EAAzB,EAA6B;EAClC,EAAA,OAAOD,EAAE,CAACxB,KAAH,IAAYyB,EAAE,CAACzB,KAAf,IAAwBwB,EAAE,CAAC/I,GAAH,IAAUgJ,EAAE,CAACzF,KAAH,CAAS,CAAC,CAAV,CAAlC,IAAkDwF,EAAE,CAAC/I,GAAH,IAAUgJ,EAAE,CAACC,GAAH,CAAO,CAAC,CAAR,CAAnE,CAAA;EACD,CAAA;EAEM,SAASlJ,QAAT,CAAkBsH,IAAlB,EAAwB;IAC7B,OAAO3H,QAAQ,CAACb,GAAT,CAAawI,IAAI,CAAChD,IAAL,CAAU,CAAC,CAAX,CAAb,CAAA,CAA4BtE,QAA5B,CAAqCsH,IAAI,CAACrH,GAAL,GAAWqH,IAAI,CAAC9D,KAAL,CAAW,CAAC,CAAZ,CAAhD,CAAP,CAAA;EACD,CAAA;EAEM,SAASnD,QAAT,CAAkBiH,IAAlB,EAAwB;IAC7B,OAAO3H,QAAQ,CAACb,GAAT,CAAawI,IAAI,CAAChD,IAAL,CAAU,CAAC,CAAX,CAAb,CAAA,CAA4BjE,QAA5B,CAAqCiH,IAAI,CAACrH,GAAL,GAAWqH,IAAI,CAAC9D,KAAL,CAAW,CAAC,CAAZ,CAAhD,CAAP,CAAA;EACD,CAAA;EAEM,SAASlD,QAAT,CAAkBgH,IAAlB,EAAwB/G,IAAxB,EAA8BC,GAA9B,EAAmC;IACxC,IAAIgD,KAAK,GAAG8D,IAAI,CAAC9D,KAAL,CAAW,CAAC,CAAZ,CAAZ;EAAA,MACE1D,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAawI,IAAI,CAAChD,IAAL,CAAU,CAAC,CAAX,CAAb,CADR,CAAA;EAEA,EAAA,IAAI6E,KAAK,GAAGrJ,GAAG,CAACQ,QAAJ,CAAagH,IAAI,CAACrH,GAAL,GAAWuD,KAAxB,EAA+BjD,IAA/B,EAAqCC,GAArC,CAAZ,CAAA;EACA,EAAA,OAAO2I,KAAK,IAAI,IAAT,GAAgB,IAAhB,GAAuB7B,IAAI,CAAChD,IAAL,CAAU,CAAV,CAAamD,CAAAA,OAAb,CAAqBjE,KAAK,GAAG2F,KAA7B,CAA9B,CAAA;EACD,CAAA;EAEM,SAASC,OAAT,CAAiB/F,KAAjB,EAAwBX,IAAxB,EAA8B3D,KAA9B,EAAqC;IAC1C,IAAI0C,MAAM,GAAG,EAAb,CAAA;;EACA,EAAA,KAAK,IAAI8D,IAAT,IAAiBlC,KAAjB,EAAwB5B,MAAM,CAAC8D,IAAD,CAAN,GAAelC,KAAK,CAACkC,IAAD,CAApB,CAAA;;EACxB9D,EAAAA,MAAM,CAACiB,IAAD,CAAN,GAAe3D,KAAf,CAAA;EACA,EAAA,OAAO0C,MAAP,CAAA;EACD,CAAA;EAEM,SAAS4H,aAAT,CAAuBhG,KAAvB,EAA8BpD,GAA9B,EAAmCsD,CAAC,GAAG,CAAvC,EAA0C;EAC/C,EAAA,IAAI9B,MAAM,GAAG2H,OAAO,CAAC/F,KAAD,EAAQ,SAAR,EAAmBA,KAAK,CAACH,OAAN,GAAgBK,CAAnC,CAApB,CAAA;;IACA,IAAI9B,MAAM,CAAC2B,QAAX,EAAqB;MACnB3B,MAAM,CAAC2B,QAAP,GAAkB3B,MAAM,CAAC2B,QAAP,CAAgBwB,KAAhB,EAAlB,CAAA;EACAnD,IAAAA,MAAM,CAAC2B,QAAP,CAAgBkG,MAAhB,CAAuBrJ,GAAvB,EAA4BsD,CAA5B,CAAA,CAAA;EACA,IAAA,IAAI,CAAC9B,MAAM,CAAC2B,QAAP,CAAgBmG,IAAhB,CAAsB9F,CAAD,IAAOA,CAAC,GAAG,CAAhC,CAAL,EAAyChC,MAAM,CAAC2B,QAAP,GAAkB,IAAlB,CAAA;EAC1C,GAAA;;EACD,EAAA,OAAO3B,MAAP,CAAA;EACD,CAAA;EAEM,SAAS+H,UAAT,CAAoBnG,KAApB,EAA2BpD,GAA3B,EAAgCsD,CAAC,GAAG,CAApC,EAAuC;EAC5C,EAAA,IAAI9B,MAAM,GAAG2H,OAAO,CAAC/F,KAAD,EAAQ,SAAR,EAAmBA,KAAK,CAACH,OAAN,GAAgBK,CAAnC,CAApB,CAAA;;IACA,IAAI9B,MAAM,CAAC2B,QAAX,EAAqB;MACnB3B,MAAM,CAAC2B,QAAP,GAAkB3B,MAAM,CAAC2B,QAAP,CAAgBwB,KAAhB,EAAlB,CAAA;;MACA,KAAK,IAAIzF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoE,CAApB,EAAuBpE,CAAC,EAAxB,EAA4BsC,MAAM,CAAC2B,QAAP,CAAgBkG,MAAhB,CAAuBrJ,GAAvB,EAA4B,CAA5B,EAA+B,CAA/B,CAAA,CAAA;EAC7B,GAAA;;EACD,EAAA,OAAOwB,MAAP,CAAA;EACD,CAAA;EAEM,SAASgI,cAAT,CAAwB3J,GAAxB,EAA6BkC,KAA7B,EAAoCJ,GAApC,EAAyC;IAC9C,IAAI8H,UAAU,GAAG3C,cAAc,CAAC/E,KAAK,CAACO,IAAN,CAAWyE,MAAZ,CAAd,CAAkC2C,WAAnD,CAAA;;EACA,EAAA,KAAK,IAAIhI,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG7B,GAAG,CAACD,MAA5B,EAAoC8B,GAAG,EAAvC,EACE,IAAIK,KAAK,CAACuC,MAAN,CAAazE,GAAG,CAACA,GAAJ,CAAQ8B,GAAG,GAAGD,GAAG,GAAG7B,GAAG,CAACF,KAAxB,CAAb,CAA6C2C,CAAAA,IAA7C,IAAqDmH,UAAzD,EACE,OAAO,KAAP,CAAA;;EACJ,EAAA,OAAO,IAAP,CAAA;EACD;;EC3HD;EAkBA;EACA;EACA;EACA;;EACO,MAAME,aAAN,SAA4BC,0BAA5B,CAAsC;EAC3C;EACA;EACA;EACA;EACA;EACAvK,EAAAA,WAAW,CAAC4I,WAAD,EAAcC,SAAS,GAAGD,WAA1B,EAAuC;MAChD,IAAIlG,KAAK,GAAGkG,WAAW,CAAC5D,IAAZ,CAAiB,CAAC,CAAlB,CAAZ;EAAA,QACExE,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAakD,KAAb,CADR;UAEEwB,KAAK,GAAG0E,WAAW,CAAC1E,KAAZ,CAAkB,CAAC,CAAnB,CAFV,CAAA;EAGA,IAAA,IAAIhC,IAAI,GAAG1B,GAAG,CAACW,WAAJ,CAAgByH,WAAW,CAACjI,GAAZ,GAAkBuD,KAAlC,EAAyC2E,SAAS,CAAClI,GAAV,GAAgBuD,KAAzD,CAAX,CAAA;EACA,IAAA,IAAIiF,GAAG,GAAGP,WAAW,CAAC5D,IAAZ,CAAiB,CAAjB,CAAV,CAAA;MACA,IAAIwF,KAAK,GAAGhK,GAAG,CAACyB,WAAJ,CAAgBC,IAAhB,EAAsBuI,MAAtB,CAA8BC,CAAD,IAAOA,CAAC,IAAI7B,SAAS,CAAClI,GAAV,GAAgBuD,KAAzD,CAAZ,CANgD;EAQhD;;EACAsG,IAAAA,KAAK,CAACnF,OAAN,CAAcwD,SAAS,CAAClI,GAAV,GAAgBuD,KAA9B,CAAA,CAAA;EACA,IAAA,IAAIyG,MAAM,GAAGH,KAAK,CAAChK,GAAN,CAAWG,GAAD,IAAS;EAC9B,MAAA,IAAIoE,IAAI,GAAGrC,KAAK,CAACuC,MAAN,CAAatE,GAAb,CAAX;EAAA,UACEiK,IAAI,GAAGjK,GAAG,GAAGuD,KAAN,GAAc,CADvB,CAAA;QAEA,OAAO,IAAI2G,+BAAJ,CACL1B,GAAG,CAAChB,OAAJ,CAAYyC,IAAZ,CADK,EAELzB,GAAG,CAAChB,OAAJ,CAAYyC,IAAI,GAAG7F,IAAI,CAAC8B,OAAL,CAAaiE,IAAhC,CAFK,CAAP,CAAA;EAID,KAPY,CAAb,CAAA;EAQA,IAAA,KAAA,CAAMH,MAAM,CAAC,CAAD,CAAN,CAAUI,KAAhB,EAAuBJ,MAAM,CAAC,CAAD,CAAN,CAAUK,GAAjC,EAAsCL,MAAtC,EAlBgD;EAoBhD;EACA;;EACA,IAAA,IAAA,CAAK/B,WAAL,GAAmBA,WAAnB,CAtBgD;EAwBhD;EACA;;MACA,IAAKC,CAAAA,SAAL,GAAiBA,SAAjB,CAAA;EACD,GAAA;;EAEDrI,EAAAA,GAAG,CAAC2I,GAAD,EAAM8B,OAAN,EAAe;EAChB,IAAA,IAAIrC,WAAW,GAAGO,GAAG,CAAChB,OAAJ,CAAY8C,OAAO,CAACzK,GAAR,CAAY,IAAKoI,CAAAA,WAAL,CAAiBjI,GAA7B,CAAZ,CAAlB,CAAA;EACA,IAAA,IAAIkI,SAAS,GAAGM,GAAG,CAAChB,OAAJ,CAAY8C,OAAO,CAACzK,GAAR,CAAY,IAAKqI,CAAAA,SAAL,CAAelI,GAA3B,CAAZ,CAAhB,CAAA;;EACA,IAAA,IACE2I,YAAY,CAACV,WAAD,CAAZ,IACAU,YAAY,CAACT,SAAD,CADZ,IAEAY,WAAW,CAACb,WAAD,EAAcC,SAAd,CAHb,EAIE;EACA,MAAA,IAAIqC,YAAY,GAAG,IAAA,CAAKtC,WAAL,CAAiB5D,IAAjB,CAAsB,CAAC,CAAvB,CAAA,IAA6B4D,WAAW,CAAC5D,IAAZ,CAAiB,CAAC,CAAlB,CAAhD,CAAA;EACA,MAAA,IAAIkG,YAAY,IAAI,IAAA,CAAKC,cAAL,EAApB,EACE,OAAOb,aAAa,CAACc,YAAd,CAA2BxC,WAA3B,EAAwCC,SAAxC,CAAP,CADF,KAEK,IAAIqC,YAAY,IAAI,IAAA,CAAKG,cAAL,EAApB,EACH,OAAOf,aAAa,CAACgB,YAAd,CAA2B1C,WAA3B,EAAwCC,SAAxC,CAAP,CADG,KAEA,OAAO,IAAIyB,aAAJ,CAAkB1B,WAAlB,EAA+BC,SAA/B,CAAP,CAAA;EACN,KAAA;;EACD,IAAA,OAAO0C,8BAAa,CAACC,OAAd,CAAsB5C,WAAtB,EAAmCC,SAAnC,CAAP,CAAA;EACD,GAnD0C;EAsD3C;EACA;;;EACAhC,EAAAA,OAAO,GAAG;MACR,IAAInE,KAAK,GAAG,IAAKkG,CAAAA,WAAL,CAAiB5D,IAAjB,CAAsB,CAAC,CAAvB,CAAZ;EAAA,QACExE,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAakD,KAAb,CADR;UAEEwB,KAAK,GAAG,IAAK0E,CAAAA,WAAL,CAAiB1E,KAAjB,CAAuB,CAAC,CAAxB,CAFV,CAAA;EAGA,IAAA,IAAIhC,IAAI,GAAG1B,GAAG,CAACW,WAAJ,CACT,KAAKyH,WAAL,CAAiBjI,GAAjB,GAAuBuD,KADd,EAET,IAAK2E,CAAAA,SAAL,CAAelI,GAAf,GAAqBuD,KAFZ,CAAX,CAAA;MAIA,IAAI9B,IAAI,GAAG,EAAX;UACEqJ,IAAI,GAAG,EADT,CAAA;;EAEA,IAAA,KAAK,IAAIpJ,GAAG,GAAGH,IAAI,CAAChC,GAApB,EAAyBmC,GAAG,GAAGH,IAAI,CAAC9B,MAApC,EAA4CiC,GAAG,EAA/C,EAAmD;QACjD,IAAIqJ,UAAU,GAAG,EAAjB,CAAA;;EACA,MAAA,KACE,IAAInJ,KAAK,GAAGF,GAAG,GAAG7B,GAAG,CAACF,KAAV,GAAkB4B,IAAI,CAACjC,IAAnC,EAAyCqC,GAAG,GAAGJ,IAAI,CAACjC,IADtD,EAEEqC,GAAG,GAAGJ,IAAI,CAAC/B,KAFb,EAGEmC,GAAG,EAAIC,EAAAA,KAAK,EAHd,EAIE;EACA,QAAA,IAAI5B,GAAG,GAAGH,GAAG,CAACA,GAAJ,CAAQ+B,KAAR,CAAV,CAAA;;EACA,QAAA,IAAI,CAACH,IAAI,CAACzB,GAAD,CAAT,EAAgB;EACdyB,UAAAA,IAAI,CAACzB,GAAD,CAAJ,GAAY,IAAZ,CAAA;EACA,UAAA,IAAIgL,QAAQ,GAAGnL,GAAG,CAACE,QAAJ,CAAaC,GAAb,CAAf;EAAA,cACEoE,IAAI,GAAGrC,KAAK,CAACuC,MAAN,CAAatE,GAAb,CADT,CAAA;YAEA,IAAIiL,SAAS,GAAG1J,IAAI,CAACjC,IAAL,GAAY0L,QAAQ,CAAC1L,IAArC;gBACE4L,UAAU,GAAGF,QAAQ,CAACxL,KAAT,GAAiB+B,IAAI,CAAC/B,KADrC,CAAA;;EAEA,UAAA,IAAIyL,SAAS,GAAG,CAAZ,IAAiBC,UAAU,GAAG,CAAlC,EAAqC;EACnC,YAAA,IAAI9H,KAAK,GAAGgB,IAAI,CAAChB,KAAjB,CAAA;EACA,YAAA,IAAI6H,SAAS,GAAG,CAAhB,EAAmB7H,KAAK,GAAGgG,aAAa,CAAChG,KAAD,EAAQ,CAAR,EAAW6H,SAAX,CAArB,CAAA;EACnB,YAAA,IAAIC,UAAU,GAAG,CAAjB,EACE9H,KAAK,GAAGgG,aAAa,CACnBhG,KADmB,EAEnBA,KAAK,CAACH,OAAN,GAAgBiI,UAFG,EAGnBA,UAHmB,CAArB,CAAA;EAKF,YAAA,IAAIF,QAAQ,CAAC1L,IAAT,GAAgBiC,IAAI,CAACjC,IAAzB,EACE8E,IAAI,GAAGA,IAAI,CAAC9B,IAAL,CAAU6I,aAAV,CAAwB/H,KAAxB,CAAP,CADF,KAEKgB,IAAI,GAAGA,IAAI,CAAC9B,IAAL,CAAU8I,MAAV,CAAiBhI,KAAjB,EAAwBgB,IAAI,CAAC8B,OAA7B,CAAP,CAAA;EACN,WAAA;;EACD,UAAA,IAAI8E,QAAQ,CAACzL,GAAT,GAAegC,IAAI,CAAChC,GAApB,IAA2ByL,QAAQ,CAACvL,MAAT,GAAkB8B,IAAI,CAAC9B,MAAtD,EAA8D;EAC5D,YAAA,IAAI2D,KAAK,GAAG+F,OAAO,CACjB/E,IAAI,CAAChB,KADY,EAEjB,SAFiB,EAGjBjC,IAAI,CAACC,GAAL,CAAS4J,QAAQ,CAACvL,MAAlB,EAA0B8B,IAAI,CAAC9B,MAA/B,CACE0B,GAAAA,IAAI,CAACE,GAAL,CAAS2J,QAAQ,CAACzL,GAAlB,EAAuBgC,IAAI,CAAChC,GAA5B,CAJe,CAAnB,CAAA;EAMA,YAAA,IAAIyL,QAAQ,CAACzL,GAAT,GAAegC,IAAI,CAAChC,GAAxB,EAA6B6E,IAAI,GAAGA,IAAI,CAAC9B,IAAL,CAAU6I,aAAV,CAAwB/H,KAAxB,CAAP,CAA7B,KACKgB,IAAI,GAAGA,IAAI,CAAC9B,IAAL,CAAU8I,MAAV,CAAiBhI,KAAjB,EAAwBgB,IAAI,CAAC8B,OAA7B,CAAP,CAAA;EACN,WAAA;;YACD6E,UAAU,CAAClJ,IAAX,CAAgBuC,IAAhB,CAAA,CAAA;EACD,SAAA;EACF,OAAA;;EACD0G,MAAAA,IAAI,CAACjJ,IAAL,CAAUE,KAAK,CAACG,KAAN,CAAYR,GAAZ,CAAiB2J,CAAAA,IAAjB,CAAsBC,yBAAQ,CAACrB,IAAT,CAAcc,UAAd,CAAtB,CAAV,CAAA,CAAA;EACD,KAAA;;MAED,MAAMQ,QAAQ,GACZ,IAAA,CAAKb,cAAL,EAAA,IAAyB,IAAKF,CAAAA,cAAL,EAAzB,GAAiDzI,KAAjD,GAAyD+I,IAD3D,CAAA;EAEA,IAAA,OAAO,IAAIU,sBAAJ,CAAUF,yBAAQ,CAACrB,IAAT,CAAcsB,QAAd,CAAV,EAAmC,CAAnC,EAAsC,CAAtC,CAAP,CAAA;EACD,GAAA;;IAEDE,OAAO,CAACC,EAAD,EAAKxF,OAAO,GAAGsF,sBAAK,CAACG,KAArB,EAA4B;EACjC,IAAA,IAAIC,OAAO,GAAGF,EAAE,CAACG,KAAH,CAAS1M,MAAvB;UACE6K,MAAM,GAAG,IAAA,CAAKA,MADhB,CAAA;;EAEA,IAAA,KAAK,IAAI9K,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8K,MAAM,CAAC7K,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;QACtC,IAAI;UAAEkL,KAAF;EAASC,QAAAA,GAAAA;SAAQL,GAAAA,MAAM,CAAC9K,CAAD,CAA3B;YACEoL,OAAO,GAAGoB,EAAE,CAACpB,OAAH,CAAW3F,KAAX,CAAiBiH,OAAjB,CADZ,CAAA;QAEAF,EAAE,CAACD,OAAH,CACEnB,OAAO,CAACzK,GAAR,CAAYuK,KAAK,CAACpK,GAAlB,CADF,EAEEsK,OAAO,CAACzK,GAAR,CAAYwK,GAAG,CAACrK,GAAhB,CAFF,EAGEd,CAAC,GAAGsM,sBAAK,CAACG,KAAT,GAAiBzF,OAHpB,CAAA,CAAA;EAKD,KAAA;;EACD,IAAA,IAAI8B,GAAG,GAAG4B,0BAAS,CAACkC,QAAV,CACRJ,EAAE,CAAClD,GAAH,CAAOhB,OAAP,CAAekE,EAAE,CAACpB,OAAH,CAAW3F,KAAX,CAAiBiH,OAAjB,CAAA,CAA0B/L,GAA1B,CAA8B,IAAKkM,CAAAA,EAAnC,CAAf,CADQ,EAER,CAAC,CAFO,CAAV,CAAA;EAIA,IAAA,IAAI/D,GAAJ,EAAS0D,EAAE,CAACM,YAAH,CAAgBhE,GAAhB,CAAA,CAAA;EACV,GAAA;;EAEDiE,EAAAA,WAAW,CAACP,EAAD,EAAKrH,IAAL,EAAW;EACpB,IAAA,IAAA,CAAKoH,OAAL,CAAaC,EAAb,EAAiB,IAAIF,sBAAJ,CAAUF,yBAAQ,CAACrB,IAAT,CAAc5F,IAAd,CAAV,EAA+B,CAA/B,EAAkC,CAAlC,CAAjB,CAAA,CAAA;EACD,GAAA;;IAED6H,WAAW,CAACC,CAAD,EAAI;MACb,IAAIpK,KAAK,GAAG,IAAKkG,CAAAA,WAAL,CAAiB5D,IAAjB,CAAsB,CAAC,CAAvB,CAAZ;EAAA,QACExE,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAakD,KAAb,CADR;UAEEwB,KAAK,GAAG,IAAK0E,CAAAA,WAAL,CAAiB1E,KAAjB,CAAuB,CAAC,CAAxB,CAFV,CAAA;MAGA,IAAIsG,KAAK,GAAGhK,GAAG,CAACyB,WAAJ,CACVzB,GAAG,CAACW,WAAJ,CAAgB,IAAKyH,CAAAA,WAAL,CAAiBjI,GAAjB,GAAuBuD,KAAvC,EAA8C,IAAK2E,CAAAA,SAAL,CAAelI,GAAf,GAAqBuD,KAAnE,CADU,CAAZ,CAAA;;EAGA,IAAA,KAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2K,KAAK,CAAC1K,MAA1B,EAAkCD,CAAC,EAAnC,EACEiN,CAAC,CAACpK,KAAK,CAACuC,MAAN,CAAauF,KAAK,CAAC3K,CAAD,CAAlB,CAAD,EAAyBqE,KAAK,GAAGsG,KAAK,CAAC3K,CAAD,CAAtC,CAAD,CAAA;EACH,GAlJ0C;EAqJ3C;EACA;;;EACAwL,EAAAA,cAAc,GAAG;MACf,IAAI0B,SAAS,GAAG,IAAKnE,CAAAA,WAAL,CAAiBrG,KAAjB,CAAuB,CAAC,CAAxB,CAAhB;UACEyK,OAAO,GAAG,IAAKnE,CAAAA,SAAL,CAAetG,KAAf,CAAqB,CAAC,CAAtB,CADZ,CAAA;MAEA,IAAIT,IAAI,CAACC,GAAL,CAASgL,SAAT,EAAoBC,OAApB,CAA+B,GAAA,CAAnC,EAAsC,OAAO,KAAP,CAAA;MACtC,IAAIC,SAAS,GAAGF,SAAS,GAAG,IAAA,CAAKnE,WAAL,CAAiBK,SAAjB,CAA2BlF,KAA3B,CAAiCF,OAA7D;UACEqJ,OAAO,GAAGF,OAAO,GAAG,IAAA,CAAKnE,SAAL,CAAeI,SAAf,CAAyBlF,KAAzB,CAA+BF,OADrD,CAAA;EAEA,IAAA,OAAO/B,IAAI,CAACE,GAAL,CAASiL,SAAT,EAAoBC,OAApB,CAAA,IAAgC,IAAKrE,CAAAA,SAAL,CAAe7D,IAAf,CAAoB,CAAC,CAArB,EAAwB1B,UAA/D,CAAA;EACD,GA9J0C;EAiK3C;EACA;;;EACmB,EAAA,OAAZgI,YAAY,CAAC1C,WAAD,EAAcC,SAAS,GAAGD,WAA1B,EAAuC;EACxD,IAAA,IAAIpI,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAaoJ,WAAW,CAAC5D,IAAZ,CAAiB,CAAC,CAAlB,CAAb,CAAV;UACEd,KAAK,GAAG0E,WAAW,CAAC1E,KAAZ,CAAkB,CAAC,CAAnB,CADV,CAAA;MAEA,IAAIiJ,UAAU,GAAG3M,GAAG,CAACE,QAAJ,CAAakI,WAAW,CAACjI,GAAZ,GAAkBuD,KAA/B,CAAjB;UACEkJ,QAAQ,GAAG5M,GAAG,CAACE,QAAJ,CAAamI,SAAS,CAAClI,GAAV,GAAgBuD,KAA7B,CADb,CAAA;EAEA,IAAA,IAAIiF,GAAG,GAAGP,WAAW,CAAC5D,IAAZ,CAAiB,CAAjB,CAAV,CAAA;;EACA,IAAA,IAAImI,UAAU,CAACjN,GAAX,IAAkBkN,QAAQ,CAAClN,GAA/B,EAAoC;QAClC,IAAIiN,UAAU,CAACjN,GAAX,GAAiB,CAArB,EACE0I,WAAW,GAAGO,GAAG,CAAChB,OAAJ,CAAYjE,KAAK,GAAG1D,GAAG,CAACA,GAAJ,CAAQ2M,UAAU,CAAClN,IAAnB,CAApB,CAAd,CAAA;EACF,MAAA,IAAImN,QAAQ,CAAChN,MAAT,GAAkBI,GAAG,CAACD,MAA1B,EACEsI,SAAS,GAAGM,GAAG,CAAChB,OAAJ,CACVjE,KAAK,GAAG1D,GAAG,CAACA,GAAJ,CAAQA,GAAG,CAACF,KAAJ,IAAaE,GAAG,CAACD,MAAJ,GAAa,CAA1B,CAAA,GAA+B6M,QAAQ,CAACjN,KAAxC,GAAgD,CAAxD,CADE,CAAZ,CAAA;EAGH,KAPD,MAOO;QACL,IAAIiN,QAAQ,CAAClN,GAAT,GAAe,CAAnB,EACE2I,SAAS,GAAGM,GAAG,CAAChB,OAAJ,CAAYjE,KAAK,GAAG1D,GAAG,CAACA,GAAJ,CAAQ4M,QAAQ,CAACnN,IAAjB,CAApB,CAAZ,CAAA;EACF,MAAA,IAAIkN,UAAU,CAAC/M,MAAX,GAAoBI,GAAG,CAACD,MAA5B,EACEqI,WAAW,GAAGO,GAAG,CAAChB,OAAJ,CACZjE,KAAK,GAAG1D,GAAG,CAACA,GAAJ,CAAQA,GAAG,CAACF,KAAJ,IAAaE,GAAG,CAACD,MAAJ,GAAa,CAA1B,CAAA,GAA+B4M,UAAU,CAAChN,KAA1C,GAAkD,CAA1D,CADI,CAAd,CAAA;EAGH,KAAA;;EACD,IAAA,OAAO,IAAImK,aAAJ,CAAkB1B,WAAlB,EAA+BC,SAA/B,CAAP,CAAA;EACD,GAzL0C;EA4L3C;EACA;;;EACAsC,EAAAA,cAAc,GAAG;EACf,IAAA,IAAI3K,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAa,IAAA,CAAKoJ,WAAL,CAAiB5D,IAAjB,CAAsB,CAAC,CAAvB,CAAb,CAAV;UACEd,KAAK,GAAG,IAAK0E,CAAAA,WAAL,CAAiB1E,KAAjB,CAAuB,CAAC,CAAxB,CADV,CAAA;EAEA,IAAA,IAAImJ,UAAU,GAAG7M,GAAG,CAACO,QAAJ,CAAa,IAAK6H,CAAAA,WAAL,CAAiBjI,GAAjB,GAAuBuD,KAApC,CAAjB;EAAA,QACEoJ,QAAQ,GAAG9M,GAAG,CAACO,QAAJ,CAAa,IAAK8H,CAAAA,SAAL,CAAelI,GAAf,GAAqBuD,KAAlC,CADb,CAAA;MAEA,IAAIpC,IAAI,CAACC,GAAL,CAASsL,UAAT,EAAqBC,QAArB,CAAiC,GAAA,CAArC,EAAwC,OAAO,KAAP,CAAA;MACxC,IAAIC,WAAW,GAAGF,UAAU,GAAG,IAAA,CAAKzE,WAAL,CAAiBK,SAAjB,CAA2BlF,KAA3B,CAAiCH,OAAhE;UACE4J,SAAS,GAAGF,QAAQ,GAAG,IAAA,CAAKzE,SAAL,CAAeI,SAAf,CAAyBlF,KAAzB,CAA+BH,OADxD,CAAA;MAEA,OAAO9B,IAAI,CAACE,GAAL,CAASuL,WAAT,EAAsBC,SAAtB,CAAA,IAAoChN,GAAG,CAACF,KAA/C,CAAA;EACD,GAAA;;IAEDmN,EAAE,CAACC,KAAD,EAAQ;MACR,OACEA,KAAK,YAAYpD,aAAjB,IACAoD,KAAK,CAAC9E,WAAN,CAAkBjI,GAAlB,IAAyB,IAAKiI,CAAAA,WAAL,CAAiBjI,GAD1C,IAEA+M,KAAK,CAAC7E,SAAN,CAAgBlI,GAAhB,IAAuB,IAAA,CAAKkI,SAAL,CAAelI,GAHxC,CAAA;EAKD,GA/M0C;EAkN3C;EACA;;;EACmB,EAAA,OAAZyK,YAAY,CAACxC,WAAD,EAAcC,SAAS,GAAGD,WAA1B,EAAuC;EACxD,IAAA,IAAIpI,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAaoJ,WAAW,CAAC5D,IAAZ,CAAiB,CAAC,CAAlB,CAAb,CAAV;UACEd,KAAK,GAAG0E,WAAW,CAAC1E,KAAZ,CAAkB,CAAC,CAAnB,CADV,CAAA;MAEA,IAAIiJ,UAAU,GAAG3M,GAAG,CAACE,QAAJ,CAAakI,WAAW,CAACjI,GAAZ,GAAkBuD,KAA/B,CAAjB;UACEkJ,QAAQ,GAAG5M,GAAG,CAACE,QAAJ,CAAamI,SAAS,CAAClI,GAAV,GAAgBuD,KAA7B,CADb,CAAA;EAEA,IAAA,IAAIiF,GAAG,GAAGP,WAAW,CAAC5D,IAAZ,CAAiB,CAAjB,CAAV,CAAA;;EACA,IAAA,IAAImI,UAAU,CAAClN,IAAX,IAAmBmN,QAAQ,CAACnN,IAAhC,EAAsC;QACpC,IAAIkN,UAAU,CAAClN,IAAX,GAAkB,CAAtB,EACE2I,WAAW,GAAGO,GAAG,CAAChB,OAAJ,CAAYjE,KAAK,GAAG1D,GAAG,CAACA,GAAJ,CAAQ2M,UAAU,CAACjN,GAAX,GAAiBM,GAAG,CAACF,KAA7B,CAApB,CAAd,CAAA;EACF,MAAA,IAAI8M,QAAQ,CAACjN,KAAT,GAAiBK,GAAG,CAACF,KAAzB,EACEuI,SAAS,GAAGM,GAAG,CAAChB,OAAJ,CACVjE,KAAK,GAAG1D,GAAG,CAACA,GAAJ,CAAQA,GAAG,CAACF,KAAJ,IAAa8M,QAAQ,CAAClN,GAAT,GAAe,CAA5B,CAAiC,GAAA,CAAzC,CADE,CAAZ,CAAA;EAGH,KAPD,MAOO;QACL,IAAIkN,QAAQ,CAACnN,IAAT,GAAgB,CAApB,EACE4I,SAAS,GAAGM,GAAG,CAAChB,OAAJ,CAAYjE,KAAK,GAAG1D,GAAG,CAACA,GAAJ,CAAQ4M,QAAQ,CAAClN,GAAT,GAAeM,GAAG,CAACF,KAA3B,CAApB,CAAZ,CAAA;EACF,MAAA,IAAI6M,UAAU,CAAChN,KAAX,GAAmBK,GAAG,CAACF,KAA3B,EACEsI,WAAW,GAAGO,GAAG,CAAChB,OAAJ,CACZjE,KAAK,GAAG1D,GAAG,CAACA,GAAJ,CAAQA,GAAG,CAACF,KAAJ,IAAa6M,UAAU,CAACjN,GAAX,GAAiB,CAA9B,CAAmC,GAAA,CAA3C,CADI,CAAd,CAAA;EAGH,KAAA;;EACD,IAAA,OAAO,IAAIoK,aAAJ,CAAkB1B,WAAlB,EAA+BC,SAA/B,CAAP,CAAA;EACD,GAAA;;EAED8E,EAAAA,MAAM,GAAG;MACP,OAAO;EACL1K,MAAAA,IAAI,EAAE,MADD;EAEL2K,MAAAA,MAAM,EAAE,IAAA,CAAKhF,WAAL,CAAiBjI,GAFpB;QAGLkN,IAAI,EAAE,IAAKhF,CAAAA,SAAL,CAAelI,GAAAA;OAHvB,CAAA;EAKD,GAAA;;EAEc,EAAA,OAARmN,QAAQ,CAAC3E,GAAD,EAAM4E,IAAN,EAAY;MACzB,OAAO,IAAIzD,aAAJ,CAAkBnB,GAAG,CAAChB,OAAJ,CAAY4F,IAAI,CAACH,MAAjB,CAAlB,EAA4CzE,GAAG,CAAChB,OAAJ,CAAY4F,IAAI,CAACF,IAAjB,CAA5C,CAAP,CAAA;EACD,GAtP0C;;;IAyP9B,OAAN9B,MAAM,CAAC5C,GAAD,EAAM6E,UAAN,EAAkBC,QAAQ,GAAGD,UAA7B,EAAyC;EACpD,IAAA,OAAO,IAAI1D,aAAJ,CAAkBnB,GAAG,CAAChB,OAAJ,CAAY6F,UAAZ,CAAlB,EAA2C7E,GAAG,CAAChB,OAAJ,CAAY8F,QAAZ,CAA3C,CAAP,CAAA;EACD,GAAA;;EAEDC,EAAAA,WAAW,GAAG;EACZ,IAAA,OAAO,IAAIC,YAAJ,CAAiB,IAAA,CAAKvF,WAAL,CAAiBjI,GAAlC,EAAuC,IAAKkI,CAAAA,SAAL,CAAelI,GAAtD,CAAP,CAAA;EACD,GAAA;;EA/P0C,CAAA;EAkQ7C2J,aAAa,CAAC8D,SAAd,CAAwBC,OAAxB,GAAkC,KAAlC,CAAA;AAEA9D,4BAAS,CAAC+D,MAAV,CAAiB,MAAjB,EAAyBhE,aAAzB,CAAA,CAAA;;EAEA,MAAM6D,YAAN,CAAmB;EACjBnO,EAAAA,WAAW,CAAC4N,MAAD,EAASC,IAAT,EAAe;MACxB,IAAKD,CAAAA,MAAL,GAAcA,MAAd,CAAA;MACA,IAAKC,CAAAA,IAAL,GAAYA,IAAZ,CAAA;EACD,GAAA;;IACDrN,GAAG,CAACyK,OAAD,EAAU;EACX,IAAA,OAAO,IAAIkD,YAAJ,CAAiBlD,OAAO,CAACzK,GAAR,CAAY,IAAKoN,CAAAA,MAAjB,CAAjB,EAA2C3C,OAAO,CAACzK,GAAR,CAAY,IAAKqN,CAAAA,IAAjB,CAA3C,CAAP,CAAA;EACD,GAAA;;IACD1F,OAAO,CAACgB,GAAD,EAAM;MACX,IAAIP,WAAW,GAAGO,GAAG,CAAChB,OAAJ,CAAY,IAAA,CAAKyF,MAAjB,CAAlB;UACE/E,SAAS,GAAGM,GAAG,CAAChB,OAAJ,CAAY,IAAA,CAAK0F,IAAjB,CADd,CAAA;EAEA,IAAA,IACEjF,WAAW,CAACW,MAAZ,CAAmBtG,IAAnB,CAAwBC,IAAxB,CAA6BC,SAA7B,IAA0C,KAA1C,IACA0F,SAAS,CAACU,MAAV,CAAiBtG,IAAjB,CAAsBC,IAAtB,CAA2BC,SAA3B,IAAwC,KADxC,IAEAyF,WAAW,CAACrG,KAAZ,EAAsBqG,GAAAA,WAAW,CAACW,MAAZ,CAAmBjG,UAFzC,IAGAuF,SAAS,CAACtG,KAAV,EAAA,GAAoBsG,SAAS,CAACU,MAAV,CAAiBjG,UAHrC,IAIAmG,WAAW,CAACb,WAAD,EAAcC,SAAd,CALb,EAOE,OAAO,IAAIyB,aAAJ,CAAkB1B,WAAlB,EAA+BC,SAA/B,CAAP,CAPF,KAQK,OAAO0B,0BAAS,CAACgE,IAAV,CAAe1F,SAAf,EAA0B,CAA1B,CAAP,CAAA;EACN,GAAA;;EApBgB,CAAA;;EAuBZ,SAAS2F,iBAAT,CAA2BjG,KAA3B,EAAkC;IACvC,IAAI,EAAEA,KAAK,CAACE,SAAN,YAA2B6B,aAA7B,CAAJ,EAAiD,OAAO,IAAP,CAAA;IACjD,IAAIE,KAAK,GAAG,EAAZ,CAAA;IACAjC,KAAK,CAACE,SAAN,CAAgBoE,WAAhB,CAA4B,CAAC7H,IAAD,EAAOrE,GAAP,KAAe;EACzC6J,IAAAA,KAAK,CAAChI,IAAN,CACEiM,0BAAU,CAACzJ,IAAX,CAAgBrE,GAAhB,EAAqBA,GAAG,GAAGqE,IAAI,CAAClC,QAAhC,EAA0C;EAAE4L,MAAAA,KAAK,EAAE,cAAA;EAAT,KAA1C,CADF,CAAA,CAAA;KADF,CAAA,CAAA;IAKA,OAAOC,6BAAa,CAAC5C,MAAd,CAAqBxD,KAAK,CAACY,GAA3B,EAAgCqB,KAAhC,CAAP,CAAA;EACD,CAAA;;EAED,SAASoE,uBAAT,CAAiC;IAAE7D,KAAF;EAASC,EAAAA,GAAAA;EAAT,CAAjC,EAAiD;IAC/C,IAAID,KAAK,CAACpK,GAAN,IAAaqK,GAAG,CAACrK,GAAjB,IAAwBoK,KAAK,CAACpK,GAAN,GAAYoK,KAAK,CAACpK,GAAN,GAAY,CAApD,EAAuD,OAAO,KAAP,CADR;;EAE/C,EAAA,IAAIkO,SAAS,GAAG9D,KAAK,CAACpK,GAAtB;EAAA,MACEmO,QAAQ,GAAG9D,GAAG,CAACrK,GADjB;EAAA,MAEEuH,KAAK,GAAG6C,KAAK,CAAC7C,KAFhB,CAAA;;IAGA,OAAOA,KAAK,IAAI,CAAhB,EAAmBA,KAAK,IAAI2G,SAAS,EAArC,EACE,IAAI9D,KAAK,CAAC/B,KAAN,CAAYd,KAAK,GAAG,CAApB,CAAyB6C,GAAAA,KAAK,CAACnB,GAAN,CAAU1B,KAAV,CAA7B,EAA+C,MAAA;;EACjD,EAAA,KAAK,IAAID,CAAC,GAAG+C,GAAG,CAAC9C,KAAjB,EAAwBD,CAAC,IAAI,CAA7B,EAAgCA,CAAC,IAAI6G,QAAQ,EAA7C,EACE,IAAI9D,GAAG,CAAC5C,MAAJ,CAAWH,CAAC,GAAG,CAAf,CAAoB+C,GAAAA,GAAG,CAAC9G,KAAJ,CAAU+D,CAAV,CAAxB,EAAsC,MAAA;;EACxC,EAAA,OACE4G,SAAS,IAAIC,QAAb,IACA,WAAYjJ,CAAAA,IAAZ,CAAiBkF,KAAK,CAAC/F,IAAN,CAAWkD,KAAX,CAAkBjF,CAAAA,IAAlB,CAAuBC,IAAvB,CAA4BC,SAA7C,CAFF,CAAA;EAID,CAAA;;EAED,SAAS4L,0BAAT,CAAoC;IAAEhE,KAAF;EAASC,EAAAA,GAAAA;EAAT,CAApC,EAAoD;EAClD,EAAA,IAAIgE,oBAAJ,CAAA;EACA,EAAA,IAAIC,kBAAJ,CAAA;;EAEA,EAAA,KAAK,IAAIpP,CAAC,GAAGkL,KAAK,CAAC7C,KAAnB,EAA0BrI,CAAC,GAAG,CAA9B,EAAiCA,CAAC,EAAlC,EAAsC;EACpC,IAAA,IAAImF,IAAI,GAAG+F,KAAK,CAAC/F,IAAN,CAAWnF,CAAX,CAAX,CAAA;;EACA,IAAA,IACEmF,IAAI,CAAC/B,IAAL,CAAUC,IAAV,CAAeC,SAAf,KAA6B,MAA7B,IACA6B,IAAI,CAAC/B,IAAL,CAAUC,IAAV,CAAeC,SAAf,KAA6B,aAF/B,EAGE;EACA6L,MAAAA,oBAAoB,GAAGhK,IAAvB,CAAA;EACA,MAAA,MAAA;EACD,KAAA;EACF,GAAA;;EAED,EAAA,KAAK,IAAInF,CAAC,GAAGmL,GAAG,CAAC9C,KAAjB,EAAwBrI,CAAC,GAAG,CAA5B,EAA+BA,CAAC,EAAhC,EAAoC;EAClC,IAAA,IAAImF,IAAI,GAAGgG,GAAG,CAAChG,IAAJ,CAASnF,CAAT,CAAX,CAAA;;EACA,IAAA,IACEmF,IAAI,CAAC/B,IAAL,CAAUC,IAAV,CAAeC,SAAf,KAA6B,MAA7B,IACA6B,IAAI,CAAC/B,IAAL,CAAUC,IAAV,CAAeC,SAAf,KAA6B,aAF/B,EAGE;EACA8L,MAAAA,kBAAkB,GAAGjK,IAArB,CAAA;EACA,MAAA,MAAA;EACD,KAAA;EACF,GAAA;;IAED,OAAOgK,oBAAoB,KAAKC,kBAAzB,IAA+CjE,GAAG,CAACkE,YAAJ,KAAqB,CAA3E,CAAA;EACD,CAAA;;EAEM,SAASC,kBAAT,CAA4B5G,KAA5B,EAAmC8D,EAAnC,EAAuC+C,uBAAvC,EAAgE;EACrE,EAAA,IAAIzG,GAAG,GAAG,CAAC0D,EAAE,IAAI9D,KAAP,EAAcE,SAAxB;EAAA,MACEU,GAAG,GAAG,CAACkD,EAAE,IAAI9D,KAAP,EAAcY,GADtB;EAAA,MAEEkG,SAFF;EAAA,MAGExH,IAHF,CAAA;;EAIA,EAAA,IAAIc,GAAG,YAAY2G,8BAAf,KAAiCzH,IAAI,GAAGc,GAAG,CAAC3D,IAAJ,CAAS/B,IAAT,CAAcC,IAAd,CAAmBC,SAA3D,CAAJ,EAA2E;EACzE,IAAA,IAAI0E,IAAI,IAAI,MAAR,IAAkBA,IAAI,IAAI,aAA9B,EAA6C;QAC3CwH,SAAS,GAAG/E,aAAa,CAACyB,MAAd,CAAqB5C,GAArB,EAA0BR,GAAG,CAACiC,IAA9B,CAAZ,CAAA;EACD,KAFD,MAEO,IAAI/C,IAAI,IAAI,KAAZ,EAAmB;QACxB,IAAI0H,KAAK,GAAGpG,GAAG,CAAChB,OAAJ,CAAYQ,GAAG,CAACiC,IAAJ,GAAW,CAAvB,CAAZ,CAAA;QACAyE,SAAS,GAAG/E,aAAa,CAACc,YAAd,CAA2BmE,KAA3B,EAAkCA,KAAlC,CAAZ,CAAA;EACD,KAHM,MAGA,IAAI,CAACH,uBAAL,EAA8B;QACnC,IAAI5O,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAamJ,GAAG,CAAC3D,IAAjB,CAAV;EAAA,UACEd,KAAK,GAAGyE,GAAG,CAACiC,IAAJ,GAAW,CADrB,CAAA;EAEA,MAAA,IAAI4E,QAAQ,GAAGtL,KAAK,GAAG1D,GAAG,CAACA,GAAJ,CAAQA,GAAG,CAACF,KAAJ,GAAYE,GAAG,CAACD,MAAhB,GAAyB,CAAjC,CAAvB,CAAA;EACA8O,MAAAA,SAAS,GAAG/E,aAAa,CAACyB,MAAd,CAAqB5C,GAArB,EAA0BjF,KAAK,GAAG,CAAlC,EAAqCsL,QAArC,CAAZ,CAAA;EACD,KAAA;KAXH,MAYO,IAAI7G,GAAG,YAAY4C,8BAAf,IAAgCqD,uBAAuB,CAACjG,GAAD,CAA3D,EAAkE;MACvE0G,SAAS,GAAG9D,8BAAa,CAACQ,MAAd,CAAqB5C,GAArB,EAA0BR,GAAG,CAACiC,IAA9B,CAAZ,CAAA;KADK,MAEA,IAAIjC,GAAG,YAAY4C,8BAAf,IAAgCwD,0BAA0B,CAACpG,GAAD,CAA9D,EAAqE;MAC1E0G,SAAS,GAAG9D,8BAAa,CAACQ,MAAd,CAAqB5C,GAArB,EAA0BR,GAAG,CAACoC,KAAJ,CAAU7G,KAAV,EAA1B,EAA6CyE,GAAG,CAACoC,KAAJ,CAAUnB,GAAV,EAA7C,CAAZ,CAAA;EACD,GAAA;;EACD,EAAA,IAAIyF,SAAJ,EAAe,CAAChD,EAAE,KAAKA,EAAE,GAAG9D,KAAK,CAAC8D,EAAhB,CAAH,EAAwBM,YAAxB,CAAqC0C,SAArC,CAAA,CAAA;EACf,EAAA,OAAOhD,EAAP,CAAA;EACD;;EClYD;EAsBA;EACA;EACA;;EACO,SAASoD,WAAT,CAAqBnK,KAArB,EAA4B;EACjC,EAAA,IAAI,CAACA,KAAK,CAACwF,IAAX,EAAiB,OAAO,IAAP,CAAA;IACjB,IAAI;MAAEjE,OAAF;MAAW6I,SAAX;EAAsBC,IAAAA,OAAAA;EAAtB,GAAA,GAAkCrK,KAAtC,CAAA;;IACA,OACEuB,OAAO,CAACvD,UAAR,IAAsB,CAAtB,KACEoM,SAAS,GAAG,CAAZ,IAAiBC,OAAO,GAAG,CAA5B,IACC9I,OAAO,CAACqC,UAAR,CAAmBjG,IAAnB,CAAwBC,IAAxB,CAA6BC,SAA7B,IAA0C,OAF5C,CADF,EAIE;MACAuM,SAAS,EAAA,CAAA;MACTC,OAAO,EAAA,CAAA;EACP9I,IAAAA,OAAO,GAAGA,OAAO,CAACqC,UAAR,CAAmBrC,OAA7B,CAAA;EACD,GAAA;;EACD,EAAA,IAAI+I,KAAK,GAAG/I,OAAO,CAACqC,UAApB;QACErB,IAAI,GAAG+H,KAAK,CAAC3M,IAAN,CAAWC,IAAX,CAAgBC,SADzB,CAAA;EAEA,EAAA,IAAIuE,MAAM,GAAGkI,KAAK,CAAC3M,IAAN,CAAWyE,MAAxB;QACE+D,IAAI,GAAG,EADT,CAAA;;IAEA,IAAI5D,IAAI,IAAI,KAAZ,EAAmB;EACjB,IAAA,KAAK,IAAIhI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgH,OAAO,CAACvD,UAA5B,EAAwCzD,CAAC,EAAzC,EAA6C;QAC3C,IAAI2K,KAAK,GAAG3D,OAAO,CAAChE,KAAR,CAAchD,CAAd,EAAiBgH,OAA7B,CAAA;EACA,MAAA,IAAI5G,IAAI,GAAGJ,CAAC,GAAG,CAAH,GAAOiC,IAAI,CAACE,GAAL,CAAS,CAAT,EAAY0N,SAAS,GAAG,CAAxB,CAAnB,CAAA;QACA,IAAIvP,KAAK,GAAGN,CAAC,GAAGgH,OAAO,CAACvD,UAAR,GAAqB,CAAzB,GAA6B,CAA7B,GAAiCxB,IAAI,CAACE,GAAL,CAAS,CAAT,EAAY2N,OAAO,GAAG,CAAtB,CAA7C,CAAA;QACA,IAAI1P,IAAI,IAAIE,KAAZ,EACEqK,KAAK,GAAGqF,QAAQ,CACdpI,cAAc,CAACC,MAAD,CAAd,CAAuBrF,GADT,EAEd,IAAI8J,sBAAJ,CAAU3B,KAAV,EAAiBvK,IAAjB,EAAuBE,KAAvB,CAFc,CAAR,CAGN0G,OAHF,CAAA;QAIF4E,IAAI,CAACjJ,IAAL,CAAUgI,KAAV,CAAA,CAAA;EACD,KAAA;KAXH,MAYO,IAAI3C,IAAI,IAAI,MAAR,IAAkBA,IAAI,IAAI,aAA9B,EAA6C;EAClD4D,IAAAA,IAAI,CAACjJ,IAAL,CACEkN,SAAS,IAAIC,OAAb,GACIE,QAAQ,CACNpI,cAAc,CAACC,MAAD,CAAd,CAAuBrF,GADjB,EAEN,IAAI8J,sBAAJ,CAAUtF,OAAV,EAAmB6I,SAAnB,EAA8BC,OAA9B,CAFM,CAAR,CAGE9I,OAJN,GAKIA,OANN,CAAA,CAAA;EAQD,GATM,MASA;EACL,IAAA,OAAO,IAAP,CAAA;EACD,GAAA;;EACD,EAAA,OAAOiJ,iBAAiB,CAACpI,MAAD,EAAS+D,IAAT,CAAxB,CAAA;EACD;EAGD;EACA;;EACA,SAASqE,iBAAT,CAA2BpI,MAA3B,EAAmC+D,IAAnC,EAAyC;IACvC,IAAI7F,MAAM,GAAG,EAAb,CAAA;;EACA,EAAA,KAAK,IAAI/F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4L,IAAI,CAAC3L,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;EACpC,IAAA,IAAIwC,GAAG,GAAGoJ,IAAI,CAAC5L,CAAD,CAAd,CAAA;;EACA,IAAA,KAAK,IAAIgB,CAAC,GAAGwB,GAAG,CAACiB,UAAJ,GAAiB,CAA9B,EAAiCzC,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;QAC5C,IAAI;UAAEgD,OAAF;EAAWD,QAAAA,OAAAA;EAAX,OAAA,GAAuBvB,GAAG,CAACQ,KAAJ,CAAUhC,CAAV,EAAakD,KAAxC,CAAA;;QACA,KAAK,IAAIgM,CAAC,GAAGlQ,CAAb,EAAgBkQ,CAAC,GAAGlQ,CAAC,GAAGgE,OAAxB,EAAiCkM,CAAC,EAAlC,EACEnK,MAAM,CAACmK,CAAD,CAAN,GAAY,CAACnK,MAAM,CAACmK,CAAD,CAAN,IAAa,CAAd,IAAmBnM,OAA/B,CAAA;EACH,KAAA;EACF,GAAA;;IACD,IAAItD,KAAK,GAAG,CAAZ,CAAA;;IACA,KAAK,IAAIyP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnK,MAAM,CAAC9F,MAA3B,EAAmCiQ,CAAC,EAApC,EAAwCzP,KAAK,GAAGwB,IAAI,CAACE,GAAL,CAAS1B,KAAT,EAAgBsF,MAAM,CAACmK,CAAD,CAAtB,CAAR,CAAA;;EACxC,EAAA,KAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnK,MAAM,CAAC9F,MAA3B,EAAmCiQ,CAAC,EAApC,EAAwC;EACtC,IAAA,IAAIA,CAAC,IAAItE,IAAI,CAAC3L,MAAd,EAAsB2L,IAAI,CAACjJ,IAAL,CAAUyJ,yBAAQ,CAACK,KAAnB,CAAA,CAAA;;EACtB,IAAA,IAAI1G,MAAM,CAACmK,CAAD,CAAN,GAAYzP,KAAhB,EAAuB;QACrB,IAAIgM,KAAK,GAAG7E,cAAc,CAACC,MAAD,CAAd,CAAuB3C,IAAvB,CAA4B+G,aAA5B,EAAZ;YACEtB,KAAK,GAAG,EADV,CAAA;;EAEA,MAAA,KAAK,IAAI3K,CAAC,GAAG+F,MAAM,CAACmK,CAAD,CAAnB,EAAwBlQ,CAAC,GAAGS,KAA5B,EAAmCT,CAAC,EAApC,EAAwC2K,KAAK,CAAChI,IAAN,CAAW8J,KAAX,CAAA,CAAA;;EACxCb,MAAAA,IAAI,CAACsE,CAAD,CAAJ,GAAUtE,IAAI,CAACsE,CAAD,CAAJ,CAAQC,MAAR,CAAe/D,yBAAQ,CAACrB,IAAT,CAAcJ,KAAd,CAAf,CAAV,CAAA;EACD,KAAA;EACF,GAAA;;IACD,OAAO;MAAEjK,MAAM,EAAEkL,IAAI,CAAC3L,MAAf;MAAuBQ,KAAvB;EAA8BmL,IAAAA,IAAAA;KAArC,CAAA;EACD,CAAA;;EAEM,SAASoE,QAAT,CAAkBI,QAAlB,EAA4B3K,KAA5B,EAAmC;EACxC,EAAA,IAAIN,IAAI,GAAGiL,QAAQ,CAACnE,aAAT,EAAX,CAAA;EACA,EAAA,IAAIO,EAAE,GAAG,IAAI6D,8BAAJ,CAAclL,IAAd,EAAoBoH,OAApB,CAA4B,CAA5B,EAA+BpH,IAAI,CAAC6B,OAAL,CAAaiE,IAA5C,EAAkDxF,KAAlD,CAAT,CAAA;IACA,OAAO+G,EAAE,CAAClD,GAAV,CAAA;EACD;EAGD;EACA;EACA;;EACO,SAASgH,SAAT,CAAmB;IAAE7P,KAAF;IAASC,MAAT;EAAiBkL,EAAAA,IAAAA;EAAjB,CAAnB,EAA4C2E,QAA5C,EAAsDC,SAAtD,EAAiE;IACtE,IAAI/P,KAAK,IAAI8P,QAAb,EAAuB;MACrB,IAAIE,KAAK,GAAG,EAAZ;UACEC,OAAO,GAAG,EADZ,CAAA;;EAEA,IAAA,KAAK,IAAIlO,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGoJ,IAAI,CAAC3L,MAA7B,EAAqCuC,GAAG,EAAxC,EAA4C;EAC1C,MAAA,IAAImO,IAAI,GAAG/E,IAAI,CAACpJ,GAAD,CAAf;YACEmI,KAAK,GAAG,EADV,CAAA;;QAEA,KAAK,IAAIlI,GAAG,GAAGgO,KAAK,CAACjO,GAAD,CAAL,IAAc,CAAxB,EAA2BxC,CAAC,GAAG,CAApC,EAAuCyC,GAAG,GAAG8N,QAA7C,EAAuDvQ,CAAC,EAAxD,EAA4D;UAC1D,IAAIkF,IAAI,GAAGyL,IAAI,CAAC3N,KAAL,CAAWhD,CAAC,GAAG2Q,IAAI,CAAClN,UAApB,CAAX,CAAA;UACA,IAAIhB,GAAG,GAAGyC,IAAI,CAAChB,KAAL,CAAWH,OAAjB,GAA2BwM,QAA/B,EACErL,IAAI,GAAGA,IAAI,CAAC9B,IAAL,CAAU8I,MAAV,CACLhC,aAAa,CACXhF,IAAI,CAAChB,KADM,EAEXgB,IAAI,CAAChB,KAAL,CAAWH,OAFA,EAGXtB,GAAG,GAAGyC,IAAI,CAAChB,KAAL,CAAWH,OAAjB,GAA2BwM,QAHhB,CADR,EAMLrL,IAAI,CAAC8B,OANA,CAAP,CAAA;UAQF2D,KAAK,CAAChI,IAAN,CAAWuC,IAAX,CAAA,CAAA;EACAzC,QAAAA,GAAG,IAAIyC,IAAI,CAAChB,KAAL,CAAWH,OAAlB,CAAA;;EACA,QAAA,KAAK,IAAI/C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkE,IAAI,CAAChB,KAAL,CAAWF,OAA/B,EAAwChD,CAAC,EAAzC,EACEyP,KAAK,CAACjO,GAAG,GAAGxB,CAAP,CAAL,GAAiB,CAACyP,KAAK,CAACjO,GAAG,GAAGxB,CAAP,CAAL,IAAkB,CAAnB,IAAwBkE,IAAI,CAAChB,KAAL,CAAWH,OAApD,CAAA;EACH,OAAA;;QACD2M,OAAO,CAAC/N,IAAR,CAAayJ,yBAAQ,CAACrB,IAAT,CAAcJ,KAAd,CAAb,CAAA,CAAA;EACD,KAAA;;EACDiB,IAAAA,IAAI,GAAG8E,OAAP,CAAA;EACAjQ,IAAAA,KAAK,GAAG8P,QAAR,CAAA;EACD,GAAA;;IAED,IAAI7P,MAAM,IAAI8P,SAAd,EAAyB;MACvB,IAAIE,OAAO,GAAG,EAAd,CAAA;;EACA,IAAA,KAAK,IAAIlO,GAAG,GAAG,CAAV,EAAaxC,CAAC,GAAG,CAAtB,EAAyBwC,GAAG,GAAGgO,SAA/B,EAA0ChO,GAAG,EAAIxC,EAAAA,CAAC,EAAlD,EAAsD;QACpD,IAAI2K,KAAK,GAAG,EAAZ;EAAA,UACEiG,MAAM,GAAGhF,IAAI,CAAC5L,CAAC,GAAGU,MAAL,CADf,CAAA;;EAEA,MAAA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4P,MAAM,CAACnN,UAA3B,EAAuCzC,CAAC,EAAxC,EAA4C;EAC1C,QAAA,IAAIkE,IAAI,GAAG0L,MAAM,CAAC5N,KAAP,CAAahC,CAAb,CAAX,CAAA;UACA,IAAIwB,GAAG,GAAG0C,IAAI,CAAChB,KAAL,CAAWF,OAAjB,GAA2BwM,SAA/B,EACEtL,IAAI,GAAGA,IAAI,CAAC9B,IAAL,CAAU8I,MAAV,CACLjC,OAAO,CACL/E,IAAI,CAAChB,KADA,EAEL,SAFK,EAGLjC,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYqO,SAAS,GAAGtL,IAAI,CAAChB,KAAL,CAAWF,OAAnC,CAHK,CADF,EAMLkB,IAAI,CAAC8B,OANA,CAAP,CAAA;UAQF2D,KAAK,CAAChI,IAAN,CAAWuC,IAAX,CAAA,CAAA;EACD,OAAA;;QACDwL,OAAO,CAAC/N,IAAR,CAAayJ,yBAAQ,CAACrB,IAAT,CAAcJ,KAAd,CAAb,CAAA,CAAA;EACD,KAAA;;EACDiB,IAAAA,IAAI,GAAG8E,OAAP,CAAA;EACAhQ,IAAAA,MAAM,GAAG8P,SAAT,CAAA;EACD,GAAA;;IAED,OAAO;MAAE/P,KAAF;MAASC,MAAT;EAAiBkL,IAAAA,IAAAA;KAAxB,CAAA;EACD;EAGD;;EACA,SAASiF,SAAT,CAAmBrE,EAAnB,EAAuB7L,GAAvB,EAA4BkC,KAA5B,EAAmCwB,KAAnC,EAA0C5D,KAA1C,EAAiDC,MAAjD,EAAyDgM,OAAzD,EAAkE;IAChE,IAAI7E,MAAM,GAAG2E,EAAE,CAAClD,GAAH,CAAOlG,IAAP,CAAYyE,MAAzB;EAAA,MACEiJ,KAAK,GAAGlJ,cAAc,CAACC,MAAD,CADxB;EAAA,MAEE4E,KAFF;EAAA,MAGEsE,SAHF,CAAA;;EAIA,EAAA,IAAItQ,KAAK,GAAGE,GAAG,CAACF,KAAhB,EAAuB;EACrB,IAAA,KAAK,IAAI+B,GAAG,GAAG,CAAV,EAAaO,MAAM,GAAG,CAA3B,EAA8BP,GAAG,GAAG7B,GAAG,CAACD,MAAxC,EAAgD8B,GAAG,EAAnD,EAAuD;EACrD,MAAA,IAAIqB,OAAO,GAAGhB,KAAK,CAACG,KAAN,CAAYR,GAAZ,CAAd,CAAA;QACAO,MAAM,IAAIc,OAAO,CAACZ,QAAlB,CAAA;QACA,IAAI0H,KAAK,GAAG,EAAZ;EAAA,UACEqG,GADF,CAAA;EAEA,MAAA,IAAInN,OAAO,CAAC2F,SAAR,IAAqB,IAArB,IAA6B3F,OAAO,CAAC2F,SAAR,CAAkBpG,IAAlB,IAA0B0N,KAAK,CAAC5L,IAAjE,EACE8L,GAAG,GAAGvE,KAAK,KAAKA,KAAK,GAAGqE,KAAK,CAAC5L,IAAN,CAAW+G,aAAX,EAAb,CAAX,CADF,KAEK+E,GAAG,GAAGD,SAAS,KAAKA,SAAS,GAAGD,KAAK,CAACtG,WAAN,CAAkByB,aAAlB,EAAjB,CAAf,CAAA;;EACL,MAAA,KAAK,IAAIjM,CAAC,GAAGW,GAAG,CAACF,KAAjB,EAAwBT,CAAC,GAAGS,KAA5B,EAAmCT,CAAC,EAApC,EAAwC2K,KAAK,CAAChI,IAAN,CAAWqO,GAAX,CAAA,CAAA;;QACxCxE,EAAE,CAACyE,MAAH,CAAUzE,EAAE,CAACpB,OAAH,CAAW3F,KAAX,CAAiBiH,OAAjB,EAA0B/L,GAA1B,CAA8BoC,MAAM,GAAG,CAAT,GAAasB,KAA3C,CAAV,EAA6DsG,KAA7D,CAAA,CAAA;EACD,KAAA;EACF,GAAA;;EACD,EAAA,IAAIjK,MAAM,GAAGC,GAAG,CAACD,MAAjB,EAAyB;MACvB,IAAIiK,KAAK,GAAG,EAAZ,CAAA;;EACA,IAAA,KACE,IAAI3K,CAAC,GAAG,CAAR,EAAWqE,KAAK,GAAG,CAAC1D,GAAG,CAACD,MAAJ,GAAa,CAAd,IAAmBC,GAAG,CAACF,KAD5C,EAEET,CAAC,GAAGiC,IAAI,CAACE,GAAL,CAASxB,GAAG,CAACF,KAAb,EAAoBA,KAApB,CAFN,EAGET,CAAC,EAHH,EAIE;QACA,IAAIkR,MAAM,GACRlR,CAAC,IAAIW,GAAG,CAACF,KAAT,GACI,KADJ,GAEIoC,KAAK,CAACuC,MAAN,CAAazE,GAAG,CAACA,GAAJ,CAAQ0D,KAAK,GAAGrE,CAAhB,CAAb,CAAA,CAAiCoD,IAAjC,IAAyC0N,KAAK,CAACtG,WAHrD,CAAA;QAIAG,KAAK,CAAChI,IAAN,CACEuO,MAAM,GACFH,SAAS,KAAKA,SAAS,GAAGD,KAAK,CAACtG,WAAN,CAAkByB,aAAlB,EAAjB,CADP,GAEFQ,KAAK,KAAKA,KAAK,GAAGqE,KAAK,CAAC5L,IAAN,CAAW+G,aAAX,EAAb,CAHX,CAAA,CAAA;EAKD,KAAA;;EAED,IAAA,IAAIkF,QAAQ,GAAGL,KAAK,CAACtO,GAAN,CAAU0J,MAAV,CAAiB,IAAjB,EAAuBE,yBAAQ,CAACrB,IAAT,CAAcJ,KAAd,CAAvB,CAAf;UACEiB,IAAI,GAAG,EADT,CAAA;;EAEA,IAAA,KAAK,IAAI5L,CAAC,GAAGW,GAAG,CAACD,MAAjB,EAAyBV,CAAC,GAAGU,MAA7B,EAAqCV,CAAC,EAAtC,EAA0C4L,IAAI,CAACjJ,IAAL,CAAUwO,QAAV,CAAA,CAAA;;MAC1C3E,EAAE,CAACyE,MAAH,CAAUzE,EAAE,CAACpB,OAAH,CAAW3F,KAAX,CAAiBiH,OAAjB,CAAA,CAA0B/L,GAA1B,CAA8B0D,KAAK,GAAGxB,KAAK,CAACI,QAAd,GAAyB,CAAvD,CAAV,EAAqE2I,IAArE,CAAA,CAAA;EACD,GAAA;;EACD,EAAA,OAAO,CAAC,EAAEa,KAAK,IAAIsE,SAAX,CAAR,CAAA;EACD;EAGD;EACA;;;EACA,SAASK,iBAAT,CAA2B5E,EAA3B,EAA+B7L,GAA/B,EAAoCkC,KAApC,EAA2CwB,KAA3C,EAAkDjE,IAAlD,EAAwDE,KAAxD,EAA+DD,GAA/D,EAAoEqM,OAApE,EAA6E;IAC3E,IAAIrM,GAAG,IAAI,CAAP,IAAYA,GAAG,IAAIM,GAAG,CAACD,MAA3B,EAAmC,OAAO,KAAP,CAAA;IACnC,IAAI2Q,KAAK,GAAG,KAAZ,CAAA;;IACA,KAAK,IAAI5O,GAAG,GAAGrC,IAAf,EAAqBqC,GAAG,GAAGnC,KAA3B,EAAkCmC,GAAG,EAArC,EAAyC;MACvC,IAAIC,KAAK,GAAGrC,GAAG,GAAGM,GAAG,CAACF,KAAV,GAAkBgC,GAA9B;EAAA,QACE3B,GAAG,GAAGH,GAAG,CAACA,GAAJ,CAAQ+B,KAAR,CADR,CAAA;;MAEA,IAAI/B,GAAG,CAACA,GAAJ,CAAQ+B,KAAK,GAAG/B,GAAG,CAACF,KAApB,CAA8BK,IAAAA,GAAlC,EAAuC;EACrCuQ,MAAAA,KAAK,GAAG,IAAR,CAAA;EACA,MAAA,IAAInM,IAAI,GAAGrC,KAAK,CAACuC,MAAN,CAAatE,GAAb,CAAX,CAAA;QACA,IAAI;EAAET,QAAAA,GAAG,EAAEiR,OAAP;EAAgBlR,QAAAA,IAAI,EAAEmR,QAAAA;EAAtB,OAAA,GAAmC5Q,GAAG,CAACE,QAAJ,CAAaC,GAAb,CAAvC,CAAA;EACA0L,MAAAA,EAAE,CAACgF,aAAH,CACEhF,EAAE,CAACpB,OAAH,CAAW3F,KAAX,CAAiBiH,OAAjB,CAA0B/L,CAAAA,GAA1B,CAA8BG,GAAG,GAAGuD,KAApC,CADF,EAEE,IAFF,EAGE4F,OAAO,CAAC/E,IAAI,CAAChB,KAAN,EAAa,SAAb,EAAwB7D,GAAG,GAAGiR,OAA9B,CAHT,CAAA,CAAA;QAKA9E,EAAE,CAACyE,MAAH,CACEzE,EAAE,CAACpB,OAAH,CAAW3F,KAAX,CAAiBiH,OAAjB,CAAA,CAA0B/L,GAA1B,CAA8BA,GAAG,CAACiC,UAAJ,CAAevC,GAAf,EAAoBkR,QAApB,EAA8B1O,KAA9B,CAA9B,CADF,EAEEqC,IAAI,CAAC9B,IAAL,CAAU6I,aAAV,CACEhC,OAAO,CAAC/E,IAAI,CAAChB,KAAN,EAAa,SAAb,EAAwBoN,OAAO,GAAGpM,IAAI,CAAChB,KAAL,CAAWF,OAArB,GAA+B3D,GAAvD,CADT,CAFF,CAAA,CAAA;EAMAoC,MAAAA,GAAG,IAAIyC,IAAI,CAAChB,KAAL,CAAWH,OAAX,GAAqB,CAA5B,CAAA;EACD,KAAA;EACF,GAAA;;EACD,EAAA,OAAOsN,KAAP,CAAA;EACD;EAGD;EACA;;;EACA,SAASI,eAAT,CAAyBjF,EAAzB,EAA6B7L,GAA7B,EAAkCkC,KAAlC,EAAyCwB,KAAzC,EAAgDhE,GAAhD,EAAqDE,MAArD,EAA6DH,IAA7D,EAAmEsM,OAAnE,EAA4E;IAC1E,IAAItM,IAAI,IAAI,CAAR,IAAaA,IAAI,IAAIO,GAAG,CAACF,KAA7B,EAAoC,OAAO,KAAP,CAAA;IACpC,IAAI4Q,KAAK,GAAG,KAAZ,CAAA;;IACA,KAAK,IAAI7O,GAAG,GAAGnC,GAAf,EAAoBmC,GAAG,GAAGjC,MAA1B,EAAkCiC,GAAG,EAArC,EAAyC;MACvC,IAAIE,KAAK,GAAGF,GAAG,GAAG7B,GAAG,CAACF,KAAV,GAAkBL,IAA9B;EAAA,QACEU,GAAG,GAAGH,GAAG,CAACA,GAAJ,CAAQ+B,KAAR,CADR,CAAA;;MAEA,IAAI/B,GAAG,CAACA,GAAJ,CAAQ+B,KAAK,GAAG,CAAhB,CAAsB5B,IAAAA,GAA1B,EAA+B;EAC7BuQ,MAAAA,KAAK,GAAG,IAAR,CAAA;EACA,MAAA,IAAInM,IAAI,GAAGrC,KAAK,CAACuC,MAAN,CAAatE,GAAb,CAAX;EAAA,UACEyQ,QAAQ,GAAG5Q,GAAG,CAACO,QAAJ,CAAaJ,GAAb,CADb,CAAA;EAEA,MAAA,IAAI4Q,SAAS,GAAGlF,EAAE,CAACpB,OAAH,CAAW3F,KAAX,CAAiBiH,OAAjB,EAA0B/L,GAA1B,CAA8BG,GAAG,GAAGuD,KAApC,CAAhB,CAAA;QACAmI,EAAE,CAACgF,aAAH,CACEE,SADF,EAEE,IAFF,EAGExH,aAAa,CACXhF,IAAI,CAAChB,KADM,EAEX9D,IAAI,GAAGmR,QAFI,EAGXrM,IAAI,CAAChB,KAAL,CAAWH,OAAX,IAAsB3D,IAAI,GAAGmR,QAA7B,CAHW,CAHf,CAAA,CAAA;QASA/E,EAAE,CAACyE,MAAH,CACES,SAAS,GAAGxM,IAAI,CAACjC,QADnB,EAEEiC,IAAI,CAAC9B,IAAL,CAAU6I,aAAV,CAAwB/B,aAAa,CAAChF,IAAI,CAAChB,KAAN,EAAa,CAAb,EAAgB9D,IAAI,GAAGmR,QAAvB,CAArC,CAFF,CAAA,CAAA;EAIA/O,MAAAA,GAAG,IAAI0C,IAAI,CAAChB,KAAL,CAAWF,OAAX,GAAqB,CAA5B,CAAA;EACD,KAAA;EACF,GAAA;;EACD,EAAA,OAAOqN,KAAP,CAAA;EACD;EAGD;;;EACO,SAASM,WAAT,CAAqBjJ,KAArB,EAA4BkJ,QAA5B,EAAsCC,UAAtC,EAAkDxP,IAAlD,EAAwDsI,KAAxD,EAA+D;EACpE,EAAA,IAAI9H,KAAK,GAAGgP,UAAU,GAAGnJ,KAAK,CAACY,GAAN,CAAUlE,MAAV,CAAiByM,UAAU,GAAG,CAA9B,CAAH,GAAsCnJ,KAAK,CAACY,GAAlE;EAAA,MACE3I,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAakD,KAAb,CADR,CAAA;IAEA,IAAI;MAAExC,GAAF;EAAOD,IAAAA,IAAAA;EAAP,GAAA,GAAgBiC,IAApB,CAAA;EACA,EAAA,IAAI/B,KAAK,GAAGF,IAAI,GAAGuK,KAAK,CAAClK,KAAzB;EAAA,MACEF,MAAM,GAAGF,GAAG,GAAGsK,KAAK,CAACjK,MADvB,CAAA;EAEA,EAAA,IAAI8L,EAAE,GAAG9D,KAAK,CAAC8D,EAAf;QACEE,OAAO,GAAG,CADZ,CAAA;;EAEA,EAAA,SAASoF,MAAT,GAAkB;EAChBjP,IAAAA,KAAK,GAAGgP,UAAU,GAAGrF,EAAE,CAAClD,GAAH,CAAOlE,MAAP,CAAcyM,UAAU,GAAG,CAA3B,CAAH,GAAmCrF,EAAE,CAAClD,GAAxD,CAAA;EACA3I,IAAAA,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAakD,KAAb,CAAN,CAAA;EACA6J,IAAAA,OAAO,GAAGF,EAAE,CAACpB,OAAH,CAAW2G,IAAX,CAAgB9R,MAA1B,CAAA;EACD,GAZmE;EAcpE;EACA;EACA;;;EACA,EAAA,IAAI4Q,SAAS,CAACrE,EAAD,EAAK7L,GAAL,EAAUkC,KAAV,EAAiBgP,UAAjB,EAA6BvR,KAA7B,EAAoCC,MAApC,EAA4CmM,OAA5C,CAAb,EAAmEoF,MAAM,EAAA,CAAA;EACzE,EAAA,IAAIV,iBAAiB,CAAC5E,EAAD,EAAK7L,GAAL,EAAUkC,KAAV,EAAiBgP,UAAjB,EAA6BzR,IAA7B,EAAmCE,KAAnC,EAA0CD,GAA1C,EAA+CqM,OAA/C,CAArB,EACEoF,MAAM,EAAA,CAAA;EACR,EAAA,IACEV,iBAAiB,CAAC5E,EAAD,EAAK7L,GAAL,EAAUkC,KAAV,EAAiBgP,UAAjB,EAA6BzR,IAA7B,EAAmCE,KAAnC,EAA0CC,MAA1C,EAAkDmM,OAAlD,CADnB,EAGEoF,MAAM,EAAA,CAAA;EACR,EAAA,IAAIL,eAAe,CAACjF,EAAD,EAAK7L,GAAL,EAAUkC,KAAV,EAAiBgP,UAAjB,EAA6BxR,GAA7B,EAAkCE,MAAlC,EAA0CH,IAA1C,EAAgDsM,OAAhD,CAAnB,EACEoF,MAAM,EAAA,CAAA;EACR,EAAA,IAAIL,eAAe,CAACjF,EAAD,EAAK7L,GAAL,EAAUkC,KAAV,EAAiBgP,UAAjB,EAA6BxR,GAA7B,EAAkCE,MAAlC,EAA0CD,KAA1C,EAAiDoM,OAAjD,CAAnB,EACEoF,MAAM,EAAA,CAAA;;IAER,KAAK,IAAItP,GAAG,GAAGnC,GAAf,EAAoBmC,GAAG,GAAGjC,MAA1B,EAAkCiC,GAAG,EAArC,EAAyC;MACvC,IAAIuI,IAAI,GAAGpK,GAAG,CAACiC,UAAJ,CAAeJ,GAAf,EAAoBpC,IAApB,EAA0ByC,KAA1B,CAAX;UACEgK,EAAE,GAAGlM,GAAG,CAACiC,UAAJ,CAAeJ,GAAf,EAAoBlC,KAApB,EAA2BuC,KAA3B,CADP,CAAA;MAEA2J,EAAE,CAACD,OAAH,CACEC,EAAE,CAACpB,OAAH,CAAW3F,KAAX,CAAiBiH,OAAjB,CAAA,CAA0B/L,GAA1B,CAA8BoK,IAAI,GAAG8G,UAArC,CADF,EAEErF,EAAE,CAACpB,OAAH,CAAW3F,KAAX,CAAiBiH,OAAjB,CAA0B/L,CAAAA,GAA1B,CAA8BkM,EAAE,GAAGgF,UAAnC,CAFF,EAGE,IAAIvF,sBAAJ,CAAU3B,KAAK,CAACiB,IAAN,CAAWpJ,GAAG,GAAGnC,GAAjB,CAAV,EAAiC,CAAjC,EAAoC,CAApC,CAHF,CAAA,CAAA;EAKD,GAAA;;IACDyR,MAAM,EAAA,CAAA;IACNtF,EAAE,CAACM,YAAH,CACE,IAAIrC,aAAJ,CACE+B,EAAE,CAAClD,GAAH,CAAOhB,OAAP,CAAeuJ,UAAU,GAAGlR,GAAG,CAACiC,UAAJ,CAAevC,GAAf,EAAoBD,IAApB,EAA0ByC,KAA1B,CAA5B,CADF,EAEE2J,EAAE,CAAClD,GAAH,CAAOhB,OAAP,CAAeuJ,UAAU,GAAGlR,GAAG,CAACiC,UAAJ,CAAerC,MAAM,GAAG,CAAxB,EAA2BD,KAAK,GAAG,CAAnC,EAAsCuC,KAAtC,CAA5B,CAFF,CADF,CAAA,CAAA;IAMA+O,QAAQ,CAACpF,EAAD,CAAR,CAAA;EACD;;EC9TD;EAoBO,MAAMwF,aAAa,GAAGC,gCAAc,CAAC;EAC1CC,EAAAA,SAAS,EAAEC,KAAK,CAAC,OAAD,EAAU,CAAC,CAAX,CAD0B;EAE1CC,EAAAA,UAAU,EAAED,KAAK,CAAC,OAAD,EAAU,CAAV,CAFyB;EAG1CE,EAAAA,OAAO,EAAEF,KAAK,CAAC,MAAD,EAAS,CAAC,CAAV,CAH4B;EAI1CG,EAAAA,SAAS,EAAEH,KAAK,CAAC,MAAD,EAAS,CAAT,CAJ0B;EAM1C,EAAA,iBAAA,EAAmBI,UAAU,CAAC,OAAD,EAAU,CAAC,CAAX,CANa;EAO1C,EAAA,kBAAA,EAAoBA,UAAU,CAAC,OAAD,EAAU,CAAV,CAPY;EAQ1C,EAAA,eAAA,EAAiBA,UAAU,CAAC,MAAD,EAAS,CAAC,CAAV,CARe;EAS1C,EAAA,iBAAA,EAAmBA,UAAU,CAAC,MAAD,EAAS,CAAT,CATa;EAW1CC,EAAAA,SAAS,EAAEC,mBAX+B;EAY1C,EAAA,eAAA,EAAiBA,mBAZyB;EAa1CC,EAAAA,MAAM,EAAED,mBAbkC;IAc1C,YAAcA,EAAAA,mBAAAA;EAd4B,CAAD,CAApC,CAAA;;EAiBP,SAASE,iBAAT,CAA2BjK,KAA3B,EAAkCkJ,QAAlC,EAA4ChJ,SAA5C,EAAuD;IACrD,IAAIA,SAAS,CAACgF,EAAV,CAAalF,KAAK,CAACE,SAAnB,CAAJ,EAAmC,OAAO,KAAP,CAAA;EACnC,EAAA,IAAIgJ,QAAJ,EAAcA,QAAQ,CAAClJ,KAAK,CAAC8D,EAAN,CAASM,YAAT,CAAsBlE,SAAtB,CAAiCgK,CAAAA,cAAjC,EAAD,CAAR,CAAA;EACd,EAAA,OAAO,IAAP,CAAA;EACD,CAAA;;EAED,SAAST,KAAT,CAAe/Q,IAAf,EAAqBC,GAArB,EAA0B;EACxB,EAAA,OAAO,CAACqH,KAAD,EAAQkJ,QAAR,EAAkBiB,IAAlB,KAA2B;EAChC,IAAA,IAAI/J,GAAG,GAAGJ,KAAK,CAACE,SAAhB,CAAA;;MACA,IAAIE,GAAG,YAAY2B,aAAnB,EAAkC;EAChC,MAAA,OAAOkI,iBAAiB,CACtBjK,KADsB,EAEtBkJ,QAFsB,EAGtBlH,0BAAS,CAACgE,IAAV,CAAe5F,GAAG,CAACE,SAAnB,EAA8B3H,GAA9B,CAHsB,CAAxB,CAAA;EAKD,KAAA;;MACD,IAAID,IAAI,IAAI,OAAR,IAAmB,CAAC0H,GAAG,CAAC2D,KAA5B,EAAmC,OAAO,KAAP,CAAA;MACnC,IAAI1C,GAAG,GAAG+I,WAAW,CAACD,IAAD,EAAOzR,IAAP,EAAaC,GAAb,CAArB,CAAA;EACA,IAAA,IAAI0I,GAAG,IAAI,IAAX,EAAiB,OAAO,KAAP,CAAA;;MACjB,IAAI3I,IAAI,IAAI,OAAZ,EAAqB;QACnB,OAAOuR,iBAAiB,CACtBjK,KADsB,EAEtBkJ,QAFsB,EAGtBlH,0BAAS,CAACgE,IAAV,CAAehG,KAAK,CAACY,GAAN,CAAUhB,OAAV,CAAkBQ,GAAG,CAACkF,IAAJ,GAAW3M,GAA7B,CAAf,EAAkDA,GAAlD,CAHsB,CAAxB,CAAA;EAKD,KAND,MAMO;QACL,IAAIqO,KAAK,GAAGhH,KAAK,CAACY,GAAN,CAAUhB,OAAV,CAAkByB,GAAlB,CAAZ;YACEgJ,KAAK,GAAG5R,QAAQ,CAACuO,KAAD,EAAQtO,IAAR,EAAcC,GAAd,CADlB;EAAA,UAEE2R,MAFF,CAAA;EAGA,MAAA,IAAID,KAAJ,EAAWC,MAAM,GAAGtI,0BAAS,CAACgE,IAAV,CAAeqE,KAAf,EAAsB,CAAtB,CAAT,CAAX,KACK,IAAI1R,GAAG,GAAG,CAAV,EACH2R,MAAM,GAAGtI,0BAAS,CAACgE,IAAV,CAAehG,KAAK,CAACY,GAAN,CAAUhB,OAAV,CAAkBoH,KAAK,CAACnH,MAAN,CAAa,CAAC,CAAd,CAAlB,CAAf,EAAoD,CAAC,CAArD,CAAT,CADG,KAEAyK,MAAM,GAAGtI,0BAAS,CAACgE,IAAV,CAAehG,KAAK,CAACY,GAAN,CAAUhB,OAAV,CAAkBoH,KAAK,CAACvG,KAAN,CAAY,CAAC,CAAb,CAAlB,CAAf,EAAmD,CAAnD,CAAT,CAAA;EACL,MAAA,OAAOwJ,iBAAiB,CAACjK,KAAD,EAAQkJ,QAAR,EAAkBoB,MAAlB,CAAxB,CAAA;EACD,KAAA;KA3BH,CAAA;EA6BD,CAAA;;EAED,SAAST,UAAT,CAAoBnR,IAApB,EAA0BC,GAA1B,EAA+B;EAC7B,EAAA,OAAO,CAACqH,KAAD,EAAQkJ,QAAR,EAAkBiB,IAAlB,KAA2B;EAChC,IAAA,IAAI/J,GAAG,GAAGJ,KAAK,CAACE,SAAhB,CAAA;;EACA,IAAA,IAAI,EAAEE,GAAG,YAAY2B,aAAjB,CAAJ,EAAqC;QACnC,IAAIV,GAAG,GAAG+I,WAAW,CAACD,IAAD,EAAOzR,IAAP,EAAaC,GAAb,CAArB,CAAA;EACA,MAAA,IAAI0I,GAAG,IAAI,IAAX,EAAiB,OAAO,KAAP,CAAA;EACjBjB,MAAAA,GAAG,GAAG,IAAI2B,aAAJ,CAAkB/B,KAAK,CAACY,GAAN,CAAUhB,OAAV,CAAkByB,GAAlB,CAAlB,CAAN,CAAA;EACD,KAAA;;MACD,IAAIpB,KAAK,GAAGxH,QAAQ,CAAC2H,GAAG,CAACE,SAAL,EAAgB5H,IAAhB,EAAsBC,GAAtB,CAApB,CAAA;EACA,IAAA,IAAI,CAACsH,KAAL,EAAY,OAAO,KAAP,CAAA;EACZ,IAAA,OAAOgK,iBAAiB,CACtBjK,KADsB,EAEtBkJ,QAFsB,EAGtB,IAAInH,aAAJ,CAAkB3B,GAAG,CAACC,WAAtB,EAAmCJ,KAAnC,CAHsB,CAAxB,CAAA;KATF,CAAA;EAeD,CAAA;;EAED,SAAS8J,mBAAT,CAA6B/J,KAA7B,EAAoCkJ,QAApC,EAA8C;EAC5C,EAAA,IAAI9I,GAAG,GAAGJ,KAAK,CAACE,SAAhB,CAAA;EACA,EAAA,IAAI,EAAEE,GAAG,YAAY2B,aAAjB,CAAJ,EAAqC,OAAO,KAAP,CAAA;;EACrC,EAAA,IAAImH,QAAJ,EAAc;EACZ,IAAA,IAAIpF,EAAE,GAAG9D,KAAK,CAAC8D,EAAf;EAAA,QACEyG,WAAW,GAAGrL,cAAc,CAACc,KAAK,CAACb,MAAP,CAAd,CAA6B3C,IAA7B,CAAkC+G,aAAlC,GAAkDjF,OADlE,CAAA;EAEA8B,IAAAA,GAAG,CAACkE,WAAJ,CAAgB,CAAC9H,IAAD,EAAOpE,GAAP,KAAe;QAC7B,IAAI,CAACoE,IAAI,CAAC8B,OAAL,CAAa4G,EAAb,CAAgBqF,WAAhB,CAAL,EACEzG,EAAE,CAACD,OAAH,CACEC,EAAE,CAACpB,OAAH,CAAWzK,GAAX,CAAeG,GAAG,GAAG,CAArB,CADF,EAEE0L,EAAE,CAACpB,OAAH,CAAWzK,GAAX,CAAeG,GAAG,GAAGoE,IAAI,CAACjC,QAAX,GAAsB,CAArC,CAFF,EAGE,IAAIqJ,sBAAJ,CAAU2G,WAAV,EAAuB,CAAvB,EAA0B,CAA1B,CAHF,CAAA,CAAA;OAFJ,CAAA,CAAA;EAQA,IAAA,IAAIzG,EAAE,CAAC0G,UAAP,EAAmBtB,QAAQ,CAACpF,EAAD,CAAR,CAAA;EACpB,GAAA;;EACD,EAAA,OAAO,IAAP,CAAA;EACD,CAAA;;EAEM,SAAS2G,iBAAT,CAA2BN,IAA3B,EAAiC/R,GAAjC,EAAsC;EAC3C,EAAA,IAAIwI,GAAG,GAAGuJ,IAAI,CAACnK,KAAL,CAAWY,GAArB;QACEoG,KAAK,GAAGxH,UAAU,CAACoB,GAAG,CAAChB,OAAJ,CAAYxH,GAAZ,CAAD,CADpB,CAAA;EAEA,EAAA,IAAI,CAAC4O,KAAL,EAAY,OAAO,KAAP,CAAA;EACZmD,EAAAA,IAAI,CAACjB,QAAL,CAAciB,IAAI,CAACnK,KAAL,CAAW8D,EAAX,CAAcM,YAAd,CAA2B,IAAIrC,aAAJ,CAAkBiF,KAAlB,CAA3B,CAAd,CAAA,CAAA;EACA,EAAA,OAAO,IAAP,CAAA;EACD,CAAA;EAEM,SAAS0D,WAAT,CAAqBP,IAArB,EAA2BQ,CAA3B,EAA8B5N,KAA9B,EAAqC;IAC1C,IAAI,CAACgD,SAAS,CAACoK,IAAI,CAACnK,KAAN,CAAd,EAA4B,OAAO,KAAP,CAAA;EAC5B,EAAA,IAAIiC,KAAK,GAAGiF,WAAW,CAACnK,KAAD,CAAvB;EAAA,MACEqD,GAAG,GAAG+J,IAAI,CAACnK,KAAL,CAAWE,SADnB,CAAA;;IAEA,IAAIE,GAAG,YAAY2B,aAAnB,EAAkC;EAChC,IAAA,IAAI,CAACE,KAAL,EACEA,KAAK,GAAG;EACNlK,MAAAA,KAAK,EAAE,CADD;EAENC,MAAAA,MAAM,EAAE,CAFF;QAGNkL,IAAI,EAAE,CACJQ,yBAAQ,CAACrB,IAAT,CACEiF,QAAQ,CAACpI,cAAc,CAACiL,IAAI,CAACnK,KAAL,CAAWb,MAAZ,CAAd,CAAkC3C,IAAnC,EAAyCO,KAAzC,CADV,CADI,CAAA;OAHR,CAAA;MASF,IAAI5C,KAAK,GAAGiG,GAAG,CAACC,WAAJ,CAAgB5D,IAAhB,CAAqB,CAAC,CAAtB,CAAZ;UACEd,KAAK,GAAGyE,GAAG,CAACC,WAAJ,CAAgB1E,KAAhB,CAAsB,CAAC,CAAvB,CADV,CAAA;MAEA,IAAIhC,IAAI,GAAG7B,QAAQ,CAACb,GAAT,CAAakD,KAAb,CAAA,CAAoBvB,WAApB,CACTwH,GAAG,CAACC,WAAJ,CAAgBjI,GAAhB,GAAsBuD,KADb,EAETyE,GAAG,CAACE,SAAJ,CAAclI,GAAd,GAAoBuD,KAFX,CAAX,CAAA;MAIAsG,KAAK,GAAG2F,SAAS,CAAC3F,KAAD,EAAQtI,IAAI,CAAC/B,KAAL,GAAa+B,IAAI,CAACjC,IAA1B,EAAgCiC,IAAI,CAAC9B,MAAL,GAAc8B,IAAI,CAAChC,GAAnD,CAAjB,CAAA;EACAsR,IAAAA,WAAW,CAACkB,IAAI,CAACnK,KAAN,EAAamK,IAAI,CAACjB,QAAlB,EAA4BvN,KAA5B,EAAmChC,IAAnC,EAAyCsI,KAAzC,CAAX,CAAA;EACA,IAAA,OAAO,IAAP,CAAA;KAnBF,MAoBO,IAAIA,KAAJ,EAAW;EAChB,IAAA,IAAI+E,KAAK,GAAG7G,aAAa,CAACgK,IAAI,CAACnK,KAAN,CAAzB;UACErE,KAAK,GAAGqL,KAAK,CAACrL,KAAN,CAAY,CAAC,CAAb,CADV,CAAA;EAEAsN,IAAAA,WAAW,CACTkB,IAAI,CAACnK,KADI,EAETmK,IAAI,CAACjB,QAFI,EAGTvN,KAHS,EAIT7D,QAAQ,CAACb,GAAT,CAAa+P,KAAK,CAACvK,IAAN,CAAW,CAAC,CAAZ,CAAb,EAA6BtE,QAA7B,CAAsC6O,KAAK,CAAC5O,GAAN,GAAYuD,KAAlD,CAJS,EAKTsG,KALS,CAAX,CAAA;EAOA,IAAA,OAAO,IAAP,CAAA;EACD,GAXM,MAWA;EACL,IAAA,OAAO,KAAP,CAAA;EACD,GAAA;EACF,CAAA;EAEM,SAAS2I,iBAAT,CAAyBT,IAAzB,EAA+BU,UAA/B,EAA2C;EAChD,EAAA,IAAIA,UAAU,CAACC,OAAX,IAAsBD,UAAU,CAACE,OAArC,EAA8C,OAAA;IAE9C,IAAIC,YAAY,GAAGC,SAAS,CAACd,IAAD,EAAOU,UAAU,CAACK,MAAlB,CAA5B;EAAA,MACE3K,OADF,CAAA;;IAEA,IAAIsK,UAAU,CAACM,QAAX,IAAuBhB,IAAI,CAACnK,KAAL,CAAWE,SAAX,YAAgC6B,aAA3D,EAA0E;EACxE;MACAqJ,gBAAgB,CAACjB,IAAI,CAACnK,KAAL,CAAWE,SAAX,CAAqBG,WAAtB,EAAmCwK,UAAnC,CAAhB,CAAA;EACAA,IAAAA,UAAU,CAACQ,cAAX,EAAA,CAAA;EACD,GAJD,MAIO,IACLR,UAAU,CAACM,QAAX,IACAH,YADA,IAEA,CAACzK,OAAO,GAAGf,UAAU,CAAC2K,IAAI,CAACnK,KAAL,CAAWE,SAAX,CAAqBK,OAAtB,CAArB,KAAwD,IAFxD,IAGA+K,cAAc,CAACnB,IAAD,EAAOU,UAAP,CAAd,CAAiCzS,GAAjC,IAAwCmI,OAAO,CAACnI,GAJ3C,EAKL;EACA;EACA;EACAgT,IAAAA,gBAAgB,CAAC7K,OAAD,EAAUsK,UAAV,CAAhB,CAAA;EACAA,IAAAA,UAAU,CAACQ,cAAX,EAAA,CAAA;EACD,GAVM,MAUA,IAAI,CAACL,YAAL,EAAmB;EACxB;EACA,IAAA,OAAA;EACD,GAtB+C;EAyBhD;;;EACA,EAAA,SAASI,gBAAT,CAA0B7K,OAA1B,EAAmCgL,KAAnC,EAA0C;EACxC,IAAA,IAAItL,KAAK,GAAGqL,cAAc,CAACnB,IAAD,EAAOoB,KAAP,CAA1B,CAAA;MACA,IAAIC,QAAQ,GAAGxU,KAAG,CAACyU,QAAJ,CAAatB,IAAI,CAACnK,KAAlB,CAAA,IAA4B,IAA3C,CAAA;;MACA,IAAI,CAACC,KAAD,IAAU,CAACiB,WAAW,CAACX,OAAD,EAAUN,KAAV,CAA1B,EAA4C;EAC1C,MAAA,IAAIuL,QAAJ,EAAcvL,KAAK,GAAGM,OAAR,CAAd,KACK,OAAA;EACN,KAAA;;MACD,IAAIL,SAAS,GAAG,IAAI6B,aAAJ,CAAkBxB,OAAlB,EAA2BN,KAA3B,CAAhB,CAAA;;EACA,IAAA,IAAIuL,QAAQ,IAAI,CAACrB,IAAI,CAACnK,KAAL,CAAWE,SAAX,CAAqBgF,EAArB,CAAwBhF,SAAxB,CAAjB,EAAqD;QACnD,IAAI4D,EAAE,GAAGqG,IAAI,CAACnK,KAAL,CAAW8D,EAAX,CAAcM,YAAd,CAA2BlE,SAA3B,CAAT,CAAA;QACA,IAAIsL,QAAJ,EAAc1H,EAAE,CAAC4H,OAAH,CAAW1U,KAAX,EAAgBuJ,OAAO,CAACnI,GAAxB,CAAA,CAAA;QACd+R,IAAI,CAACjB,QAAL,CAAcpF,EAAd,CAAA,CAAA;EACD,KAAA;EACF,GAvC+C;;;EA0ChD,EAAA,SAAS6H,IAAT,GAAgB;EACdxB,IAAAA,IAAI,CAACyB,IAAL,CAAUC,mBAAV,CAA8B,SAA9B,EAAyCF,IAAzC,CAAA,CAAA;EACAxB,IAAAA,IAAI,CAACyB,IAAL,CAAUC,mBAAV,CAA8B,WAA9B,EAA2CF,IAA3C,CAAA,CAAA;EACAxB,IAAAA,IAAI,CAACyB,IAAL,CAAUC,mBAAV,CAA8B,WAA9B,EAA2CC,IAA3C,CAAA,CAAA;MACA,IAAI9U,KAAG,CAACyU,QAAJ,CAAatB,IAAI,CAACnK,KAAlB,CAA4B,IAAA,IAAhC,EACEmK,IAAI,CAACjB,QAAL,CAAciB,IAAI,CAACnK,KAAL,CAAW8D,EAAX,CAAc4H,OAAd,CAAsB1U,KAAtB,EAA2B,CAAC,CAA5B,CAAd,CAAA,CAAA;EACH,GAAA;;IAED,SAAS8U,IAAT,CAAcP,KAAd,EAAqB;MACnB,IAAIlG,MAAM,GAAGrO,KAAG,CAACyU,QAAJ,CAAatB,IAAI,CAACnK,KAAlB,CAAb;EAAA,QACEO,OADF,CAAA;;MAEA,IAAI8E,MAAM,IAAI,IAAd,EAAoB;EAClB;QACA9E,OAAO,GAAG4J,IAAI,CAACnK,KAAL,CAAWY,GAAX,CAAehB,OAAf,CAAuByF,MAAvB,CAAV,CAAA;EACD,KAHD,MAGO,IAAI4F,SAAS,CAACd,IAAD,EAAOoB,KAAK,CAACL,MAAb,CAAT,IAAiCF,YAArC,EAAmD;EACxD;EACAzK,MAAAA,OAAO,GAAG+K,cAAc,CAACnB,IAAD,EAAOU,UAAP,CAAxB,CAAA;EACA,MAAA,IAAI,CAACtK,OAAL,EAAc,OAAOoL,IAAI,EAAX,CAAA;EACf,KAAA;;EACD,IAAA,IAAIpL,OAAJ,EAAa6K,gBAAgB,CAAC7K,OAAD,EAAUgL,KAAV,CAAhB,CAAA;EACd,GAAA;;EACDpB,EAAAA,IAAI,CAACyB,IAAL,CAAUG,gBAAV,CAA2B,SAA3B,EAAsCJ,IAAtC,CAAA,CAAA;EACAxB,EAAAA,IAAI,CAACyB,IAAL,CAAUG,gBAAV,CAA2B,WAA3B,EAAwCJ,IAAxC,CAAA,CAAA;EACAxB,EAAAA,IAAI,CAACyB,IAAL,CAAUG,gBAAV,CAA2B,WAA3B,EAAwCD,IAAxC,CAAA,CAAA;EACD;EAGD;;EACA,SAAS1B,WAAT,CAAqBD,IAArB,EAA2BzR,IAA3B,EAAiCC,GAAjC,EAAsC;IACpC,IAAI,EAAEwR,IAAI,CAACnK,KAAL,CAAWE,SAAX,YAAgC8C,8BAAlC,CAAJ,EAAsD,OAAO,IAAP,CAAA;IACtD,IAAI;EAAE/C,IAAAA,KAAAA;EAAF,GAAA,GAAYkK,IAAI,CAACnK,KAAL,CAAWE,SAA3B,CAAA;;EACA,EAAA,KAAK,IAAIR,CAAC,GAAGO,KAAK,CAACN,KAAN,GAAc,CAA3B,EAA8BD,CAAC,IAAI,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;EACzC,IAAA,IAAIsB,MAAM,GAAGf,KAAK,CAACxD,IAAN,CAAWiD,CAAX,CAAb;EAAA,QACE1F,KAAK,GAAGrB,GAAG,GAAG,CAAN,GAAUsH,KAAK,CAACjG,KAAN,CAAY0F,CAAZ,CAAV,GAA2BO,KAAK,CAAC+L,UAAN,CAAiBtM,CAAjB,CADrC,CAAA;EAEA,IAAA,IAAI1F,KAAK,KAAKrB,GAAG,GAAG,CAAN,GAAU,CAAV,GAAcqI,MAAM,CAACjG,UAA1B,CAAT,EAAgD,OAAO,IAAP,CAAA;;EAChD,IAAA,IACEiG,MAAM,CAACtG,IAAP,CAAYC,IAAZ,CAAiBC,SAAjB,IAA8B,MAA9B,IACAoG,MAAM,CAACtG,IAAP,CAAYC,IAAZ,CAAiBC,SAAjB,IAA8B,aAFhC,EAGE;EACA,MAAA,IAAIqR,OAAO,GAAGhM,KAAK,CAACJ,MAAN,CAAaH,CAAb,CAAd,CAAA;QACA,IAAIwM,MAAM,GACRxT,IAAI,IAAI,MAAR,GAAkBC,GAAG,GAAG,CAAN,GAAU,MAAV,GAAmB,IAArC,GAA6CA,GAAG,GAAG,CAAN,GAAU,OAAV,GAAoB,MADnE,CAAA;QAEA,OAAOwR,IAAI,CAACgC,cAAL,CAAoBD,MAApB,CAA8BD,GAAAA,OAA9B,GAAwC,IAA/C,CAAA;EACD,KAAA;EACF,GAAA;;EACD,EAAA,OAAO,IAAP,CAAA;EACD,CAAA;;EAED,SAAShB,SAAT,CAAmBd,IAAnB,EAAyBlN,GAAzB,EAA8B;EAC5B,EAAA,OAAOA,GAAG,IAAIA,GAAG,IAAIkN,IAAI,CAAClN,GAA1B,EAA+BA,GAAG,GAAGA,GAAG,CAACmP,UAAzC,EACE,IAAInP,GAAG,CAACoP,QAAJ,IAAgB,IAAhB,IAAwBpP,GAAG,CAACoP,QAAJ,IAAgB,IAA5C,EAAkD,OAAOpP,GAAP,CAAA;EACrD,CAAA;;EAED,SAASqO,cAAT,CAAwBnB,IAAxB,EAA8BoB,KAA9B,EAAqC;EACnC,EAAA,IAAIe,QAAQ,GAAGnC,IAAI,CAACoC,WAAL,CAAiB;MAAE7U,IAAI,EAAE6T,KAAK,CAACiB,OAAd;MAAuB7U,GAAG,EAAE4T,KAAK,CAACkB,OAAAA;EAAlC,GAAjB,CAAf,CAAA;EACA,EAAA,IAAI,CAACH,QAAL,EAAe,OAAO,IAAP,CAAA;EACf,EAAA,OAAOA,QAAQ,GAAG9M,UAAU,CAAC2K,IAAI,CAACnK,KAAL,CAAWY,GAAX,CAAehB,OAAf,CAAuB0M,QAAQ,CAAClU,GAAhC,CAAD,CAAb,GAAsD,IAArE,CAAA;EACD;;ECnQD;AAUO,QAAMsU,YAAY,GAAG,IAAInN,0BAAJ,CAAc,YAAd;EAG5B;EACA;;EACA,SAASoN,kBAAT,CAA4BC,GAA5B,EAAiCC,GAAjC,EAAsCC,MAAtC,EAA8CvI,CAA9C,EAAiD;EAC/C,EAAA,IAAIwI,OAAO,GAAGH,GAAG,CAAC7R,UAAlB;EAAA,MACEiS,OAAO,GAAGH,GAAG,CAAC9R,UADhB,CAAA;;EAEAkS,EAAAA,KAAK,EAAE,KAAK,IAAI3V,CAAC,GAAG,CAAR,EAAWgB,CAAC,GAAG,CAApB,EAAuBhB,CAAC,GAAG0V,OAA3B,EAAoC1V,CAAC,EAArC,EAAyC;EAC9C,IAAA,IAAIgD,KAAK,GAAGuS,GAAG,CAACvS,KAAJ,CAAUhD,CAAV,CAAZ,CAAA;;MACA,KAAK,IAAI4V,IAAI,GAAG5U,CAAX,EAAc4C,CAAC,GAAG3B,IAAI,CAACC,GAAL,CAASuT,OAAT,EAAkBzV,CAAC,GAAG,CAAtB,CAAvB,EAAiD4V,IAAI,GAAGhS,CAAxD,EAA2DgS,IAAI,EAA/D,EAAmE;EACjE,MAAA,IAAIN,GAAG,CAACtS,KAAJ,CAAU4S,IAAV,CAAA,IAAmB5S,KAAvB,EAA8B;UAC5BhC,CAAC,GAAG4U,IAAI,GAAG,CAAX,CAAA;UACAJ,MAAM,IAAIxS,KAAK,CAACC,QAAhB,CAAA;EACA,QAAA,SAAS0S,KAAT,CAAA;EACD,OAAA;EACF,KAAA;;EACD1I,IAAAA,CAAC,CAACjK,KAAD,EAAQwS,MAAR,CAAD,CAAA;MACA,IAAIxU,CAAC,GAAGyU,OAAJ,IAAeH,GAAG,CAACtS,KAAJ,CAAUhC,CAAV,CAAa6U,CAAAA,UAAb,CAAwB7S,KAAxB,CAAnB,EACEqS,kBAAkB,CAACC,GAAG,CAACtS,KAAJ,CAAUhC,CAAV,CAAD,EAAegC,KAAf,EAAsBwS,MAAM,GAAG,CAA/B,EAAkCvI,CAAlC,CAAlB,CADF,KAEKjK,KAAK,CAAC8S,YAAN,CAAmB,CAAnB,EAAsB9S,KAAK,CAACgE,OAAN,CAAciE,IAApC,EAA0CgC,CAA1C,EAA6CuI,MAAM,GAAG,CAAtD,CAAA,CAAA;MACLA,MAAM,IAAIxS,KAAK,CAACC,QAAhB,CAAA;EACD,GAAA;EACF;EAGD;EACA;EACA;EACA;EACA;;;EACO,SAAS8S,SAAT,CAAmBrN,KAAnB,EAA0BsN,QAA1B,EAAoC;EACzC,EAAA,IAAIxJ,EAAJ;EAAA,MACEyJ,KAAK,GAAG,CAAC9Q,IAAD,EAAOrE,GAAP,KAAe;MACrB,IAAIqE,IAAI,CAAC/B,IAAL,CAAUC,IAAV,CAAeC,SAAf,IAA4B,OAAhC,EACEkJ,EAAE,GAAG0J,QAAQ,CAACxN,KAAD,EAAQvD,IAAR,EAAcrE,GAAd,EAAmB0L,EAAnB,CAAb,CAAA;KAHN,CAAA;;EAKA,EAAA,IAAI,CAACwJ,QAAL,EAAetN,KAAK,CAACY,GAAN,CAAU6M,WAAV,CAAsBF,KAAtB,CAAf,CAAA,KACK,IAAID,QAAQ,CAAC1M,GAAT,IAAgBZ,KAAK,CAACY,GAA1B,EACH+L,kBAAkB,CAACW,QAAQ,CAAC1M,GAAV,EAAeZ,KAAK,CAACY,GAArB,EAA0B,CAA1B,EAA6B2M,KAA7B,CAAlB,CAAA;EACF,EAAA,OAAOzJ,EAAP,CAAA;EACD;EAGD;EACA;;EACO,SAAS0J,QAAT,CAAkBxN,KAAlB,EAAyB7F,KAAzB,EAAgCuT,QAAhC,EAA0C5J,EAA1C,EAA8C;EACnD,EAAA,IAAI7L,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAakD,KAAb,CAAV,CAAA;EACA,EAAA,IAAI,CAAClC,GAAG,CAACC,QAAT,EAAmB,OAAO4L,EAAP,CAAA;IACnB,IAAI,CAACA,EAAL,EAASA,EAAE,GAAG9D,KAAK,CAAC8D,EAAX,CAH0C;EAMnD;;IACA,IAAI6J,OAAO,GAAG,EAAd,CAAA;;EACA,EAAA,KAAK,IAAIrW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,GAAG,CAACD,MAAxB,EAAgCV,CAAC,EAAjC,EAAqCqW,OAAO,CAAC1T,IAAR,CAAa,CAAb,CAAA,CAAA;;EACrC,EAAA,KAAK,IAAI3C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,GAAG,CAACC,QAAJ,CAAaX,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;EAC5C,IAAA,IAAIsW,IAAI,GAAG3V,GAAG,CAACC,QAAJ,CAAaZ,CAAb,CAAX,CAAA;;EACA,IAAA,IAAIsW,IAAI,CAAClT,IAAL,IAAa,WAAjB,EAA8B;QAC5B,IAAI8B,IAAI,GAAGrC,KAAK,CAACuC,MAAN,CAAakR,IAAI,CAACxV,GAAlB,CAAX,CAAA;;QACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkE,IAAI,CAAChB,KAAL,CAAWF,OAA/B,EAAwChD,CAAC,EAAzC,EACEqV,OAAO,CAACC,IAAI,CAAC9T,GAAL,GAAWxB,CAAZ,CAAP,IAAyBsV,IAAI,CAAClS,CAA9B,CAAA;;EACFoI,MAAAA,EAAE,CAACgF,aAAH,CACEhF,EAAE,CAACpB,OAAH,CAAWzK,GAAX,CAAeyV,QAAQ,GAAG,CAAX,GAAeE,IAAI,CAACxV,GAAnC,CADF,EAEE,IAFF,EAGEoJ,aAAa,CAAChF,IAAI,CAAChB,KAAN,EAAagB,IAAI,CAAChB,KAAL,CAAWH,OAAX,GAAqBuS,IAAI,CAAClS,CAAvC,EAA0CkS,IAAI,CAAClS,CAA/C,CAHf,CAAA,CAAA;EAKD,KATD,MASO,IAAIkS,IAAI,CAAClT,IAAL,IAAa,SAAjB,EAA4B;QACjCiT,OAAO,CAACC,IAAI,CAAC9T,GAAN,CAAP,IAAqB8T,IAAI,CAAClS,CAA1B,CAAA;EACD,KAFM,MAEA,IAAIkS,IAAI,CAAClT,IAAL,IAAa,kBAAjB,EAAqC;QAC1C,IAAI8B,IAAI,GAAGrC,KAAK,CAACuC,MAAN,CAAakR,IAAI,CAACxV,GAAlB,CAAX,CAAA;EACA0L,MAAAA,EAAE,CAACgF,aAAH,CACEhF,EAAE,CAACpB,OAAH,CAAWzK,GAAX,CAAeyV,QAAQ,GAAG,CAAX,GAAeE,IAAI,CAACxV,GAAnC,CADF,EAEE,IAFF,EAGEmJ,OAAO,CAAC/E,IAAI,CAAChB,KAAN,EAAa,SAAb,EAAwBgB,IAAI,CAAChB,KAAL,CAAWF,OAAX,GAAqBsS,IAAI,CAAClS,CAAlD,CAHT,CAAA,CAAA;EAKD,KAPM,MAOA,IAAIkS,IAAI,CAAClT,IAAL,IAAa,mBAAjB,EAAsC;QAC3C,IAAI8B,IAAI,GAAGrC,KAAK,CAACuC,MAAN,CAAakR,IAAI,CAACxV,GAAlB,CAAX,CAAA;EACA0L,MAAAA,EAAE,CAACgF,aAAH,CACEhF,EAAE,CAACpB,OAAH,CAAWzK,GAAX,CAAeyV,QAAQ,GAAG,CAAX,GAAeE,IAAI,CAACxV,GAAnC,CADF,EAEE,IAFF,EAGEmJ,OAAO,CAAC/E,IAAI,CAAChB,KAAN,EAAa,UAAb,EAAyBoS,IAAI,CAACrS,QAA9B,CAHT,CAAA,CAAA;EAKD,KAAA;EACF,GAAA;;IACD,IAAI8L,KAAJ,EAAWwG,IAAX,CAAA;;EACA,EAAA,KAAK,IAAIvW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqW,OAAO,CAACpW,MAA5B,EAAoCD,CAAC,EAArC,EACE,IAAIqW,OAAO,CAACrW,CAAD,CAAX,EAAgB;EACd,IAAA,IAAI+P,KAAK,IAAI,IAAb,EAAmBA,KAAK,GAAG/P,CAAR,CAAA;EACnBuW,IAAAA,IAAI,GAAGvW,CAAP,CAAA;EACD,GA3CgD;EA6CnD;EACA;EACA;;;EACA,EAAA,KAAK,IAAIA,CAAC,GAAG,CAAR,EAAWc,GAAG,GAAGsV,QAAQ,GAAG,CAAjC,EAAoCpW,CAAC,GAAGW,GAAG,CAACD,MAA5C,EAAoDV,CAAC,EAArD,EAAyD;EACvD,IAAA,IAAIwC,GAAG,GAAGK,KAAK,CAACG,KAAN,CAAYhD,CAAZ,CAAV,CAAA;EACA,IAAA,IAAI+J,GAAG,GAAGjJ,GAAG,GAAG0B,GAAG,CAACS,QAApB,CAAA;EACA,IAAA,IAAI+N,GAAG,GAAGqF,OAAO,CAACrW,CAAD,CAAjB,CAAA;;MACA,IAAIgR,GAAG,GAAG,CAAV,EAAa;QACX,IAAIwF,aAAa,GAAG,MAApB,CAAA;;QACA,IAAIhU,GAAG,CAAC6G,UAAR,EAAoB;UAClBmN,aAAa,GAAGhU,GAAG,CAAC6G,UAAJ,CAAejG,IAAf,CAAoBC,IAApB,CAAyBC,SAAzC,CAAA;EACD,OAAA;;QACD,IAAIyE,KAAK,GAAG,EAAZ,CAAA;;QACA,KAAK,IAAI/G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgQ,GAApB,EAAyBhQ,CAAC,EAA1B,EACE+G,KAAK,CAACpF,IAAN,CAAWiF,cAAc,CAACc,KAAK,CAACb,MAAP,CAAd,CAA6B2O,aAA7B,CAA4CvK,CAAAA,aAA5C,EAAX,CAAA,CAAA;;QACF,IAAIwK,IAAI,GAAG,CAACzW,CAAC,IAAI,CAAL,IAAU+P,KAAK,IAAI/P,CAAC,GAAG,CAAxB,KAA8BuW,IAAI,IAAIvW,CAAtC,GAA0Cc,GAAG,GAAG,CAAhD,GAAoDiJ,GAAG,GAAG,CAArE,CAAA;EACAyC,MAAAA,EAAE,CAACyE,MAAH,CAAUzE,EAAE,CAACpB,OAAH,CAAWzK,GAAX,CAAe8V,IAAf,CAAV,EAAgC1O,KAAhC,CAAA,CAAA;EACD,KAAA;;EACDjH,IAAAA,GAAG,GAAGiJ,GAAN,CAAA;EACD,GAAA;;EACD,EAAA,OAAOyC,EAAE,CAAC4H,OAAH,CAAWgB,YAAX,EAAyB;EAAEW,IAAAA,SAAS,EAAE,IAAA;EAAb,GAAzB,CAAP,CAAA;EACD;;EC1HD;EAqBA;EACA;;EACO,SAASW,YAAT,CAAsBhO,KAAtB,EAA6B;EAClC,EAAA,IAAII,GAAG,GAAGJ,KAAK,CAACE,SAAhB;EAAA,MACET,IAAI,GAAGU,aAAa,CAACH,KAAD,CADtB,CAAA;IAEA,IAAI7F,KAAK,GAAGsF,IAAI,CAAChD,IAAL,CAAU,CAAC,CAAX,CAAZ;QACE0M,UAAU,GAAG1J,IAAI,CAAC9D,KAAL,CAAW,CAAC,CAAZ,CADf;EAAA,MAEE1D,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAakD,KAAb,CAFR,CAAA;EAGA,EAAA,IAAIR,IAAJ,CAAA;EACA,EAAA,IAAIyG,GAAG,YAAY2B,aAAnB,EACEpI,IAAI,GAAG1B,GAAG,CAACW,WAAJ,CACLwH,GAAG,CAACC,WAAJ,CAAgBjI,GAAhB,GAAsB+Q,UADjB,EAEL/I,GAAG,CAACE,SAAJ,CAAclI,GAAd,GAAoB+Q,UAFf,CAAP,CADF,KAKKxP,IAAI,GAAG1B,GAAG,CAACE,QAAJ,CAAasH,IAAI,CAACrH,GAAL,GAAW+Q,UAAxB,CAAP,CAAA;IACLxP,IAAI,CAACwP,UAAL,GAAkBA,UAAlB,CAAA;IACAxP,IAAI,CAAC1B,GAAL,GAAWA,GAAX,CAAA;IACA0B,IAAI,CAACQ,KAAL,GAAaA,KAAb,CAAA;EACA,EAAA,OAAOR,IAAP,CAAA;EACD;;EAGM,SAASsU,SAAT,CAAmBnK,EAAnB,EAAuB;IAAE7L,GAAF;IAAOkR,UAAP;EAAmBhP,EAAAA,KAAAA;EAAnB,CAAvB,EAAmDJ,GAAnD,EAAwD;IAC7D,IAAImU,SAAS,GAAGnU,GAAG,GAAG,CAAN,GAAU,CAAC,CAAX,GAAe,CAA/B,CAAA;IACA,IAAI6H,cAAc,CAAC3J,GAAD,EAAMkC,KAAN,EAAaJ,GAAG,GAAGmU,SAAnB,CAAlB,EACEA,SAAS,GAAGnU,GAAG,IAAI,CAAP,IAAYA,GAAG,IAAI9B,GAAG,CAACF,KAAvB,GAA+B,IAA/B,GAAsC,CAAlD,CAAA;;EAEF,EAAA,KAAK,IAAI+B,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG7B,GAAG,CAACD,MAA5B,EAAoC8B,GAAG,EAAvC,EAA2C;MACzC,IAAIE,KAAK,GAAGF,GAAG,GAAG7B,GAAG,CAACF,KAAV,GAAkBgC,GAA9B,CADyC;;MAGzC,IAAIA,GAAG,GAAG,CAAN,IAAWA,GAAG,GAAG9B,GAAG,CAACF,KAArB,IAA8BE,GAAG,CAACA,GAAJ,CAAQ+B,KAAK,GAAG,CAAhB,CAAsB/B,IAAAA,GAAG,CAACA,GAAJ,CAAQ+B,KAAR,CAAxD,EAAwE;EACtE,MAAA,IAAI5B,GAAG,GAAGH,GAAG,CAACA,GAAJ,CAAQ+B,KAAR,CAAV;EAAA,UACEwC,IAAI,GAAGrC,KAAK,CAACuC,MAAN,CAAatE,GAAb,CADT,CAAA;EAEA0L,MAAAA,EAAE,CAACgF,aAAH,CACEhF,EAAE,CAACpB,OAAH,CAAWzK,GAAX,CAAekR,UAAU,GAAG/Q,GAA5B,CADF,EAEE,IAFF,EAGEuJ,UAAU,CAACnF,IAAI,CAAChB,KAAN,EAAazB,GAAG,GAAG9B,GAAG,CAACO,QAAJ,CAAaJ,GAAb,CAAnB,CAHZ,EAHsE;;EAStE0B,MAAAA,GAAG,IAAI0C,IAAI,CAAChB,KAAL,CAAWF,OAAX,GAAqB,CAA5B,CAAA;EACD,KAVD,MAUO;EACL,MAAA,IAAIZ,IAAI,GACNwT,SAAS,IAAI,IAAb,GACIhP,cAAc,CAAC/E,KAAK,CAACO,IAAN,CAAWyE,MAAZ,CAAd,CAAkC3C,IADtC,GAEIrC,KAAK,CAACuC,MAAN,CAAazE,GAAG,CAACA,GAAJ,CAAQ+B,KAAK,GAAGkU,SAAhB,CAAb,EAAyCxT,IAH/C,CAAA;QAIA,IAAItC,GAAG,GAAGH,GAAG,CAACiC,UAAJ,CAAeJ,GAAf,EAAoBC,GAApB,EAAyBI,KAAzB,CAAV,CAAA;EACA2J,MAAAA,EAAE,CAACyE,MAAH,CAAUzE,EAAE,CAACpB,OAAH,CAAWzK,GAAX,CAAekR,UAAU,GAAG/Q,GAA5B,CAAV,EAA4CsC,IAAI,CAAC6I,aAAL,EAA5C,CAAA,CAAA;EACD,KAAA;EACF,GAAA;;EACD,EAAA,OAAOO,EAAP,CAAA;EACD;EAGD;;EACO,SAASqK,eAAT,CAAyBnO,KAAzB,EAAgCkJ,QAAhC,EAA0C;EAC/C,EAAA,IAAI,CAACnJ,SAAS,CAACC,KAAD,CAAd,EAAuB,OAAO,KAAP,CAAA;;EACvB,EAAA,IAAIkJ,QAAJ,EAAc;EACZ,IAAA,IAAIvP,IAAI,GAAGqU,YAAY,CAAChO,KAAD,CAAvB,CAAA;EACAkJ,IAAAA,QAAQ,CAAC+E,SAAS,CAACjO,KAAK,CAAC8D,EAAP,EAAWnK,IAAX,EAAiBA,IAAI,CAACjC,IAAtB,CAAV,CAAR,CAAA;EACD,GAAA;;EACD,EAAA,OAAO,IAAP,CAAA;EACD;EAGD;;EACO,SAAS0W,cAAT,CAAwBpO,KAAxB,EAA+BkJ,QAA/B,EAAyC;EAC9C,EAAA,IAAI,CAACnJ,SAAS,CAACC,KAAD,CAAd,EAAuB,OAAO,KAAP,CAAA;;EACvB,EAAA,IAAIkJ,QAAJ,EAAc;EACZ,IAAA,IAAIvP,IAAI,GAAGqU,YAAY,CAAChO,KAAD,CAAvB,CAAA;EACAkJ,IAAAA,QAAQ,CAAC+E,SAAS,CAACjO,KAAK,CAAC8D,EAAP,EAAWnK,IAAX,EAAiBA,IAAI,CAAC/B,KAAtB,CAAV,CAAR,CAAA;EACD,GAAA;;EACD,EAAA,OAAO,IAAP,CAAA;EACD,CAAA;EAEM,SAASyW,YAAT,CAAsBvK,EAAtB,EAA0B;IAAE7L,GAAF;IAAOkC,KAAP;EAAcgP,EAAAA,UAAAA;EAAd,CAA1B,EAAsDpP,GAAtD,EAA2D;IAChE,IAAIuU,QAAQ,GAAGxK,EAAE,CAACpB,OAAH,CAAW2G,IAAX,CAAgB9R,MAA/B,CAAA;;IACA,KAAK,IAAIuC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG7B,GAAG,CAACD,MAA5B,GAAsC;MACpC,IAAIgC,KAAK,GAAGF,GAAG,GAAG7B,GAAG,CAACF,KAAV,GAAkBgC,GAA9B;EAAA,QACE3B,GAAG,GAAGH,GAAG,CAACA,GAAJ,CAAQ+B,KAAR,CADR;UAEEwC,IAAI,GAAGrC,KAAK,CAACuC,MAAN,CAAatE,GAAb,CAFT,CADoC;;EAKpC,IAAA,IACG2B,GAAG,GAAG,CAAN,IAAW9B,GAAG,CAACA,GAAJ,CAAQ+B,KAAK,GAAG,CAAhB,CAAA,IAAsB5B,GAAlC,IACC2B,GAAG,GAAG9B,GAAG,CAACF,KAAJ,GAAY,CAAlB,IAAuBE,GAAG,CAACA,GAAJ,CAAQ+B,KAAK,GAAG,CAAhB,CAAA,IAAsB5B,GAFhD,EAGE;EACA0L,MAAAA,EAAE,CAACgF,aAAH,CACEhF,EAAE,CAACpB,OAAH,CAAW3F,KAAX,CAAiBuR,QAAjB,CAA2BrW,CAAAA,GAA3B,CAA+BkR,UAAU,GAAG/Q,GAA5C,CADF,EAEE,IAFF,EAGEoJ,aAAa,CAAChF,IAAI,CAAChB,KAAN,EAAazB,GAAG,GAAG9B,GAAG,CAACO,QAAJ,CAAaJ,GAAb,CAAnB,CAHf,CAAA,CAAA;EAKD,KATD,MASO;EACL,MAAA,IAAIuD,KAAK,GAAGmI,EAAE,CAACpB,OAAH,CAAW3F,KAAX,CAAiBuR,QAAjB,EAA2BrW,GAA3B,CAA+BkR,UAAU,GAAG/Q,GAA5C,CAAZ,CAAA;QACA0L,EAAE,CAACyK,MAAH,CAAU5S,KAAV,EAAiBA,KAAK,GAAGa,IAAI,CAACjC,QAA9B,CAAA,CAAA;EACD,KAAA;;EACDT,IAAAA,GAAG,IAAI0C,IAAI,CAAChB,KAAL,CAAWF,OAAlB,CAAA;EACD,GAAA;EACF;EAGD;;EACO,SAASkT,YAAT,CAAsBxO,KAAtB,EAA6BkJ,QAA7B,EAAuC;EAC5C,EAAA,IAAI,CAACnJ,SAAS,CAACC,KAAD,CAAd,EAAuB,OAAO,KAAP,CAAA;;EACvB,EAAA,IAAIkJ,QAAJ,EAAc;EACZ,IAAA,IAAIvP,IAAI,GAAGqU,YAAY,CAAChO,KAAD,CAAvB;EAAA,QACE8D,EAAE,GAAG9D,KAAK,CAAC8D,EADb,CAAA;EAEA,IAAA,IAAInK,IAAI,CAACjC,IAAL,IAAa,CAAb,IAAkBiC,IAAI,CAAC/B,KAAL,IAAc+B,IAAI,CAAC1B,GAAL,CAASF,KAA7C,EAAoD,OAAO,KAAP,CAAA;;MACpD,KAAK,IAAIT,CAAC,GAAGqC,IAAI,CAAC/B,KAAL,GAAa,CAA1B,GAA+BN,CAAC,EAAhC,EAAoC;EAClC+W,MAAAA,YAAY,CAACvK,EAAD,EAAKnK,IAAL,EAAWrC,CAAX,CAAZ,CAAA;EACA,MAAA,IAAIA,CAAC,IAAIqC,IAAI,CAACjC,IAAd,EAAoB,MAAA;QACpBiC,IAAI,CAACQ,KAAL,GAAaR,IAAI,CAACwP,UAAL,GACTrF,EAAE,CAAClD,GAAH,CAAOlE,MAAP,CAAc/C,IAAI,CAACwP,UAAL,GAAkB,CAAhC,CADS,GAETrF,EAAE,CAAClD,GAFP,CAAA;QAGAjH,IAAI,CAAC1B,GAAL,GAAWH,QAAQ,CAACb,GAAT,CAAa0C,IAAI,CAACQ,KAAlB,CAAX,CAAA;EACD,KAAA;;MACD+O,QAAQ,CAACpF,EAAD,CAAR,CAAA;EACD,GAAA;;EACD,EAAA,OAAO,IAAP,CAAA;EACD,CAAA;EAEM,SAAS2K,WAAT,CAAqBxW,GAArB,EAA0BkC,KAA1B,EAAiCL,GAAjC,EAAsC;IAC3C,IAAI+H,UAAU,GAAG3C,cAAc,CAAC/E,KAAK,CAACO,IAAN,CAAWyE,MAAZ,CAAd,CAAkC2C,WAAnD,CAAA;;EACA,EAAA,KAAK,IAAI/H,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG9B,GAAG,CAACF,KAA5B,EAAmCgC,GAAG,EAAtC,EACE,IAAII,KAAK,CAACuC,MAAN,CAAazE,GAAG,CAACA,GAAJ,CAAQ8B,GAAG,GAAGD,GAAG,GAAG7B,GAAG,CAACF,KAAxB,CAAb,CAA6C2C,CAAAA,IAA7C,IAAqDmH,UAAzD,EACE,OAAO,KAAP,CAAA;;EACJ,EAAA,OAAO,IAAP,CAAA;EACD,CAAA;EAEM,SAAS6M,MAAT,CAAgB5K,EAAhB,EAAoB;IAAE7L,GAAF;IAAOkR,UAAP;EAAmBhP,EAAAA,KAAAA;EAAnB,CAApB,EAAgDL,GAAhD,EAAqD;IAC1D,IAAI6U,MAAM,GAAGxF,UAAb,CAAA;;IACA,KAAK,IAAI7R,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwC,GAApB,EAAyBxC,CAAC,EAA1B,EAA8BqX,MAAM,IAAIxU,KAAK,CAACG,KAAN,CAAYhD,CAAZ,EAAeiD,QAAzB,CAAA;;IAC9B,IAAI0H,KAAK,GAAG,EAAZ;QACE2M,MAAM,GAAG9U,GAAG,GAAG,CAAN,GAAU,CAAC,CAAX,GAAe,CAD1B,CAAA;IAEA,IAAI2U,WAAW,CAACxW,GAAD,EAAMkC,KAAN,EAAaL,GAAG,GAAG8U,MAAnB,CAAf,EACEA,MAAM,GAAG9U,GAAG,IAAI,CAAP,IAAYA,GAAG,IAAI7B,GAAG,CAACD,MAAvB,GAAgC,IAAhC,GAAuC,CAAhD,CAAA;;IACF,KAAK,IAAI+B,GAAG,GAAG,CAAV,EAAaC,KAAK,GAAG/B,GAAG,CAACF,KAAJ,GAAY+B,GAAtC,EAA2CC,GAAG,GAAG9B,GAAG,CAACF,KAArD,EAA4DgC,GAAG,EAAA,EAAIC,KAAK,EAAxE,EAA4E;EAC1E;MACA,IACEF,GAAG,GAAG,CAAN,IACAA,GAAG,GAAG7B,GAAG,CAACD,MADV,IAEAC,GAAG,CAACA,GAAJ,CAAQ+B,KAAR,CAAA,IAAkB/B,GAAG,CAACA,GAAJ,CAAQ+B,KAAK,GAAG/B,GAAG,CAACF,KAApB,CAHpB,EAIE;EACA,MAAA,IAAIK,GAAG,GAAGH,GAAG,CAACA,GAAJ,CAAQ+B,KAAR,CAAV;YACEwB,KAAK,GAAGrB,KAAK,CAACuC,MAAN,CAAatE,GAAb,EAAkBoD,KAD5B,CAAA;QAEAsI,EAAE,CAACgF,aAAH,CACEK,UAAU,GAAG/Q,GADf,EAEE,IAFF,EAGEmJ,OAAO,CAAC/F,KAAD,EAAQ,SAAR,EAAmBA,KAAK,CAACF,OAAN,GAAgB,CAAnC,CAHT,CAAA,CAAA;EAKAvB,MAAAA,GAAG,IAAIyB,KAAK,CAACH,OAAN,GAAgB,CAAvB,CAAA;EACD,KAbD,MAaO;EACL,MAAA,IAAIX,IAAI,GACNkU,MAAM,IAAI,IAAV,GACI1P,cAAc,CAAC/E,KAAK,CAACO,IAAN,CAAWyE,MAAZ,CAAd,CAAkC3C,IADtC,GAEIrC,KAAK,CAACuC,MAAN,CAAazE,GAAG,CAACA,GAAJ,CAAQ+B,KAAK,GAAG4U,MAAM,GAAG3W,GAAG,CAACF,KAA7B,CAAb,EAAkD2C,IAHxD,CAAA;EAIAuH,MAAAA,KAAK,CAAChI,IAAN,CAAWS,IAAI,CAAC6I,aAAL,EAAX,CAAA,CAAA;EACD,KAAA;EACF,GAAA;;IACDO,EAAE,CAACyE,MAAH,CAAUoG,MAAV,EAAkBzP,cAAc,CAAC/E,KAAK,CAACO,IAAN,CAAWyE,MAAZ,CAAd,CAAkCrF,GAAlC,CAAsC0J,MAAtC,CAA6C,IAA7C,EAAmDvB,KAAnD,CAAlB,CAAA,CAAA;EACA,EAAA,OAAO6B,EAAP,CAAA;EACD;EAGD;;EACO,SAAS+K,YAAT,CAAsB7O,KAAtB,EAA6BkJ,QAA7B,EAAuC;EAC5C,EAAA,IAAI,CAACnJ,SAAS,CAACC,KAAD,CAAd,EAAuB,OAAO,KAAP,CAAA;;EACvB,EAAA,IAAIkJ,QAAJ,EAAc;EACZ,IAAA,IAAIvP,IAAI,GAAGqU,YAAY,CAAChO,KAAD,CAAvB,CAAA;EACAkJ,IAAAA,QAAQ,CAACwF,MAAM,CAAC1O,KAAK,CAAC8D,EAAP,EAAWnK,IAAX,EAAiBA,IAAI,CAAChC,GAAtB,CAAP,CAAR,CAAA;EACD,GAAA;;EACD,EAAA,OAAO,IAAP,CAAA;EACD;EAGD;;EACO,SAASmX,WAAT,CAAqB9O,KAArB,EAA4BkJ,QAA5B,EAAsC;EAC3C,EAAA,IAAI,CAACnJ,SAAS,CAACC,KAAD,CAAd,EAAuB,OAAO,KAAP,CAAA;;EACvB,EAAA,IAAIkJ,QAAJ,EAAc;EACZ,IAAA,IAAIvP,IAAI,GAAGqU,YAAY,CAAChO,KAAD,CAAvB,CAAA;EACAkJ,IAAAA,QAAQ,CAACwF,MAAM,CAAC1O,KAAK,CAAC8D,EAAP,EAAWnK,IAAX,EAAiBA,IAAI,CAAC9B,MAAtB,CAAP,CAAR,CAAA;EACD,GAAA;;EACD,EAAA,OAAO,IAAP,CAAA;EACD,CAAA;EAEM,SAASkX,SAAT,CAAmBjL,EAAnB,EAAuB;IAAE7L,GAAF;IAAOkC,KAAP;EAAcgP,EAAAA,UAAAA;EAAd,CAAvB,EAAmDrP,GAAnD,EAAwD;IAC7D,IAAI6U,MAAM,GAAG,CAAb,CAAA;;IACA,KAAK,IAAIrX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwC,GAApB,EAAyBxC,CAAC,EAA1B,EAA8BqX,MAAM,IAAIxU,KAAK,CAACG,KAAN,CAAYhD,CAAZ,EAAeiD,QAAzB,CAAA;;IAC9B,IAAIyU,OAAO,GAAGL,MAAM,GAAGxU,KAAK,CAACG,KAAN,CAAYR,GAAZ,CAAA,CAAiBS,QAAxC,CAAA;IAEA,IAAIyJ,OAAO,GAAGF,EAAE,CAACpB,OAAH,CAAW2G,IAAX,CAAgB9R,MAA9B,CAAA;IACAuM,EAAE,CAACyK,MAAH,CAAUI,MAAM,GAAGxF,UAAnB,EAA+B6F,OAAO,GAAG7F,UAAzC,CAAA,CAAA;;IAEA,KAAK,IAAIpP,GAAG,GAAG,CAAV,EAAaC,KAAK,GAAGF,GAAG,GAAG7B,GAAG,CAACF,KAApC,EAA2CgC,GAAG,GAAG9B,GAAG,CAACF,KAArD,EAA4DgC,GAAG,EAAA,EAAIC,KAAK,EAAxE,EAA4E;EAC1E,IAAA,IAAI5B,GAAG,GAAGH,GAAG,CAACA,GAAJ,CAAQ+B,KAAR,CAAV,CAAA;;EACA,IAAA,IAAIF,GAAG,GAAG,CAAN,IAAW1B,GAAG,IAAIH,GAAG,CAACA,GAAJ,CAAQ+B,KAAK,GAAG/B,GAAG,CAACF,KAApB,CAAtB,EAAkD;EAChD;QACA,IAAIyD,KAAK,GAAGrB,KAAK,CAACuC,MAAN,CAAatE,GAAb,EAAkBoD,KAA9B,CAAA;EACAsI,MAAAA,EAAE,CAACgF,aAAH,CACEhF,EAAE,CAACpB,OAAH,CAAW3F,KAAX,CAAiBiH,OAAjB,CAA0B/L,CAAAA,GAA1B,CAA8BG,GAAG,GAAG+Q,UAApC,CADF,EAEE,IAFF,EAGE5H,OAAO,CAAC/F,KAAD,EAAQ,SAAR,EAAmBA,KAAK,CAACF,OAAN,GAAgB,CAAnC,CAHT,CAAA,CAAA;EAKAvB,MAAAA,GAAG,IAAIyB,KAAK,CAACH,OAAN,GAAgB,CAAvB,CAAA;OARF,MASO,IAAIvB,GAAG,GAAG7B,GAAG,CAACF,KAAV,IAAmBK,GAAG,IAAIH,GAAG,CAACA,GAAJ,CAAQ+B,KAAK,GAAG/B,GAAG,CAACF,KAApB,CAA9B,EAA0D;EAC/D;EACA,MAAA,IAAIyE,IAAI,GAAGrC,KAAK,CAACuC,MAAN,CAAatE,GAAb,CAAX,CAAA;EACA,MAAA,IAAIqL,IAAI,GAAGjH,IAAI,CAAC9B,IAAL,CAAU8I,MAAV,CACTjC,OAAO,CAAC/E,IAAI,CAAChB,KAAN,EAAa,SAAb,EAAwBgB,IAAI,CAAChB,KAAL,CAAWF,OAAX,GAAqB,CAA7C,CADE,EAETkB,IAAI,CAAC8B,OAFI,CAAX,CAAA;EAIA,MAAA,IAAI2Q,MAAM,GAAGhX,GAAG,CAACiC,UAAJ,CAAeJ,GAAG,GAAG,CAArB,EAAwBC,GAAxB,EAA6BI,KAA7B,CAAb,CAAA;EACA2J,MAAAA,EAAE,CAACyE,MAAH,CAAUzE,EAAE,CAACpB,OAAH,CAAW3F,KAAX,CAAiBiH,OAAjB,CAAA,CAA0B/L,GAA1B,CAA8BkR,UAAU,GAAG8F,MAA3C,CAAV,EAA8DxL,IAA9D,CAAA,CAAA;EACA1J,MAAAA,GAAG,IAAIyC,IAAI,CAAChB,KAAL,CAAWH,OAAX,GAAqB,CAA5B,CAAA;EACD,KAAA;EACF,GAAA;EACF;EAGD;;EACO,SAAS6T,SAAT,CAAmBlP,KAAnB,EAA0BkJ,QAA1B,EAAoC;EACzC,EAAA,IAAI,CAACnJ,SAAS,CAACC,KAAD,CAAd,EAAuB,OAAO,KAAP,CAAA;;EACvB,EAAA,IAAIkJ,QAAJ,EAAc;EACZ,IAAA,IAAIvP,IAAI,GAAGqU,YAAY,CAAChO,KAAD,CAAvB;EAAA,QACE8D,EAAE,GAAG9D,KAAK,CAAC8D,EADb,CAAA;EAEA,IAAA,IAAInK,IAAI,CAAChC,GAAL,IAAY,CAAZ,IAAiBgC,IAAI,CAAC9B,MAAL,IAAe8B,IAAI,CAAC1B,GAAL,CAASD,MAA7C,EAAqD,OAAO,KAAP,CAAA;;MACrD,KAAK,IAAIV,CAAC,GAAGqC,IAAI,CAAC9B,MAAL,GAAc,CAA3B,GAAgCP,CAAC,EAAjC,EAAqC;EACnCyX,MAAAA,SAAS,CAACjL,EAAD,EAAKnK,IAAL,EAAWrC,CAAX,CAAT,CAAA;EACA,MAAA,IAAIA,CAAC,IAAIqC,IAAI,CAAChC,GAAd,EAAmB,MAAA;QACnBgC,IAAI,CAACQ,KAAL,GAAaR,IAAI,CAACwP,UAAL,GACTrF,EAAE,CAAClD,GAAH,CAAOlE,MAAP,CAAc/C,IAAI,CAACwP,UAAL,GAAkB,CAAhC,CADS,GAETrF,EAAE,CAAClD,GAFP,CAAA;QAGAjH,IAAI,CAAC1B,GAAL,GAAWH,QAAQ,CAACb,GAAT,CAAa0C,IAAI,CAACQ,KAAlB,CAAX,CAAA;EACD,KAAA;;MACD+O,QAAQ,CAACpF,EAAD,CAAR,CAAA;EACD,GAAA;;EACD,EAAA,OAAO,IAAP,CAAA;EACD,CAAA;;EAED,SAASqL,OAAT,CAAiB3S,IAAjB,EAAuB;EACrB,EAAA,IAAI4S,CAAC,GAAG5S,IAAI,CAAC8B,OAAb,CAAA;EACA,EAAA,OACE8Q,CAAC,CAACrU,UAAF,IAAgB,CAAhB,IACAqU,CAAC,CAACzO,UAAF,CAAa0O,WADb,IAEAD,CAAC,CAACzO,UAAF,CAAa5F,UAAb,IAA2B,CAH7B,CAAA;EAKD,CAAA;;EAED,SAASuU,qBAAT,CAA+B;IAAEvX,KAAF;IAASC,MAAT;EAAiBC,EAAAA,GAAAA;EAAjB,CAA/B,EAAuD0B,IAAvD,EAA6D;IAC3D,IAAI4V,QAAQ,GAAG5V,IAAI,CAAChC,GAAL,GAAWI,KAAX,GAAmB4B,IAAI,CAACjC,IAAvC;QACE8X,SAAS,GAAGD,QADd,CAAA;EAEA,EAAA,IAAIE,WAAW,GAAG,CAAC9V,IAAI,CAAC9B,MAAL,GAAc,CAAf,IAAoBE,KAApB,GAA4B4B,IAAI,CAACjC,IAAnD;EAAA,MACEgY,UAAU,GAAGH,QAAQ,IAAI5V,IAAI,CAAC/B,KAAL,GAAa+B,IAAI,CAACjC,IAAlB,GAAyB,CAA7B,CADvB,CAAA;;EAEA,EAAA,KAAK,IAAIJ,CAAC,GAAGqC,IAAI,CAAChC,GAAlB,EAAuBL,CAAC,GAAGqC,IAAI,CAAC9B,MAAhC,EAAwCP,CAAC,EAAzC,EAA6C;EAC3C,IAAA,IACGqC,IAAI,CAACjC,IAAL,GAAY,CAAZ,IAAiBO,GAAG,CAACuX,SAAD,CAAH,IAAkBvX,GAAG,CAACuX,SAAS,GAAG,CAAb,CAAvC,IACC7V,IAAI,CAAC/B,KAAL,GAAaG,KAAb,IAAsBE,GAAG,CAACyX,UAAD,CAAH,IAAmBzX,GAAG,CAACyX,UAAU,GAAG,CAAd,CAF/C,EAIE,OAAO,IAAP,CAAA;EACFF,IAAAA,SAAS,IAAIzX,KAAb,CAAA;EACA2X,IAAAA,UAAU,IAAI3X,KAAd,CAAA;EACD,GAAA;;EACD,EAAA,KAAK,IAAIT,CAAC,GAAGqC,IAAI,CAACjC,IAAlB,EAAwBJ,CAAC,GAAGqC,IAAI,CAAC/B,KAAjC,EAAwCN,CAAC,EAAzC,EAA6C;EAC3C,IAAA,IACGqC,IAAI,CAAChC,GAAL,GAAW,CAAX,IAAgBM,GAAG,CAACsX,QAAD,CAAH,IAAiBtX,GAAG,CAACsX,QAAQ,GAAGxX,KAAZ,CAArC,IACC4B,IAAI,CAAC9B,MAAL,GAAcG,MAAd,IAAwBC,GAAG,CAACwX,WAAD,CAAH,IAAoBxX,GAAG,CAACwX,WAAW,GAAG1X,KAAf,CAFlD,EAIE,OAAO,IAAP,CAAA;MACFwX,QAAQ,EAAA,CAAA;MACRE,WAAW,EAAA,CAAA;EACZ,GAAA;;EACD,EAAA,OAAO,KAAP,CAAA;EACD;EAGD;EACA;;;EACO,SAASE,UAAT,CAAoB3P,KAApB,EAA2BkJ,QAA3B,EAAqC;EAC1C,EAAA,IAAI9I,GAAG,GAAGJ,KAAK,CAACE,SAAhB,CAAA;EACA,EAAA,IACE,EAAEE,GAAG,YAAY2B,aAAjB,CACA3B,IAAAA,GAAG,CAACC,WAAJ,CAAgBjI,GAAhB,IAAuBgI,GAAG,CAACE,SAAJ,CAAclI,GAFvC,EAIE,OAAO,KAAP,CAAA;EACF,EAAA,IAAIuB,IAAI,GAAGqU,YAAY,CAAChO,KAAD,CAAvB;QACE;EAAE/H,IAAAA,GAAAA;EAAF,GAAA,GAAU0B,IADZ,CAAA;IAEA,IAAI2V,qBAAqB,CAACrX,GAAD,EAAM0B,IAAN,CAAzB,EAAsC,OAAO,KAAP,CAAA;;EACtC,EAAA,IAAIuP,QAAJ,EAAc;EACZ,IAAA,IAAIpF,EAAE,GAAG9D,KAAK,CAAC8D,EAAf;UACEjK,IAAI,GAAG,EADT;EAAA,QAEEyE,OAAO,GAAGoF,yBAAQ,CAACK,KAFrB;EAAA,QAGE6L,SAHF;EAAA,QAIEC,UAJF,CAAA;;EAKA,IAAA,KAAK,IAAI/V,GAAG,GAAGH,IAAI,CAAChC,GAApB,EAAyBmC,GAAG,GAAGH,IAAI,CAAC9B,MAApC,EAA4CiC,GAAG,EAA/C,EAAmD;EACjD,MAAA,KAAK,IAAIC,GAAG,GAAGJ,IAAI,CAACjC,IAApB,EAA0BqC,GAAG,GAAGJ,IAAI,CAAC/B,KAArC,EAA4CmC,GAAG,EAA/C,EAAmD;EACjD,QAAA,IAAIkS,OAAO,GAAGhU,GAAG,CAACA,GAAJ,CAAQ6B,GAAG,GAAG7B,GAAG,CAACF,KAAV,GAAkBgC,GAA1B,CAAd;cACEyC,IAAI,GAAG7C,IAAI,CAACQ,KAAL,CAAWuC,MAAX,CAAkBuP,OAAlB,CADT,CAAA;EAEA,QAAA,IAAIpS,IAAI,CAACoS,OAAD,CAAR,EAAmB,SAAA;EACnBpS,QAAAA,IAAI,CAACoS,OAAD,CAAJ,GAAgB,IAAhB,CAAA;;UACA,IAAI2D,SAAS,IAAI,IAAjB,EAAuB;EACrBA,UAAAA,SAAS,GAAG3D,OAAZ,CAAA;EACA4D,UAAAA,UAAU,GAAGrT,IAAb,CAAA;EACD,SAHD,MAGO;EACL,UAAA,IAAI,CAAC2S,OAAO,CAAC3S,IAAD,CAAZ,EAAoB8B,OAAO,GAAGA,OAAO,CAACmJ,MAAR,CAAejL,IAAI,CAAC8B,OAApB,CAAV,CAAA;EACpB,UAAA,IAAIwR,MAAM,GAAGhM,EAAE,CAACpB,OAAH,CAAWzK,GAAX,CAAegU,OAAO,GAAGtS,IAAI,CAACwP,UAA9B,CAAb,CAAA;YACArF,EAAE,CAACyK,MAAH,CAAUuB,MAAV,EAAkBA,MAAM,GAAGtT,IAAI,CAACjC,QAAhC,CAAA,CAAA;EACD,SAAA;EACF,OAAA;EACF,KAAA;;MACDuJ,EAAE,CAACgF,aAAH,CACE8G,SAAS,GAAGjW,IAAI,CAACwP,UADnB,EAEE,IAFF,EAGE5H,OAAO,CACLI,UAAU,CACRkO,UAAU,CAACrU,KADH,EAERqU,UAAU,CAACrU,KAAX,CAAiBH,OAFT,EAGR1B,IAAI,CAAC/B,KAAL,GAAa+B,IAAI,CAACjC,IAAlB,GAAyBmY,UAAU,CAACrU,KAAX,CAAiBH,OAHlC,CADL,EAML,SANK,EAOL1B,IAAI,CAAC9B,MAAL,GAAc8B,IAAI,CAAChC,GAPd,CAHT,CAAA,CAAA;;MAaA,IAAI2G,OAAO,CAACiE,IAAZ,EAAkB;QAChB,IAAIlB,GAAG,GAAGuO,SAAS,GAAG,CAAZ,GAAgBC,UAAU,CAACvR,OAAX,CAAmBiE,IAA7C,CAAA;QACA,IAAI5G,KAAK,GAAGwT,OAAO,CAACU,UAAD,CAAP,GAAsBD,SAAS,GAAG,CAAlC,GAAsCvO,GAAlD,CAAA;EACAyC,MAAAA,EAAE,CAACO,WAAH,CAAe1I,KAAK,GAAGhC,IAAI,CAACwP,UAA5B,EAAwC9H,GAAG,GAAG1H,IAAI,CAACwP,UAAnD,EAA+D7K,OAA/D,CAAA,CAAA;EACD,KAAA;;EACDwF,IAAAA,EAAE,CAACM,YAAH,CACE,IAAIrC,aAAJ,CAAkB+B,EAAE,CAAClD,GAAH,CAAOhB,OAAP,CAAegQ,SAAS,GAAGjW,IAAI,CAACwP,UAAhC,CAAlB,CADF,CAAA,CAAA;MAGAD,QAAQ,CAACpF,EAAD,CAAR,CAAA;EACD,GAAA;;EACD,EAAA,OAAO,IAAP,CAAA;EACD;EAED;EACA;;EACO,SAASiM,SAAT,CAAmB/P,KAAnB,EAA0BkJ,QAA1B,EAAoC;EACzC,EAAA,MAAM8G,SAAS,GAAG9Q,cAAc,CAACc,KAAK,CAACb,MAAP,CAAhC,CAAA;IACA,OAAO8Q,iBAAiB,CAAC,CAAC;EAAExT,IAAAA,IAAAA;EAAF,GAAD,KAAc;MACrC,OAAOuT,SAAS,CAACvT,IAAI,CAAC/B,IAAL,CAAUC,IAAV,CAAeC,SAAhB,CAAhB,CAAA;EACD,GAFuB,CAAjB,CAEJoF,KAFI,EAEGkJ,QAFH,CAAP,CAAA;EAGD;EAGD;EACA;;EACO,SAAS+G,iBAAT,CAA2BC,WAA3B,EAAwC;EAC7C,EAAA,OAAO,CAAClQ,KAAD,EAAQkJ,QAAR,KAAqB;EAC1B,IAAA,IAAI9I,GAAG,GAAGJ,KAAK,CAACE,SAAhB,CAAA;MACA,IAAI9E,QAAJ,EAAc6Q,OAAd,CAAA;;EACA,IAAA,IAAI,EAAE7L,GAAG,YAAY2B,aAAjB,CAAJ,EAAqC;EACnC3G,MAAAA,QAAQ,GAAG0E,YAAY,CAACM,GAAG,CAACoC,KAAL,CAAvB,CAAA;EACA,MAAA,IAAI,CAACpH,QAAL,EAAe,OAAO,KAAP,CAAA;QACf6Q,OAAO,GAAGzM,UAAU,CAACY,GAAG,CAACoC,KAAL,CAAV,CAAsBpK,GAAhC,CAAA;EACD,KAJD,MAIO;EACL,MAAA,IAAIgI,GAAG,CAACC,WAAJ,CAAgBjI,GAAhB,IAAuBgI,GAAG,CAACE,SAAJ,CAAclI,GAAzC,EAA8C,OAAO,KAAP,CAAA;EAC9CgD,MAAAA,QAAQ,GAAGgF,GAAG,CAACC,WAAJ,CAAgBK,SAA3B,CAAA;EACAuL,MAAAA,OAAO,GAAG7L,GAAG,CAACC,WAAJ,CAAgBjI,GAA1B,CAAA;EACD,KAAA;;EACD,IAAA,IAAIgD,QAAQ,CAACI,KAAT,CAAeH,OAAf,IAA0B,CAA1B,IAA+BD,QAAQ,CAACI,KAAT,CAAeF,OAAf,IAA0B,CAA7D,EAAgE;EAC9D,MAAA,OAAO,KAAP,CAAA;EACD,KAAA;;EACD,IAAA,IAAI4N,QAAJ,EAAc;EACZ,MAAA,IAAIiH,SAAS,GAAG/U,QAAQ,CAACI,KAAzB;YACEA,KAAK,GAAG,EADV;EAAA,UAEED,QAAQ,GAAG4U,SAAS,CAAC5U,QAFvB,CAAA;EAGA,MAAA,IAAI4U,SAAS,CAAC7U,OAAV,GAAoB,CAAxB,EAA2B6U,SAAS,GAAG5O,OAAO,CAAC4O,SAAD,EAAY,SAAZ,EAAuB,CAAvB,CAAnB,CAAA;EAC3B,MAAA,IAAIA,SAAS,CAAC9U,OAAV,GAAoB,CAAxB,EAA2B8U,SAAS,GAAG5O,OAAO,CAAC4O,SAAD,EAAY,SAAZ,EAAuB,CAAvB,CAAnB,CAAA;EAC3B,MAAA,IAAIxW,IAAI,GAAGqU,YAAY,CAAChO,KAAD,CAAvB;EAAA,UACE8D,EAAE,GAAG9D,KAAK,CAAC8D,EADb,CAAA;;QAEA,KAAK,IAAIxM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqC,IAAI,CAAC/B,KAAL,GAAa+B,IAAI,CAACjC,IAAtC,EAA4CJ,CAAC,EAA7C,EACEkE,KAAK,CAACvB,IAAN,CACEsB,QAAQ,GACJgG,OAAO,CACL4O,SADK,EAEL,UAFK,EAGL5U,QAAQ,IAAIA,QAAQ,CAACjE,CAAD,CAApB,GAA0B,CAACiE,QAAQ,CAACjE,CAAD,CAAT,CAA1B,GAA0C,IAHrC,CADH,GAMJ6Y,SAPN,CAAA,CAAA;;EASF,MAAA,IAAIlJ,QAAJ,CAAA;;EACA,MAAA,KAAK,IAAInN,GAAG,GAAGH,IAAI,CAAChC,GAApB,EAAyBmC,GAAG,GAAGH,IAAI,CAAC9B,MAApC,EAA4CiC,GAAG,EAA/C,EAAmD;EACjD,QAAA,IAAI1B,GAAG,GAAGuB,IAAI,CAAC1B,GAAL,CAASiC,UAAT,CAAoBJ,GAApB,EAAyBH,IAAI,CAACjC,IAA9B,EAAoCiC,IAAI,CAACQ,KAAzC,CAAV,CAAA;UACA,IAAIL,GAAG,IAAIH,IAAI,CAAChC,GAAhB,EAAqBS,GAAG,IAAIgD,QAAQ,CAACb,QAAhB,CAAA;;UACrB,KAAK,IAAIR,GAAG,GAAGJ,IAAI,CAACjC,IAAf,EAAqBJ,CAAC,GAAG,CAA9B,EAAiCyC,GAAG,GAAGJ,IAAI,CAAC/B,KAA5C,EAAmDmC,GAAG,EAAA,EAAIzC,CAAC,EAA3D,EAA+D;YAC7D,IAAIyC,GAAG,IAAIJ,IAAI,CAACjC,IAAZ,IAAoBoC,GAAG,IAAIH,IAAI,CAAChC,GAApC,EAAyC,SAAA;YACzCmM,EAAE,CAACyE,MAAH,CACGtB,QAAQ,GAAGnD,EAAE,CAACpB,OAAH,CAAWzK,GAAX,CAAeG,GAAG,GAAGuB,IAAI,CAACwP,UAA1B,EAAsC,CAAtC,CADd,EAEE+G,WAAW,CAAC;EAAEzT,YAAAA,IAAI,EAAErB,QAAR;cAAkBtB,GAAlB;EAAuBC,YAAAA,GAAAA;aAAxB,CAAX,CAA0CwJ,aAA1C,CAAwD/H,KAAK,CAAClE,CAAD,CAA7D,CAFF,CAAA,CAAA;EAID,SAAA;EACF,OAAA;;EACDwM,MAAAA,EAAE,CAACgF,aAAH,CACEmD,OADF,EAEEiE,WAAW,CAAC;EAAEzT,QAAAA,IAAI,EAAErB,QAAR;UAAkBtB,GAAG,EAAEH,IAAI,CAAChC,GAA5B;UAAiCoC,GAAG,EAAEJ,IAAI,CAACjC,IAAAA;EAA3C,OAAD,CAFb,EAGE8D,KAAK,CAAC,CAAD,CAHP,CAAA,CAAA;EAKA,MAAA,IAAI4E,GAAG,YAAY2B,aAAnB,EACE+B,EAAE,CAACM,YAAH,CACE,IAAIrC,aAAJ,CACE+B,EAAE,CAAClD,GAAH,CAAOhB,OAAP,CAAeQ,GAAG,CAACC,WAAJ,CAAgBjI,GAA/B,CADF,EAEE6O,QAAQ,IAAInD,EAAE,CAAClD,GAAH,CAAOhB,OAAP,CAAeqH,QAAf,CAFd,CADF,CAAA,CAAA;QAMFiC,QAAQ,CAACpF,EAAD,CAAR,CAAA;EACD,KAAA;;EACD,IAAA,OAAO,IAAP,CAAA;KA3DF,CAAA;EA6DD;EAGD;EACA;EACA;;EACO,SAASsM,WAAT,CAAqBvV,IAArB,EAA2B3D,KAA3B,EAAkC;EACvC,EAAA,OAAO,UAAU8I,KAAV,EAAiBkJ,QAAjB,EAA2B;EAChC,IAAA,IAAI,CAACnJ,SAAS,CAACC,KAAD,CAAd,EAAuB,OAAO,KAAP,CAAA;EACvB,IAAA,IAAIgH,KAAK,GAAG7G,aAAa,CAACH,KAAD,CAAzB,CAAA;MACA,IAAIgH,KAAK,CAACtG,SAAN,CAAgBlF,KAAhB,CAAsBX,IAAtB,CAAgC3D,KAAAA,KAApC,EAA2C,OAAO,KAAP,CAAA;;EAC3C,IAAA,IAAIgS,QAAJ,EAAc;EACZ,MAAA,IAAIpF,EAAE,GAAG9D,KAAK,CAAC8D,EAAf,CAAA;EACA,MAAA,IAAI9D,KAAK,CAACE,SAAN,YAA2B6B,aAA/B,EACE/B,KAAK,CAACE,SAAN,CAAgBoE,WAAhB,CAA4B,CAAC7H,IAAD,EAAOrE,GAAP,KAAe;UACzC,IAAIqE,IAAI,CAACjB,KAAL,CAAWX,IAAX,MAAqB3D,KAAzB,EACE4M,EAAE,CAACgF,aAAH,CAAiB1Q,GAAjB,EAAsB,IAAtB,EAA4BmJ,OAAO,CAAC9E,IAAI,CAACjB,KAAN,EAAaX,IAAb,EAAmB3D,KAAnB,CAAnC,CAAA,CAAA;SAFJ,CAAA,CADF,KAME4M,EAAE,CAACgF,aAAH,CACE9B,KAAK,CAAC5O,GADR,EAEE,IAFF,EAGEmJ,OAAO,CAACyF,KAAK,CAACtG,SAAN,CAAgBlF,KAAjB,EAAwBX,IAAxB,EAA8B3D,KAA9B,CAHT,CAAA,CAAA;QAKFgS,QAAQ,CAACpF,EAAD,CAAR,CAAA;EACD,KAAA;;EACD,IAAA,OAAO,IAAP,CAAA;KAnBF,CAAA;EAqBD,CAAA;;EAED,SAASuM,uBAAT,CAAiC3V,IAAjC,EAAuC;EACrC,EAAA,OAAO,UAAUsF,KAAV,EAAiBkJ,QAAjB,EAA2B;EAChC,IAAA,IAAI,CAACnJ,SAAS,CAACC,KAAD,CAAd,EAAuB,OAAO,KAAP,CAAA;;EACvB,IAAA,IAAIkJ,QAAJ,EAAc;EACZ,MAAA,IAAId,KAAK,GAAGlJ,cAAc,CAACc,KAAK,CAACb,MAAP,CAA1B,CAAA;EACA,MAAA,IAAIxF,IAAI,GAAGqU,YAAY,CAAChO,KAAD,CAAvB;EAAA,UACE8D,EAAE,GAAG9D,KAAK,CAAC8D,EADb,CAAA;QAEA,IAAI7B,KAAK,GAAGtI,IAAI,CAAC1B,GAAL,CAASyB,WAAT,CACVgB,IAAI,IAAI,QAAR,GACI,IAAIlD,IAAJ,CAASmC,IAAI,CAACjC,IAAd,EAAoB,CAApB,EAAuBiC,IAAI,CAAC/B,KAA5B,EAAmC+B,IAAI,CAAC1B,GAAL,CAASD,MAA5C,CADJ,GAEI0C,IAAI,IAAI,KAAR,GACA,IAAIlD,IAAJ,CAAS,CAAT,EAAYmC,IAAI,CAAChC,GAAjB,EAAsBgC,IAAI,CAAC1B,GAAL,CAASF,KAA/B,EAAsC4B,IAAI,CAAC9B,MAA3C,CADA,GAEA8B,IALM,CAAZ,CAAA;EAOA,MAAA,IAAI0F,KAAK,GAAG4C,KAAK,CAAChK,GAAN,CAAWG,GAAD,IAASuB,IAAI,CAACQ,KAAL,CAAWuC,MAAX,CAAkBtE,GAAlB,CAAnB,CAAZ,CAAA;;EACA,MAAA,KACE,IAAId,CAAC,GAAG,CADV,EAEEA,CAAC,GAAG2K,KAAK,CAAC1K,MAFZ,EAGED,CAAC,EAHH;EAAA,QAKE,IAAI+H,KAAK,CAAC/H,CAAD,CAAL,CAASoD,IAAT,IAAiB0N,KAAK,CAACtG,WAA3B,EACEgC,EAAE,CAACgF,aAAH,CACEnP,IAAI,CAACwP,UAAL,GAAkBlH,KAAK,CAAC3K,CAAD,CADzB,EAEE8Q,KAAK,CAAC5L,IAFR,EAGE6C,KAAK,CAAC/H,CAAD,CAAL,CAASkE,KAHX,CAAA,CAAA;;QAKJ,IAAIsI,EAAE,CAACG,KAAH,CAAS1M,MAAT,IAAmB,CAAvB,EACE,KACE,IAAID,CAAC,GAAG,CADV,EAEEA,CAAC,GAAG2K,KAAK,CAAC1K,MAFZ,EAGED,CAAC,EAHH;UAKEwM,EAAE,CAACgF,aAAH,CACEnP,IAAI,CAACwP,UAAL,GAAkBlH,KAAK,CAAC3K,CAAD,CADzB,EAEE8Q,KAAK,CAACtG,WAFR,EAGEzC,KAAK,CAAC/H,CAAD,CAAL,CAASkE,KAHX,CAAA,CAAA;QAKJ0N,QAAQ,CAACpF,EAAD,CAAR,CAAA;EACD,KAAA;;EACD,IAAA,OAAO,IAAP,CAAA;KAtCF,CAAA;EAwCD,CAAA;;EAED,SAASwM,qBAAT,CAA+B5V,IAA/B,EAAqCf,IAArC,EAA2CyO,KAA3C,EAAkD;EAChD;EACA,EAAA,MAAMmI,aAAa,GAAG5W,IAAI,CAAC1B,GAAL,CAASyB,WAAT,CAAqB;EACzChC,IAAAA,IAAI,EAAE,CADmC;EAEzCC,IAAAA,GAAG,EAAE,CAFoC;MAGzCC,KAAK,EAAE8C,IAAI,IAAI,KAAR,GAAgBf,IAAI,CAAC1B,GAAL,CAASF,KAAzB,GAAiC,CAHC;MAIzCF,MAAM,EAAE6C,IAAI,IAAI,QAAR,GAAmBf,IAAI,CAAC1B,GAAL,CAASD,MAA5B,GAAqC,CAAA;EAJJ,GAArB,CAAtB,CAAA;;EAOA,EAAA,KAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiZ,aAAa,CAAChZ,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;EAC7C,IAAA,MAAMkF,IAAI,GAAG7C,IAAI,CAACQ,KAAL,CAAWuC,MAAX,CAAkB6T,aAAa,CAACjZ,CAAD,CAA/B,CAAb,CAAA;;MACA,IAAIkF,IAAI,IAAIA,IAAI,CAAC9B,IAAL,KAAc0N,KAAK,CAACtG,WAAhC,EAA6C;EAC3C,MAAA,OAAO,KAAP,CAAA;EACD,KAAA;EACF,GAAA;;EAED,EAAA,OAAO,IAAP,CAAA;EACD;EAGD;EACA;;;EACO,SAAS0O,YAAT,CAAsB9V,IAAtB,EAA4BwD,OAA5B,EAAqC;IAC1CA,OAAO,GAAGA,OAAO,IAAI;EAAEuS,IAAAA,kBAAkB,EAAE,KAAA;KAA3C,CAAA;IAEA,IAAIvS,OAAO,CAACuS,kBAAZ,EAAgC,OAAOJ,uBAAuB,CAAC3V,IAAD,CAA9B,CAAA;EAEhC,EAAA,OAAO,UAAUsF,KAAV,EAAiBkJ,QAAjB,EAA2B;EAChC,IAAA,IAAI,CAACnJ,SAAS,CAACC,KAAD,CAAd,EAAuB,OAAO,KAAP,CAAA;;EACvB,IAAA,IAAIkJ,QAAJ,EAAc;EACZ,MAAA,IAAId,KAAK,GAAGlJ,cAAc,CAACc,KAAK,CAACb,MAAP,CAA1B,CAAA;EACA,MAAA,IAAIxF,IAAI,GAAGqU,YAAY,CAAChO,KAAD,CAAvB;EAAA,UACE8D,EAAE,GAAG9D,KAAK,CAAC8D,EADb,CAAA;QAGA,IAAI4M,kBAAkB,GAAGJ,qBAAqB,CAAC,KAAD,EAAQ3W,IAAR,EAAcyO,KAAd,CAA9C,CAAA;QACA,IAAIuI,qBAAqB,GAAGL,qBAAqB,CAAC,QAAD,EAAW3W,IAAX,EAAiByO,KAAjB,CAAjD,CAAA;EAEA,MAAA,IAAIwI,eAAe,GACjBlW,IAAI,KAAK,QAAT,GACIgW,kBADJ,GAEIhW,IAAI,KAAK,KAAT,GACAiW,qBADA,GAEA,KALN,CAAA;EAOA,MAAA,IAAIE,iBAAiB,GAAGD,eAAe,GAAG,CAAH,GAAO,CAA9C,CAAA;EAEA,MAAA,IAAIE,SAAS,GACXpW,IAAI,IAAI,QAAR,GACI,IAAIlD,IAAJ,CAAS,CAAT,EAAYqZ,iBAAZ,EAA+B,CAA/B,EAAkClX,IAAI,CAAC1B,GAAL,CAASD,MAA3C,CADJ,GAEI0C,IAAI,IAAI,KAAR,GACA,IAAIlD,IAAJ,CAASqZ,iBAAT,EAA4B,CAA5B,EAA+BlX,IAAI,CAAC1B,GAAL,CAASF,KAAxC,EAA+C,CAA/C,CADA,GAEA4B,IALN,CAAA;EAOA,MAAA,IAAIoX,OAAO,GACTrW,IAAI,IAAI,QAAR,GACIiW,qBAAqB,GACnBvI,KAAK,CAAC5L,IADa,GAEnB4L,KAAK,CAACtG,WAHZ,GAIIpH,IAAI,IAAI,KAAR,GACAgW,kBAAkB,GAChBtI,KAAK,CAAC5L,IADU,GAEhB4L,KAAK,CAACtG,WAHR,GAIAsG,KAAK,CAAC5L,IATZ,CAAA;QAWA7C,IAAI,CAAC1B,GAAL,CAASyB,WAAT,CAAqBoX,SAArB,CAAgCE,CAAAA,OAAhC,CAAyCC,eAAD,IAAqB;EAC3D,QAAA,MAAMhF,OAAO,GAAGgF,eAAe,GAAGtX,IAAI,CAACwP,UAAvC,CAAA;UACA,MAAM3M,IAAI,GAAGsH,EAAE,CAAClD,GAAH,CAAOlE,MAAP,CAAcuP,OAAd,CAAb,CAAA;;EAEA,QAAA,IAAIzP,IAAJ,EAAU;YACRsH,EAAE,CAACgF,aAAH,CAAiBmD,OAAjB,EAA0B8E,OAA1B,EAAmCvU,IAAI,CAAChB,KAAxC,CAAA,CAAA;EACD,SAAA;SANH,CAAA,CAAA;QASA0N,QAAQ,CAACpF,EAAD,CAAR,CAAA;EACD,KAAA;;EACD,IAAA,OAAO,IAAP,CAAA;KAhDF,CAAA;EAkDD;EAGD;;MACWoN,eAAe,GAAGV,YAAY,CAAC,KAAD,EAAQ;EAAEC,EAAAA,kBAAkB,EAAE,IAAA;EAAtB,CAAR;EAGzC;;MACWU,kBAAkB,GAAGX,YAAY,CAAC,QAAD,EAAW;EACrDC,EAAAA,kBAAkB,EAAE,IAAA;EADiC,CAAX;EAK5C;;MACWW,gBAAgB,GAAGZ,YAAY,CAAC,MAAD,EAAS;EACjDC,EAAAA,kBAAkB,EAAE,IAAA;EAD6B,CAAT,EAAnC;;EAIP,SAASY,YAAT,CAAsBrK,KAAtB,EAA6BrO,GAA7B,EAAkC;IAChC,IAAIA,GAAG,GAAG,CAAV,EAAa;EACX,IAAA,IAAIkH,MAAM,GAAGmH,KAAK,CAACnG,UAAnB,CAAA;MACA,IAAIhB,MAAJ,EAAY,OAAOmH,KAAK,CAAC5O,GAAN,GAAYyH,MAAM,CAACtF,QAA1B,CAAA;;MACZ,KACE,IAAIT,GAAG,GAAGkN,KAAK,CAAChN,KAAN,CAAY,CAAC,CAAb,CAAA,GAAkB,CAA5B,EAA+BK,MAAM,GAAG2M,KAAK,CAACnH,MAAN,EAD1C,EAEE/F,GAAG,IAAI,CAFT,EAGEA,GAAG,EAHL,EAIE;EACA,MAAA,IAAIqB,OAAO,GAAG6L,KAAK,CAACvK,IAAN,CAAW,CAAC,CAAZ,CAAenC,CAAAA,KAAf,CAAqBR,GAArB,CAAd,CAAA;EACA,MAAA,IAAIqB,OAAO,CAACJ,UAAZ,EAAwB,OAAOV,MAAM,GAAG,CAAT,GAAac,OAAO,CAAC2F,SAAR,CAAkBvG,QAAtC,CAAA;QACxBF,MAAM,IAAIc,OAAO,CAACZ,QAAlB,CAAA;EACD,KAAA;EACF,GAZD,MAYO;MACL,IAAIyM,KAAK,CAAChN,KAAN,EAAA,GAAgBgN,KAAK,CAAChG,MAAN,CAAajG,UAAb,GAA0B,CAA9C,EACE,OAAOiM,KAAK,CAAC5O,GAAN,GAAY4O,KAAK,CAACtG,SAAN,CAAgBnG,QAAnC,CAAA;MACF,IAAIJ,KAAK,GAAG6M,KAAK,CAACvK,IAAN,CAAW,CAAC,CAAZ,CAAZ,CAAA;;MACA,KACE,IAAI3C,GAAG,GAAGkN,KAAK,CAACgF,UAAN,CAAiB,CAAC,CAAlB,CAAV,EAAgC5R,QAAQ,GAAG4M,KAAK,CAACvG,KAAN,EAD7C,EAEE3G,GAAG,GAAGK,KAAK,CAACY,UAFd,EAGEjB,GAAG,EAHL,EAIE;EACA,MAAA,IAAIqB,OAAO,GAAGhB,KAAK,CAACG,KAAN,CAAYR,GAAZ,CAAd,CAAA;EACA,MAAA,IAAIqB,OAAO,CAACJ,UAAZ,EAAwB,OAAOX,QAAQ,GAAG,CAAlB,CAAA;QACxBA,QAAQ,IAAIe,OAAO,CAACZ,QAApB,CAAA;EACD,KAAA;EACF,GAAA;EACF;EAGD;EACA;;;EACO,SAAS+W,YAAT,CAAsBC,SAAtB,EAAiC;EACtC,EAAA,OAAO,UAAUvR,KAAV,EAAiBkJ,QAAjB,EAA2B;EAChC,IAAA,IAAI,CAACnJ,SAAS,CAACC,KAAD,CAAd,EAAuB,OAAO,KAAP,CAAA;MACvB,IAAIxD,IAAI,GAAG6U,YAAY,CAAClR,aAAa,CAACH,KAAD,CAAd,EAAuBuR,SAAvB,CAAvB,CAAA;MACA,IAAI/U,IAAI,IAAI,IAAZ,EAAkB,OAAA;;EAClB,IAAA,IAAI0M,QAAJ,EAAc;QACZ,IAAIlC,KAAK,GAAGhH,KAAK,CAACY,GAAN,CAAUhB,OAAV,CAAkBpD,IAAlB,CAAZ,CAAA;QACA0M,QAAQ,CACNlJ,KAAK,CAAC8D,EAAN,CACGM,YADH,CACgBpB,8BAAa,CAACC,OAAd,CAAsB+D,KAAtB,EAA6B/F,eAAe,CAAC+F,KAAD,CAA5C,CADhB,CAAA,CAEGkD,cAFH,EADM,CAAR,CAAA;EAKD,KAAA;;EACD,IAAA,OAAO,IAAP,CAAA;KAZF,CAAA;EAcD;EAGD;;EACO,SAASsH,WAAT,CAAqBxR,KAArB,EAA4BkJ,QAA5B,EAAsC;EAC3C,EAAA,IAAIzJ,IAAI,GAAGO,KAAK,CAACE,SAAN,CAAgBK,OAA3B,CAAA;;EACA,EAAA,KAAK,IAAIb,CAAC,GAAGD,IAAI,CAACE,KAAlB,EAAyBD,CAAC,GAAG,CAA7B,EAAgCA,CAAC,EAAjC,EAAqC;EACnC,IAAA,IAAIjD,IAAI,GAAGgD,IAAI,CAAChD,IAAL,CAAUiD,CAAV,CAAX,CAAA;;MACA,IAAIjD,IAAI,CAAC/B,IAAL,CAAUC,IAAV,CAAeC,SAAf,IAA4B,OAAhC,EAAyC;QACvC,IAAIsO,QAAJ,EACEA,QAAQ,CACNlJ,KAAK,CAAC8D,EAAN,CAASyK,MAAT,CAAgB9O,IAAI,CAACI,MAAL,CAAYH,CAAZ,CAAhB,EAAgCD,IAAI,CAACgB,KAAL,CAAWf,CAAX,CAAhC,CAAA,CAA+CwK,cAA/C,EADM,CAAR,CAAA;EAGF,MAAA,OAAO,IAAP,CAAA;EACD,KAAA;EACF,GAAA;;EACD,EAAA,OAAO,KAAP,CAAA;EACD;;ECppBM,MAAMuH,SAAN,CAAgB;EACrBha,EAAAA,WAAW,CAACgF,IAAD,EAAOiV,YAAP,EAAqB;MAC9B,IAAKjV,CAAAA,IAAL,GAAYA,IAAZ,CAAA;MACA,IAAKiV,CAAAA,YAAL,GAAoBA,YAApB,CAAA;EACA,IAAA,IAAA,CAAKzU,GAAL,GAAW0U,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAX,CAAA;EACA,IAAA,IAAA,CAAK3U,GAAL,CAAS4U,SAAT,GAAqB,cAArB,CAAA;EACA,IAAA,IAAA,CAAK1X,KAAL,GAAa,IAAK8C,CAAAA,GAAL,CAAS6U,WAAT,CAAqBH,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAArB,CAAb,CAAA;EACA,IAAA,IAAA,CAAKG,QAAL,GAAgB,IAAK5X,CAAAA,KAAL,CAAW2X,WAAX,CAAuBH,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAvB,CAAhB,CAAA;MACAI,aAAa,CAACvV,IAAD,EAAO,IAAKsV,CAAAA,QAAZ,EAAsB,IAAK5X,CAAAA,KAA3B,EAAkCuX,YAAlC,CAAb,CAAA;EACA,IAAA,IAAA,CAAKO,UAAL,GAAkB,IAAK9X,CAAAA,KAAL,CAAW2X,WAAX,CAAuBH,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAvB,CAAlB,CAAA;EACD,GAAA;;IAEDM,MAAM,CAACzV,IAAD,EAAO;MACX,IAAIA,IAAI,CAAC/B,IAAL,IAAa,IAAA,CAAK+B,IAAL,CAAU/B,IAA3B,EAAiC,OAAO,KAAP,CAAA;MACjC,IAAK+B,CAAAA,IAAL,GAAYA,IAAZ,CAAA;MACAuV,aAAa,CAACvV,IAAD,EAAO,IAAKsV,CAAAA,QAAZ,EAAsB,IAAA,CAAK5X,KAA3B,EAAkC,IAAKuX,CAAAA,YAAvC,CAAb,CAAA;EACA,IAAA,OAAO,IAAP,CAAA;EACD,GAAA;;IAEDS,cAAc,CAACC,MAAD,EAAS;MACrB,OACEA,MAAM,CAAC1X,IAAP,IAAe,YAAf,KACC0X,MAAM,CAAClH,MAAP,IAAiB,IAAA,CAAK/Q,KAAtB,IAA+B,IAAA,CAAK4X,QAAL,CAAcM,QAAd,CAAuBD,MAAM,CAAClH,MAA9B,CADhC,CADF,CAAA;EAID,GAAA;;EAxBoB,CAAA;EA2BhB,SAAS8G,aAAT,CACLvV,IADK,EAELsV,QAFK,EAGL5X,KAHK,EAILuX,YAJK,EAKLY,WALK,EAMLC,aANK,EAOL;IACA,IAAIC,UAAU,GAAG,CAAjB;QACEC,UAAU,GAAG,IADf,CAAA;EAEA,EAAA,IAAIC,OAAO,GAAGX,QAAQ,CAACpR,UAAvB;EAAA,MACE7G,GAAG,GAAG2C,IAAI,CAACkE,UADb,CAAA;;EAEA,EAAA,KAAK,IAAIrJ,CAAC,GAAG,CAAR,EAAWyC,GAAG,GAAG,CAAtB,EAAyBzC,CAAC,GAAGwC,GAAG,CAACiB,UAAjC,EAA6CzD,CAAC,EAA9C,EAAkD;MAChD,IAAI;QAAE+D,OAAF;EAAWE,MAAAA,QAAAA;EAAX,KAAA,GAAwBzB,GAAG,CAACQ,KAAJ,CAAUhD,CAAV,EAAakE,KAAzC,CAAA;;EACA,IAAA,KAAK,IAAIlD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+C,OAApB,EAA6B/C,CAAC,EAAIyB,EAAAA,GAAG,EAArC,EAAyC;EACvC,MAAA,IAAI4Y,QAAQ,GACVL,WAAW,IAAIvY,GAAf,GAAqBwY,aAArB,GAAqChX,QAAQ,IAAIA,QAAQ,CAACjD,CAAD,CAD3D,CAAA;QAEA,IAAIsa,QAAQ,GAAGD,QAAQ,GAAGA,QAAQ,GAAG,IAAd,GAAqB,EAA5C,CAAA;QACAH,UAAU,IAAIG,QAAQ,IAAIjB,YAA1B,CAAA;EACA,MAAA,IAAI,CAACiB,QAAL,EAAeF,UAAU,GAAG,KAAb,CAAA;;QACf,IAAI,CAACC,OAAL,EAAc;EACZX,QAAAA,QAAQ,CAACD,WAAT,CAAqBH,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAArB,CAAoDiB,CAAAA,KAApD,CAA0D9a,KAA1D,GACE6a,QADF,CAAA;EAED,OAHD,MAGO;EACL,QAAA,IAAIF,OAAO,CAACG,KAAR,CAAc9a,KAAd,IAAuB6a,QAA3B,EAAqCF,OAAO,CAACG,KAAR,CAAc9a,KAAd,GAAsB6a,QAAtB,CAAA;UACrCF,OAAO,GAAGA,OAAO,CAACI,WAAlB,CAAA;EACD,OAAA;EACF,KAAA;EACF,GAAA;;EAED,EAAA,OAAOJ,OAAP,EAAgB;EACd,IAAA,IAAIjS,KAAK,GAAGiS,OAAO,CAACI,WAApB,CAAA;EACAJ,IAAAA,OAAO,CAACtG,UAAR,CAAmB2G,WAAnB,CAA+BL,OAA/B,CAAA,CAAA;EACAA,IAAAA,OAAO,GAAGjS,KAAV,CAAA;EACD,GAAA;;EAED,EAAA,IAAIgS,UAAJ,EAAgB;EACdtY,IAAAA,KAAK,CAAC0Y,KAAN,CAAY9a,KAAZ,GAAoBya,UAAU,GAAG,IAAjC,CAAA;EACArY,IAAAA,KAAK,CAAC0Y,KAAN,CAAYG,QAAZ,GAAuB,EAAvB,CAAA;EACD,GAHD,MAGO;EACL7Y,IAAAA,KAAK,CAAC0Y,KAAN,CAAY9a,KAAZ,GAAoB,EAApB,CAAA;EACAoC,IAAAA,KAAK,CAAC0Y,KAAN,CAAYG,QAAZ,GAAuBR,UAAU,GAAG,IAApC,CAAA;EACD,GAAA;EACF;;QC/DYxb,GAAG,GAAG,IAAIuI,0BAAJ,CAAc,qBAAd,EAAZ;EAEA,SAAS0T,cAAT,CAAwB;EAC7BC,EAAAA,WAAW,GAAG,CADe;EAE7BxB,EAAAA,YAAY,GAAG,EAFc;EAG7ByB,EAAAA,IAAI,GAAG1B,SAHsB;EAI7B2B,EAAAA,mBAAmB,GAAG,IAAA;EAJO,CAAA,GAK3B,EALG,EAKC;EACN,EAAA,IAAIC,MAAM,GAAG,IAAIC,uBAAJ,CAAW;MACtBtc,GADsB;EAEtBgJ,IAAAA,KAAK,EAAE;EACLuT,MAAAA,IAAI,CAAC5I,CAAD,EAAI3K,KAAJ,EAAW;EACb,QAAA,IAAA,CAAKrF,IAAL,CAAU6Y,KAAV,CAAgBC,SAAhB,CAA0BvU,cAAc,CAACc,KAAK,CAACb,MAAP,CAAd,CAA6BhF,KAA7B,CAAmCU,IAA7D,CAAA,GAAqE,CACnE4B,IADmE,EAEnE0N,IAFmE,KAGhE,IAAIgJ,IAAJ,CAAS1W,IAAT,EAAeiV,YAAf,EAA6BvH,IAA7B,CAHL,CAAA;;EAIA,QAAA,OAAO,IAAIuJ,WAAJ,CAAgB,CAAC,CAAjB,EAAoB,KAApB,CAAP,CAAA;SANG;;EAQLC,MAAAA,KAAK,CAAC7P,EAAD,EAAK/H,IAAL,EAAW;EACd,QAAA,OAAOA,IAAI,CAAC4X,KAAL,CAAW7P,EAAX,CAAP,CAAA;EACD,OAAA;;OAZmB;EActB0P,IAAAA,KAAK,EAAE;QACLI,UAAU,CAAC5T,KAAD,EAAQ;EAChB,QAAA,IAAI6T,WAAW,GAAG7c,GAAG,CAACyU,QAAJ,CAAazL,KAAb,CAAlB,CAAA;EACA,QAAA,OAAO6T,WAAW,CAACC,YAAZ,GAA2B,CAAC,CAA5B,GACH;EAAE3N,UAAAA,KAAK,EAAE,eAAA;EAAT,SADG,GAEH,IAFJ,CAAA;SAHG;;EAQL4N,MAAAA,eAAe,EAAE;EACfC,QAAAA,SAAS,CAAC7J,IAAD,EAAOoB,KAAP,EAAc;YACrB0I,eAAe,CACb9J,IADa,EAEboB,KAFa,EAGb2H,WAHa,EAIbxB,YAJa,EAKb0B,mBALa,CAAf,CAAA;WAFa;;UAUfc,UAAU,CAAC/J,IAAD,EAAO;YACfgK,gBAAgB,CAAChK,IAAD,CAAhB,CAAA;WAXa;;EAafiK,QAAAA,SAAS,CAACjK,IAAD,EAAOoB,KAAP,EAAc;EACrBX,UAAAA,eAAe,CAACT,IAAD,EAAOoB,KAAP,EAAcmG,YAAd,CAAf,CAAA;EACD,SAAA;;SAvBE;;QA0BL2C,WAAW,CAACrU,KAAD,EAAQ;EACjB,QAAA,IAAI6T,WAAW,GAAG7c,GAAG,CAACyU,QAAJ,CAAazL,KAAb,CAAlB,CAAA;EACA,QAAA,IAAI6T,WAAW,CAACC,YAAZ,GAA2B,CAAC,CAAhC,EACE,OAAOQ,iBAAiB,CAACtU,KAAD,EAAQ6T,WAAW,CAACC,YAApB,CAAxB,CAAA;SA7BC;;EAgCLL,MAAAA,SAAS,EAAE,EAAA;EAhCN,KAAA;EAde,GAAX,CAAb,CAAA;EAiDA,EAAA,OAAOJ,MAAP,CAAA;EACD,CAAA;;EAED,MAAMK,WAAN,CAAkB;EAChBjc,EAAAA,WAAW,CAACqc,YAAD,EAAeS,QAAf,EAAyB;MAClC,IAAKT,CAAAA,YAAL,GAAoBA,YAApB,CAAA;MACA,IAAKS,CAAAA,QAAL,GAAgBA,QAAhB,CAAA;EACD,GAAA;;IAEDZ,KAAK,CAAC7P,EAAD,EAAK;MACR,IAAI9D,KAAK,GAAG,IAAZ;EAAA,QACEwU,MAAM,GAAG1Q,EAAE,CAAC2Q,OAAH,CAAWzd,GAAX,CADX,CAAA;EAEA,IAAA,IAAIwd,MAAM,IAAIA,MAAM,CAACE,SAAP,IAAoB,IAAlC,EACE,OAAO,IAAIhB,WAAJ,CAAgBc,MAAM,CAACE,SAAvB,EAAkC,IAAlC,CAAP,CAAA;EACF,IAAA,IAAIF,MAAM,IAAIA,MAAM,CAACG,WAAP,KAAuBC,SAArC,EACE,OAAO,IAAIlB,WAAJ,CAAgB1T,KAAK,CAAC8T,YAAtB,EAAoCU,MAAM,CAACG,WAA3C,CAAP,CAAA;;MACF,IAAI3U,KAAK,CAAC8T,YAAN,GAAqB,CAAC,CAAtB,IAA2BhQ,EAAE,CAAC0G,UAAlC,EAA8C;EAC5C,MAAA,IAAIqK,MAAM,GAAG/Q,EAAE,CAACpB,OAAH,CAAWzK,GAAX,CAAe+H,KAAK,CAAC8T,YAArB,EAAmC,CAAC,CAApC,CAAb,CAAA;EACA,MAAA,IAAI,CAAC/S,YAAY,CAAC+C,EAAE,CAAClD,GAAH,CAAOhB,OAAP,CAAeiV,MAAf,CAAD,CAAjB,EAA2CA,MAAM,GAAG,IAAT,CAAA;QAC3C7U,KAAK,GAAG,IAAI0T,WAAJ,CAAgBmB,MAAhB,EAAwB7U,KAAK,CAACuU,QAA9B,CAAR,CAAA;EACD,KAAA;;EACD,IAAA,OAAOvU,KAAP,CAAA;EACD,GAAA;;EAnBe,CAAA;;EAsBlB,SAASiU,eAAT,CACE9J,IADF,EAEEoB,KAFF,EAGE2H,WAHF,EAIExB,YAJF,EAKE0B,mBALF,EAME;IACA,IAAIS,WAAW,GAAG7c,GAAG,CAACyU,QAAJ,CAAatB,IAAI,CAACnK,KAAlB,CAAlB,CAAA;;EAEA,EAAA,IAAI,CAAC6T,WAAW,CAACU,QAAjB,EAA2B;EACzB,IAAA,IAAIrJ,MAAM,GAAG4J,aAAa,CAACvJ,KAAK,CAACL,MAAP,CAA1B;UACE1O,IAAI,GAAG,CAAC,CADV,CAAA;;EAEA,IAAA,IAAI0O,MAAJ,EAAY;QACV,IAAI;UAAExT,IAAF;EAAQE,QAAAA,KAAAA;SAAUsT,GAAAA,MAAM,CAAC6J,qBAAP,EAAtB,CAAA;EACA,MAAA,IAAIxJ,KAAK,CAACiB,OAAN,GAAgB9U,IAAhB,IAAwBwb,WAA5B,EACE1W,IAAI,GAAGwY,QAAQ,CAAC7K,IAAD,EAAOoB,KAAP,EAAc,MAAd,CAAf,CADF,KAEK,IAAI3T,KAAK,GAAG2T,KAAK,CAACiB,OAAd,IAAyB0G,WAA7B,EACH1W,IAAI,GAAGwY,QAAQ,CAAC7K,IAAD,EAAOoB,KAAP,EAAc,OAAd,CAAf,CAAA;EACH,KAAA;;EAED,IAAA,IAAI/O,IAAI,IAAIqX,WAAW,CAACC,YAAxB,EAAsC;EACpC,MAAA,IAAI,CAACV,mBAAD,IAAwB5W,IAAI,KAAK,CAAC,CAAtC,EAAyC;UACvC,IAAIwK,KAAK,GAAGmD,IAAI,CAACnK,KAAL,CAAWY,GAAX,CAAehB,OAAf,CAAuBpD,IAAvB,CAAZ,CAAA;UACA,IAAIrC,KAAK,GAAG6M,KAAK,CAACvK,IAAN,CAAW,CAAC,CAAZ,CAAZ;EAAA,YACExE,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAakD,KAAb,CADR;cAEEwB,KAAK,GAAGqL,KAAK,CAACrL,KAAN,CAAY,CAAC,CAAb,CAFV,CAAA;UAGA,IAAI5B,GAAG,GACL9B,GAAG,CAACO,QAAJ,CAAawO,KAAK,CAAC5O,GAAN,GAAYuD,KAAzB,CAAkCqL,GAAAA,KAAK,CAACtG,SAAN,CAAgBlF,KAAhB,CAAsBH,OAAxD,GAAkE,CADpE,CAAA;;EAGA,QAAA,IAAItB,GAAG,IAAI9B,GAAG,CAACF,KAAJ,GAAY,CAAvB,EAA0B;EACxB,UAAA,OAAA;EACD,SAAA;EACF,OAAA;;EAEDkd,MAAAA,YAAY,CAAC9K,IAAD,EAAO3N,IAAP,CAAZ,CAAA;EACD,KAAA;EACF,GAAA;EACF,CAAA;;EAED,SAAS2X,gBAAT,CAA0BhK,IAA1B,EAAgC;IAC9B,IAAI0J,WAAW,GAAG7c,GAAG,CAACyU,QAAJ,CAAatB,IAAI,CAACnK,KAAlB,CAAlB,CAAA;EACA,EAAA,IAAI6T,WAAW,CAACC,YAAZ,GAA2B,CAAC,CAA5B,IAAiC,CAACD,WAAW,CAACU,QAAlD,EACEU,YAAY,CAAC9K,IAAD,EAAO,CAAC,CAAR,CAAZ,CAAA;EACH,CAAA;;EAED,SAASS,eAAT,CAAyBT,IAAzB,EAA+BoB,KAA/B,EAAsCmG,YAAtC,EAAoD;IAClD,IAAImC,WAAW,GAAG7c,GAAG,CAACyU,QAAJ,CAAatB,IAAI,CAACnK,KAAlB,CAAlB,CAAA;EACA,EAAA,IAAI6T,WAAW,CAACC,YAAZ,IAA4B,CAAC,CAA7B,IAAkCD,WAAW,CAACU,QAAlD,EAA4D,OAAO,KAAP,CAAA;EAE5D,EAAA,IAAI/X,IAAI,GAAG2N,IAAI,CAACnK,KAAL,CAAWY,GAAX,CAAelE,MAAf,CAAsBmX,WAAW,CAACC,YAAlC,CAAX,CAAA;EACA,EAAA,IAAI/b,KAAK,GAAGmd,eAAe,CAAC/K,IAAD,EAAO0J,WAAW,CAACC,YAAnB,EAAiCtX,IAAI,CAAChB,KAAtC,CAA3B,CAAA;EACA2O,EAAAA,IAAI,CAACjB,QAAL,CACEiB,IAAI,CAACnK,KAAL,CAAW8D,EAAX,CAAc4H,OAAd,CAAsB1U,GAAtB,EAA2B;EACzB2d,IAAAA,WAAW,EAAE;QAAEQ,MAAM,EAAE5J,KAAK,CAACiB,OAAhB;EAAyB4I,MAAAA,UAAU,EAAErd,KAAAA;EAArC,KAAA;EADY,GAA3B,CADF,CAAA,CAAA;;IAMA,SAASsd,MAAT,CAAgB9J,KAAhB,EAAuB;EACrB+J,IAAAA,MAAM,CAACzJ,mBAAP,CAA2B,SAA3B,EAAsCwJ,MAAtC,CAAA,CAAA;EACAC,IAAAA,MAAM,CAACzJ,mBAAP,CAA2B,WAA3B,EAAwCC,IAAxC,CAAA,CAAA;MACA,IAAI+H,WAAW,GAAG7c,GAAG,CAACyU,QAAJ,CAAatB,IAAI,CAACnK,KAAlB,CAAlB,CAAA;;MACA,IAAI6T,WAAW,CAACU,QAAhB,EAA0B;EACxBgB,MAAAA,iBAAiB,CACfpL,IADe,EAEf0J,WAAW,CAACC,YAFG,EAGf0B,YAAY,CAAC3B,WAAW,CAACU,QAAb,EAAuBhJ,KAAvB,EAA8BmG,YAA9B,CAHG,CAAjB,CAAA;EAKAvH,MAAAA,IAAI,CAACjB,QAAL,CAAciB,IAAI,CAACnK,KAAL,CAAW8D,EAAX,CAAc4H,OAAd,CAAsB1U,GAAtB,EAA2B;EAAE2d,QAAAA,WAAW,EAAE,IAAA;EAAf,OAA3B,CAAd,CAAA,CAAA;EACD,KAAA;EACF,GAAA;;IACD,SAAS7I,IAAT,CAAcP,KAAd,EAAqB;MACnB,IAAI,CAACA,KAAK,CAACkK,KAAX,EAAkB,OAAOJ,MAAM,CAAC9J,KAAD,CAAb,CAAA;MAClB,IAAIsI,WAAW,GAAG7c,GAAG,CAACyU,QAAJ,CAAatB,IAAI,CAACnK,KAAlB,CAAlB,CAAA;MACA,IAAI0V,OAAO,GAAGF,YAAY,CAAC3B,WAAW,CAACU,QAAb,EAAuBhJ,KAAvB,EAA8BmG,YAA9B,CAA1B,CAAA;MACAiE,kBAAkB,CAACxL,IAAD,EAAO0J,WAAW,CAACC,YAAnB,EAAiC4B,OAAjC,EAA0ChE,YAA1C,CAAlB,CAAA;EACD,GAAA;;EAED4D,EAAAA,MAAM,CAACvJ,gBAAP,CAAwB,SAAxB,EAAmCsJ,MAAnC,CAAA,CAAA;EACAC,EAAAA,MAAM,CAACvJ,gBAAP,CAAwB,WAAxB,EAAqCD,IAArC,CAAA,CAAA;EACAP,EAAAA,KAAK,CAACF,cAAN,EAAA,CAAA;EACA,EAAA,OAAO,IAAP,CAAA;EACD,CAAA;;EAED,SAAS6J,eAAT,CAAyB/K,IAAzB,EAA+B8B,OAA/B,EAAwC;IAAE5Q,OAAF;EAAWE,EAAAA,QAAAA;EAAX,CAAxC,EAA+D;IAC7D,IAAIxD,KAAK,GAAGwD,QAAQ,IAAIA,QAAQ,CAACA,QAAQ,CAAChE,MAAT,GAAkB,CAAnB,CAAhC,CAAA;IACA,IAAIQ,KAAJ,EAAW,OAAOA,KAAP,CAAA;EACX,EAAA,IAAIkF,GAAG,GAAGkN,IAAI,CAACyL,QAAL,CAAc3J,OAAd,CAAV,CAAA;IACA,IAAIxP,IAAI,GAAGQ,GAAG,CAACR,IAAJ,CAASoZ,UAAT,CAAoB5Y,GAAG,CAAC6P,MAAxB,CAAX,CAAA;EACA,EAAA,IAAIgJ,QAAQ,GAAGrZ,IAAI,CAACsZ,WAApB;QACEC,KAAK,GAAG3a,OADV,CAAA;IAEA,IAAIE,QAAJ,EACE,KAAK,IAAIjE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+D,OAApB,EAA6B/D,CAAC,EAA9B,EACE,IAAIiE,QAAQ,CAACjE,CAAD,CAAZ,EAAiB;EACfwe,IAAAA,QAAQ,IAAIva,QAAQ,CAACjE,CAAD,CAApB,CAAA;MACA0e,KAAK,EAAA,CAAA;EACN,GAAA;IACL,OAAOF,QAAQ,GAAGE,KAAlB,CAAA;EACD,CAAA;;EAED,SAASlB,aAAT,CAAuB5J,MAAvB,EAA+B;EAC7B,EAAA,OAAOA,MAAM,IAAIA,MAAM,CAACmB,QAAP,IAAmB,IAA7B,IAAqCnB,MAAM,CAACmB,QAAP,IAAmB,IAA/D,EACEnB,MAAM,GAAGA,MAAM,CAAC+K,SAAP,CAAiB5D,QAAjB,CAA0B,aAA1B,CAAA,GACL,IADK,GAELnH,MAAM,CAACkB,UAFX,CAAA;;EAGF,EAAA,OAAOlB,MAAP,CAAA;EACD,CAAA;;EAED,SAAS8J,QAAT,CAAkB7K,IAAlB,EAAwBoB,KAAxB,EAA+BwC,IAA/B,EAAqC;EACnC,EAAA,IAAIpF,KAAK,GAAGwB,IAAI,CAACoC,WAAL,CAAiB;MAAE7U,IAAI,EAAE6T,KAAK,CAACiB,OAAd;MAAuB7U,GAAG,EAAE4T,KAAK,CAACkB,OAAAA;EAAlC,GAAjB,CAAZ,CAAA;EACA,EAAA,IAAI,CAAC9D,KAAL,EAAY,OAAO,CAAC,CAAR,CAAA;IACZ,IAAI;EAAEvQ,IAAAA,GAAAA;EAAF,GAAA,GAAUuQ,KAAd,CAAA;EACA,EAAA,IAAI3B,KAAK,GAAGxH,UAAU,CAAC2K,IAAI,CAACnK,KAAL,CAAWY,GAAX,CAAehB,OAAf,CAAuBxH,GAAvB,CAAD,CAAtB,CAAA;EACA,EAAA,IAAI,CAAC4O,KAAL,EAAY,OAAO,CAAC,CAAR,CAAA;EACZ,EAAA,IAAI+G,IAAI,IAAI,OAAZ,EAAqB,OAAO/G,KAAK,CAAC5O,GAAb,CAAA;EACrB,EAAA,IAAIH,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAa+P,KAAK,CAACvK,IAAN,CAAW,CAAC,CAAZ,CAAb,CAAV;QACEd,KAAK,GAAGqL,KAAK,CAACrL,KAAN,CAAY,CAAC,CAAb,CADV,CAAA;EAEA,EAAA,IAAI3B,KAAK,GAAG/B,GAAG,CAACA,GAAJ,CAAQie,OAAR,CAAgBlP,KAAK,CAAC5O,GAAN,GAAYuD,KAA5B,CAAZ,CAAA;IACA,OAAO3B,KAAK,GAAG/B,GAAG,CAACF,KAAZ,IAAqB,CAArB,GAAyB,CAAC,CAA1B,GAA8B4D,KAAK,GAAG1D,GAAG,CAACA,GAAJ,CAAQ+B,KAAK,GAAG,CAAhB,CAA7C,CAAA;EACD,CAAA;;EAED,SAASwb,YAAT,CAAsBjB,QAAtB,EAAgChJ,KAAhC,EAAuCmG,YAAvC,EAAqD;IACnD,IAAI5E,MAAM,GAAGvB,KAAK,CAACiB,OAAN,GAAgB+H,QAAQ,CAACY,MAAtC,CAAA;IACA,OAAO5b,IAAI,CAACE,GAAL,CAASiY,YAAT,EAAuB6C,QAAQ,CAACa,UAAT,GAAsBtI,MAA7C,CAAP,CAAA;EACD,CAAA;;EAED,SAASmI,YAAT,CAAsB9K,IAAtB,EAA4BjT,KAA5B,EAAmC;EACjCiT,EAAAA,IAAI,CAACjB,QAAL,CAAciB,IAAI,CAACnK,KAAL,CAAW8D,EAAX,CAAc4H,OAAd,CAAsB1U,GAAtB,EAA2B;EAAE0d,IAAAA,SAAS,EAAExd,KAAAA;EAAb,GAA3B,CAAd,CAAA,CAAA;EACD,CAAA;;EAED,SAASqe,iBAAT,CAA2BpL,IAA3B,EAAiC3N,IAAjC,EAAuCzE,KAAvC,EAA8C;IAC5C,IAAIiP,KAAK,GAAGmD,IAAI,CAACnK,KAAL,CAAWY,GAAX,CAAehB,OAAf,CAAuBpD,IAAvB,CAAZ,CAAA;IACA,IAAIrC,KAAK,GAAG6M,KAAK,CAACvK,IAAN,CAAW,CAAC,CAAZ,CAAZ;EAAA,MACExE,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAakD,KAAb,CADR;QAEEwB,KAAK,GAAGqL,KAAK,CAACrL,KAAN,CAAY,CAAC,CAAb,CAFV,CAAA;IAGA,IAAI5B,GAAG,GAAG9B,GAAG,CAACO,QAAJ,CAAawO,KAAK,CAAC5O,GAAN,GAAYuD,KAAzB,CAAkCqL,GAAAA,KAAK,CAACtG,SAAN,CAAgBlF,KAAhB,CAAsBH,OAAxD,GAAkE,CAA5E,CAAA;EACA,EAAA,IAAIyI,EAAE,GAAGqG,IAAI,CAACnK,KAAL,CAAW8D,EAApB,CAAA;;EACA,EAAA,KAAK,IAAIhK,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG7B,GAAG,CAACD,MAA5B,EAAoC8B,GAAG,EAAvC,EAA2C;MACzC,IAAIqc,QAAQ,GAAGrc,GAAG,GAAG7B,GAAG,CAACF,KAAV,GAAkBgC,GAAjC,CADyC;;EAGzC,IAAA,IAAID,GAAG,IAAI7B,GAAG,CAACA,GAAJ,CAAQke,QAAR,CAAqBle,IAAAA,GAAG,CAACA,GAAJ,CAAQke,QAAQ,GAAGle,GAAG,CAACF,KAAvB,CAAhC,EAA+D,SAAA;EAC/D,IAAA,IAAIK,GAAG,GAAGH,GAAG,CAACA,GAAJ,CAAQke,QAAR,CAAV;UACE;EAAE3a,MAAAA,KAAAA;EAAF,KAAA,GAAYrB,KAAK,CAACuC,MAAN,CAAatE,GAAb,CADd,CAAA;EAEA,IAAA,IAAI4B,KAAK,GAAGwB,KAAK,CAACH,OAAN,IAAiB,CAAjB,GAAqB,CAArB,GAAyBtB,GAAG,GAAG9B,GAAG,CAACO,QAAJ,CAAaJ,GAAb,CAA3C,CAAA;MACA,IAAIoD,KAAK,CAACD,QAAN,IAAkBC,KAAK,CAACD,QAAN,CAAevB,KAAf,CAAyBjC,IAAAA,KAA/C,EAAsD,SAAA;EACtD,IAAA,IAAIwD,QAAQ,GAAGC,KAAK,CAACD,QAAN,GACXC,KAAK,CAACD,QAAN,CAAewB,KAAf,EADW,GAEXqZ,MAAM,CAAC5a,KAAK,CAACH,OAAP,CAFV,CAAA;EAGAE,IAAAA,QAAQ,CAACvB,KAAD,CAAR,GAAkBjC,KAAlB,CAAA;EACA+L,IAAAA,EAAE,CAACgF,aAAH,CAAiBnN,KAAK,GAAGvD,GAAzB,EAA8B,IAA9B,EAAoCmJ,OAAO,CAAC/F,KAAD,EAAQ,UAAR,EAAoBD,QAApB,CAA3C,CAAA,CAAA;EACD,GAAA;;IACD,IAAIuI,EAAE,CAAC0G,UAAP,EAAmBL,IAAI,CAACjB,QAAL,CAAcpF,EAAd,CAAA,CAAA;EACpB,CAAA;;EAED,SAAS6R,kBAAT,CAA4BxL,IAA5B,EAAkC3N,IAAlC,EAAwCzE,KAAxC,EAA+C2Z,YAA/C,EAA6D;IAC3D,IAAI1K,KAAK,GAAGmD,IAAI,CAACnK,KAAL,CAAWY,GAAX,CAAehB,OAAf,CAAuBpD,IAAvB,CAAZ,CAAA;IACA,IAAIrC,KAAK,GAAG6M,KAAK,CAACvK,IAAN,CAAW,CAAC,CAAZ,CAAZ;QACEd,KAAK,GAAGqL,KAAK,CAACrL,KAAN,CAAY,CAAC,CAAb,CADV,CAAA;IAEA,IAAI5B,GAAG,GACLjC,QAAQ,CAACb,GAAT,CAAakD,KAAb,CAAA,CAAoB3B,QAApB,CAA6BwO,KAAK,CAAC5O,GAAN,GAAYuD,KAAzC,CACAqL,GAAAA,KAAK,CAACtG,SAAN,CAAgBlF,KAAhB,CAAsBH,OADtB,GAEA,CAHF,CAAA;EAIA,EAAA,IAAI4B,GAAG,GAAGkN,IAAI,CAACyL,QAAL,CAAc5O,KAAK,CAACrL,KAAN,CAAY,CAAC,CAAb,CAAd,EAA+Bc,IAAzC,CAAA;;IACA,OAAOQ,GAAG,CAACoP,QAAJ,IAAgB,OAAvB,EAAgCpP,GAAG,GAAGA,GAAG,CAACmP,UAAV,CAAA;;EAChC4F,EAAAA,aAAa,CAAC7X,KAAD,EAAQ8C,GAAG,CAAC0D,UAAZ,EAAwB1D,GAAxB,EAA6ByU,YAA7B,EAA2C3X,GAA3C,EAAgDhC,KAAhD,CAAb,CAAA;EACD,CAAA;;EAED,SAASqe,MAAT,CAAgB1a,CAAhB,EAAmB;IACjB,IAAI9B,MAAM,GAAG,EAAb,CAAA;;EACA,EAAA,KAAK,IAAItC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoE,CAApB,EAAuBpE,CAAC,EAAxB,EAA4BsC,MAAM,CAACK,IAAP,CAAY,CAAZ,CAAA,CAAA;;EAC5B,EAAA,OAAOL,MAAP,CAAA;EACD,CAAA;;EAED,SAAS0a,iBAAT,CAA2BtU,KAA3B,EAAkCxD,IAAlC,EAAwC;IACtC,IAAI6X,WAAW,GAAG,EAAlB,CAAA;IACA,IAAIrN,KAAK,GAAGhH,KAAK,CAACY,GAAN,CAAUhB,OAAV,CAAkBpD,IAAlB,CAAZ,CAAA;IACA,IAAIrC,KAAK,GAAG6M,KAAK,CAACvK,IAAN,CAAW,CAAC,CAAZ,CAAZ;EAAA,MACExE,GAAG,GAAGH,QAAQ,CAACb,GAAT,CAAakD,KAAb,CADR;QAEEwB,KAAK,GAAGqL,KAAK,CAACrL,KAAN,CAAY,CAAC,CAAb,CAFV,CAAA;EAGA,EAAA,IAAI5B,GAAG,GAAG9B,GAAG,CAACO,QAAJ,CAAawO,KAAK,CAAC5O,GAAN,GAAYuD,KAAzB,IAAkCqL,KAAK,CAACtG,SAAN,CAAgBlF,KAAhB,CAAsBH,OAAlE,CAAA;;EACA,EAAA,KAAK,IAAIvB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG7B,GAAG,CAACD,MAA5B,EAAoC8B,GAAG,EAAvC,EAA2C;EACzC,IAAA,IAAIE,KAAK,GAAGD,GAAG,GAAGD,GAAG,GAAG7B,GAAG,CAACF,KAAhB,GAAwB,CAApC,CADyC;EAGzC;EACA;;MACA,IACE,CAACgC,GAAG,IAAI9B,GAAG,CAACF,KAAX,IAAoBE,GAAG,CAACA,GAAJ,CAAQ+B,KAAR,CAAA,IAAkB/B,GAAG,CAACA,GAAJ,CAAQ+B,KAAK,GAAG,CAAhB,CAAvC,MACCF,GAAG,IAAI,CAAP,IAAY7B,GAAG,CAACA,GAAJ,CAAQ+B,KAAK,GAAG,CAAhB,CAAA,IAAsB/B,GAAG,CAACA,GAAJ,CAAQ+B,KAAK,GAAG,CAAR,GAAY/B,GAAG,CAACF,KAAxB,CADnC,CADF,EAGE;EACA,MAAA,IAAIkU,OAAO,GAAGhU,GAAG,CAACA,GAAJ,CAAQ+B,KAAR,CAAd,CAAA;EACA,MAAA,IAAI5B,GAAG,GAAGuD,KAAK,GAAGsQ,OAAR,GAAkB9R,KAAK,CAACuC,MAAN,CAAauP,OAAb,CAAsB1R,CAAAA,QAAxC,GAAmD,CAA7D,CAAA;EACA,MAAA,IAAI0C,GAAG,GAAG0U,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAV,CAAA;QACA3U,GAAG,CAAC4U,SAAJ,GAAgB,sBAAhB,CAAA;QACAwC,WAAW,CAACpa,IAAZ,CAAiBiM,0BAAU,CAACmQ,MAAX,CAAkBje,GAAlB,EAAuB6E,GAAvB,CAAjB,CAAA,CAAA;EACD,KAAA;EACF,GAAA;;IACD,OAAOmJ,6BAAa,CAAC5C,MAAd,CAAqBxD,KAAK,CAACY,GAA3B,EAAgCyT,WAAhC,CAAP,CAAA;EACD;;EC7RD;EAmBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACO,SAASiC,YAAT,CAAsB;EAAEzP,EAAAA,uBAAuB,GAAG,KAAA;EAA5B,CAAA,GAAsC,EAA5D,EAAgE;IACrE,OAAO,IAAIyM,uBAAJ,CAAW;EAChBtc,IAAAA,GAAG,EAAEuf,KADW;EAGhB;EACA;EACA;EACAvW,IAAAA,KAAK,EAAE;EACLuT,MAAAA,IAAI,GAAG;EACL,QAAA,OAAO,IAAP,CAAA;SAFG;;EAILI,MAAAA,KAAK,CAAC7P,EAAD,EAAK+I,GAAL,EAAU;EACb,QAAA,IAAI1V,GAAG,GAAG2M,EAAE,CAAC2Q,OAAH,CAAW8B,KAAX,CAAV,CAAA;EACA,QAAA,IAAIpf,GAAG,IAAI,IAAX,EAAiB,OAAOA,GAAG,IAAI,CAAC,CAAR,GAAY,IAAZ,GAAmBA,GAA1B,CAAA;UACjB,IAAI0V,GAAG,IAAI,IAAP,IAAe,CAAC/I,EAAE,CAAC0G,UAAvB,EAAmC,OAAOqC,GAAP,CAAA;UACnC,IAAI;YAAE2J,OAAF;EAAWpe,UAAAA,GAAAA;EAAX,SAAA,GAAmB0L,EAAE,CAACpB,OAAH,CAAW+T,SAAX,CAAqB5J,GAArB,CAAvB,CAAA;EACA,QAAA,OAAO2J,OAAO,GAAG,IAAH,GAAUpe,GAAxB,CAAA;EACD,OAAA;;OAhBa;EAmBhBob,IAAAA,KAAK,EAAE;EACLa,MAAAA,WAAW,EAAEpO,iBADR;EAGL8N,MAAAA,eAAe,EAAE;EACfK,QAAAA,SAAS,EAAExJ,iBAAAA;SAJR;;QAOL8L,sBAAsB,CAACvM,IAAD,EAAO;EAC3B,QAAA,IAAIoM,KAAe,CAAC9K,QAAhB,CAAyBtB,IAAI,CAACnK,KAA9B,CAAwC,IAAA,IAA5C,EACE,OAAOmK,IAAI,CAACnK,KAAL,CAAWE,SAAlB,CAAA;SATC;;QAYLuK,iBAZK;QAcLnB,aAdK;EAgBLoB,MAAAA,WAAAA;OAnCc;;EAsChBiM,IAAAA,iBAAiB,CAAChM,CAAD,EAAI2C,QAAJ,EAActN,KAAd,EAAqB;EACpC,MAAA,OAAO4G,kBAAkB,CACvB5G,KADuB,EAEvBqN,SAAS,CAACrN,KAAD,EAAQsN,QAAR,CAFc,EAGvBzG,uBAHuB,CAAzB,CAAA;EAKD,KAAA;;EA5Ce,GAAX,CAAP,CAAA;EA8CD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}